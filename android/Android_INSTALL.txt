08/13/2012

Instructions to build a SmartBody application for Android
---------------------------------------------------------

The SmartBody code is cross-compiled for the Android platform using the native development kit (NDK), which allows you to use gcc-like tools to build Android applications. This means that SmartBody is nearly fully-functional as a mobile application, since it uses the same code base as the desktop version of SmartBody. Many of the supporting libraries (such as ActiveMQ, boost, Xerces, Python, Festival, etc.) have already been built as static libraries and exist in the smartbody/android/lib directory.

(1) Download and install android-sdk from : http://developer.android.com/sdk/index.html

(2) Download and install the android-ndk from:
http://developer.android.com/sdk/ndk/index.html
(Note that when building on the windows platform, you will also need to install cygwin 1.7 or higher from http://www.cygwin.com/ )

Follow the installation instruction for both the SDK and the NDK. Be sure to set the correct path to android-sdk/bin, android-ndk/bin so the toolchain can be access correctly.

For NDK, you also need to export the environment variable NDK_ROOT to the NDK installation directory ( for example, export NDK_ROOT= "/path/to/ndk/directory" )

Install Eclipse ( http://www.eclipse.org/ ) and its Android ADT plug-in ( http://developer.android.com/sdk/eclipse-adt.html )

The supporting libraries have been built using Anroid version 2.3.3 or higher.

**** If your target hardware is the Arm architecture, some dependency libraries are already prebuilt at SmartBodyDir)/android/lib. Therefore you can build the smartbody project directly : 

(3) Build the SmartBody Android application:
Note that there are three different examples of Android applications using SmartBody that can be built: 

(3A) sbmjni :

sbmjni is a hello world project for SmartBody. It has very basic rendering and minimal functionality, but it helps demonstarte the SmartBody port on android. 
a) Go to (SmartBodyDir)/android/sbm-jni/
b) ndk-build  ( Similar to gcc, you can set the option -j $number_threads to accelerate the build process with multi-threading).
c) copy the directory (SmartBodyDir)/android/sbm-jni/sbmjniData and its files to sdcard directory of your android device. ( Usually under /sdcard/ )
d) Use Eclipse to open the project (SmartBodyDir)/android/sbm/. 
e) Select Project->Build Project. Connect the device and then run the program as "Android Application".

(3B) sbogreapp :

sbogreapp combines SmartBody and Ogre for high quality rendering. Currently, it is very slow when rendering in deformable model mode.
a) Go to (SmartBodyDir)/android/sbogreapp/
b) ndk-build  ( Similar to gcc, you can set the option -j $number_threads to accelerate the build process with multi-threading).
c) copy the directory (SmartBodyDir)/android/sbm-ogre/sbogredir and its files to sdcard directory of your android device. ( Usually under /sdcard/ )
d) Use Eclipse to import the project (SmartBodyDir)/android/sbogreapp/. 
e) Select Project->Build Project. Connect the device and then run the program as "Android Application".

(3C) vh-wrapper

vh-wrapper is a SmartBody interface to Unity3D. Note that SmartBody connects to Unity via Unity's native code plugin interface, which presently requires a Unity Pro license. In addition, the Unity project needs to be compiled for Android, so a Unity Android license is needed as well.

a) Go to SmartBody/android/vh_wrapper/
b) ndk-build
c) rename libvhwrapper.so to libvhwrapper-dll.so ( for some reason, Android does not accept a build target name with "-" )
d) copy libvhwrapper-dll.so to the plug-in directory of Unity project. Build the Unity project for android.


**** If you are targeting other hardware achitecture ( x86, etc ) or you prefer to rebuild all libraries from their sources:

1. Building BOOST :
i) Download BOOST library, extract it into SmartBody/lib/

modify libs\filesystem\v2\src\v2_operations.cpp, change: 
#   if !defined(__APPLE__) && !defined(__OpenBSD__) 
#     include <sys/statvfs.h> 
#     define BOOST_STATVFS statvfs 
#     define BOOST_STATVFS_F_FRSIZE vfs.f_frsize 
#   else 
#ifdef __OpenBSD__ 
#     include <sys/param.h> 
#endif 

to: 

#   if !defined(__APPLE__) && !defined(__OpenBSD__) && !defined(__ANDROID__) 
#     include <sys/statvfs.h> 
#     define BOOST_STATVFS statvfs 
#     define BOOST_STATVFS_F_FRSIZE vfs.f_frsize 
#   else 
#ifdef __OpenBSD__ 
#     include <sys/param.h> 
#elif defined(__ANDROID__) 
#     include <sys/vfs.h> 
#endif 

ii) modifiy the file SmartBody/android/boost/userconfig.jam, look for :

ANDROID_NDK = ../android-ndk ; and change the directory "../android-ndk" so it points to the android NDK directory

You may also need to change all arm-linux-androideabi-xxx to the corresponding toolchain name based on your target architecture and platform.

iii) (use cygwin in Windows platform )
./bootstrap.sh
./bjam --without-python --without-math --without-mpi --without- 
iostreams toolset=gcc-android4.4.3 link=static runtime-link=static 
target-os=linux --stagedir=android stage 

2. Building iconv and xerces
(To-Do)
3. Building clapack
(To-Do)

