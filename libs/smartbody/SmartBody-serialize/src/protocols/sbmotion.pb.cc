// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmotion.proto

#include "sbmotion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SmartBodyBinary {
PROTOBUF_CONSTEXPR Motion_MetaData::Motion_MetaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadataname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadatavalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Motion_MetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Motion_MetaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Motion_MetaDataDefaultTypeInternal() {}
  union {
    Motion_MetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Motion_MetaDataDefaultTypeInternal _Motion_MetaData_default_instance_;
PROTOBUF_CONSTEXPR Motion::Motion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channelname_)*/{}
  , /*decltype(_impl_.channeltype_)*/{}
  , /*decltype(_impl_.keytimes_)*/{}
  , /*decltype(_impl_.keyvalues_)*/{}
  , /*decltype(_impl_.syncpoints_)*/{}
  , /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.numchannels_)*/0
  , /*decltype(_impl_.numframes_)*/0} {}
struct MotionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionDefaultTypeInternal() {}
  union {
    Motion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionDefaultTypeInternal _Motion_default_instance_;
}  // namespace SmartBodyBinary
static ::_pb::Metadata file_level_metadata_sbmotion_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sbmotion_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sbmotion_2eproto = nullptr;

const uint32_t TableStruct_sbmotion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion_MetaData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion_MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion_MetaData, _impl_.metadataname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion_MetaData, _impl_.metadatavalue_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.numchannels_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.channelname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.numframes_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.keytimes_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.keyvalues_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.syncpoints_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Motion, _impl_.metadata_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::SmartBodyBinary::Motion_MetaData)},
  { 10, 25, -1, sizeof(::SmartBodyBinary::Motion)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SmartBodyBinary::_Motion_MetaData_default_instance_._instance,
  &::SmartBodyBinary::_Motion_default_instance_._instance,
};

const char descriptor_table_protodef_sbmotion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016sbmotion.proto\022\017SmartBodyBinary\"\216\002\n\006Mo"
  "tion\022\014\n\004name\030\001 \002(\t\022\023\n\013numChannels\030\002 \002(\005\022"
  "\023\n\013channelName\030\003 \003(\t\022\023\n\013channelType\030\004 \003("
  "\005\022\021\n\tnumFrames\030\005 \002(\005\022\020\n\010keyTimes\030\006 \003(\002\022\021"
  "\n\tkeyValues\030\007 \003(\002\022\022\n\nsyncPoints\030\010 \003(\002\0222\n"
  "\010metaData\030\t \003(\0132 .SmartBodyBinary.Motion"
  ".MetaData\0327\n\010MetaData\022\024\n\014metaDataName\030\001 "
  "\002(\t\022\025\n\rmetaDataValue\030\002 \002(\t"
  ;
static ::_pbi::once_flag descriptor_table_sbmotion_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sbmotion_2eproto = {
    false, false, 306, descriptor_table_protodef_sbmotion_2eproto,
    "sbmotion.proto",
    &descriptor_table_sbmotion_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_sbmotion_2eproto::offsets,
    file_level_metadata_sbmotion_2eproto, file_level_enum_descriptors_sbmotion_2eproto,
    file_level_service_descriptors_sbmotion_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sbmotion_2eproto_getter() {
  return &descriptor_table_sbmotion_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sbmotion_2eproto(&descriptor_table_sbmotion_2eproto);
namespace SmartBodyBinary {

// ===================================================================

class Motion_MetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<Motion_MetaData>()._impl_._has_bits_);
  static void set_has_metadataname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metadatavalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Motion_MetaData::Motion_MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.Motion.MetaData)
}
Motion_MetaData::Motion_MetaData(const Motion_MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Motion_MetaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadataname_){}
    , decltype(_impl_.metadatavalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadataname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadataname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadataname()) {
    _this->_impl_.metadataname_.Set(from._internal_metadataname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadatavalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadatavalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadatavalue()) {
    _this->_impl_.metadatavalue_.Set(from._internal_metadatavalue(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.Motion.MetaData)
}

inline void Motion_MetaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadataname_){}
    , decltype(_impl_.metadatavalue_){}
  };
  _impl_.metadataname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadataname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadatavalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadatavalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Motion_MetaData::~Motion_MetaData() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.Motion.MetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Motion_MetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadataname_.Destroy();
  _impl_.metadatavalue_.Destroy();
}

void Motion_MetaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Motion_MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.Motion.MetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.metadataname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.metadatavalue_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motion_MetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string metaDataName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metadataname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.Motion.MetaData.metaDataName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string metaDataValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadatavalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.Motion.MetaData.metaDataValue");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Motion_MetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.Motion.MetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string metaDataName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadataname().data(), static_cast<int>(this->_internal_metadataname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.Motion.MetaData.metaDataName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metadataname(), target);
  }

  // required string metaDataValue = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadatavalue().data(), static_cast<int>(this->_internal_metadatavalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.Motion.MetaData.metaDataValue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadatavalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.Motion.MetaData)
  return target;
}

size_t Motion_MetaData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.Motion.MetaData)
  size_t total_size = 0;

  if (_internal_has_metadataname()) {
    // required string metaDataName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadataname());
  }

  if (_internal_has_metadatavalue()) {
    // required string metaDataValue = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadatavalue());
  }

  return total_size;
}
size_t Motion_MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.Motion.MetaData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string metaDataName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadataname());

    // required string metaDataValue = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadatavalue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motion_MetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Motion_MetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motion_MetaData::GetClassData() const { return &_class_data_; }


void Motion_MetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Motion_MetaData*>(&to_msg);
  auto& from = static_cast<const Motion_MetaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.Motion.MetaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_metadataname(from._internal_metadataname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_metadatavalue(from._internal_metadatavalue());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motion_MetaData::CopyFrom(const Motion_MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.Motion.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_MetaData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Motion_MetaData::InternalSwap(Motion_MetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadataname_, lhs_arena,
      &other->_impl_.metadataname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadatavalue_, lhs_arena,
      &other->_impl_.metadatavalue_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Motion_MetaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbmotion_2eproto_getter, &descriptor_table_sbmotion_2eproto_once,
      file_level_metadata_sbmotion_2eproto[0]);
}

// ===================================================================

class Motion::_Internal {
 public:
  using HasBits = decltype(std::declval<Motion>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numchannels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numframes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Motion::Motion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.Motion)
}
Motion::Motion(const Motion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Motion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channelname_){from._impl_.channelname_}
    , decltype(_impl_.channeltype_){from._impl_.channeltype_}
    , decltype(_impl_.keytimes_){from._impl_.keytimes_}
    , decltype(_impl_.keyvalues_){from._impl_.keyvalues_}
    , decltype(_impl_.syncpoints_){from._impl_.syncpoints_}
    , decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.numchannels_){}
    , decltype(_impl_.numframes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.numchannels_, &from._impl_.numchannels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numframes_) -
    reinterpret_cast<char*>(&_impl_.numchannels_)) + sizeof(_impl_.numframes_));
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.Motion)
}

inline void Motion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channelname_){arena}
    , decltype(_impl_.channeltype_){arena}
    , decltype(_impl_.keytimes_){arena}
    , decltype(_impl_.keyvalues_){arena}
    , decltype(_impl_.syncpoints_){arena}
    , decltype(_impl_.metadata_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.numchannels_){0}
    , decltype(_impl_.numframes_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Motion::~Motion() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.Motion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Motion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channelname_.~RepeatedPtrField();
  _impl_.channeltype_.~RepeatedField();
  _impl_.keytimes_.~RepeatedField();
  _impl_.keyvalues_.~RepeatedField();
  _impl_.syncpoints_.~RepeatedField();
  _impl_.metadata_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Motion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Motion::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.Motion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channelname_.Clear();
  _impl_.channeltype_.Clear();
  _impl_.keytimes_.Clear();
  _impl_.keyvalues_.Clear();
  _impl_.syncpoints_.Clear();
  _impl_.metadata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.numchannels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numframes_) -
        reinterpret_cast<char*>(&_impl_.numchannels_)) + sizeof(_impl_.numframes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.Motion.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 numChannels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_numchannels(&has_bits);
          _impl_.numchannels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channelName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channelname();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SmartBodyBinary.Motion.channelName");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 channelType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_channeltype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_channeltype(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 numFrames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_numframes(&has_bits);
          _impl_.numframes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float keyTimes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keytimes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_keytimes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float keyValues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keyvalues(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_keyvalues(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float syncPoints = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_syncpoints(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_syncpoints(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Motion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.Motion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.Motion.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 numChannels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_numchannels(), target);
  }

  // repeated string channelName = 3;
  for (int i = 0, n = this->_internal_channelname_size(); i < n; i++) {
    const auto& s = this->_internal_channelname(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.Motion.channelName");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 channelType = 4;
  for (int i = 0, n = this->_internal_channeltype_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_channeltype(i), target);
  }

  // required int32 numFrames = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_numframes(), target);
  }

  // repeated float keyTimes = 6;
  for (int i = 0, n = this->_internal_keytimes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_keytimes(i), target);
  }

  // repeated float keyValues = 7;
  for (int i = 0, n = this->_internal_keyvalues_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_keyvalues(i), target);
  }

  // repeated float syncPoints = 8;
  for (int i = 0, n = this->_internal_syncpoints_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_syncpoints(i), target);
  }

  // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.Motion)
  return target;
}

size_t Motion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.Motion)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_numchannels()) {
    // required int32 numChannels = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numchannels());
  }

  if (_internal_has_numframes()) {
    // required int32 numFrames = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numframes());
  }

  return total_size;
}
size_t Motion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.Motion)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 numChannels = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numchannels());

    // required int32 numFrames = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numframes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channelName = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channelname_.size());
  for (int i = 0, n = _impl_.channelname_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channelname_.Get(i));
  }

  // repeated int32 channelType = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.channeltype_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_channeltype_size());
    total_size += data_size;
  }

  // repeated float keyTimes = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_keytimes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_keytimes_size());
    total_size += data_size;
  }

  // repeated float keyValues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_keyvalues_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_keyvalues_size());
    total_size += data_size;
  }

  // repeated float syncPoints = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_syncpoints_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_syncpoints_size());
    total_size += data_size;
  }

  // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Motion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motion::GetClassData() const { return &_class_data_; }


void Motion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Motion*>(&to_msg);
  auto& from = static_cast<const Motion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.Motion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channelname_.MergeFrom(from._impl_.channelname_);
  _this->_impl_.channeltype_.MergeFrom(from._impl_.channeltype_);
  _this->_impl_.keytimes_.MergeFrom(from._impl_.keytimes_);
  _this->_impl_.keyvalues_.MergeFrom(from._impl_.keyvalues_);
  _this->_impl_.syncpoints_.MergeFrom(from._impl_.syncpoints_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.numchannels_ = from._impl_.numchannels_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.numframes_ = from._impl_.numframes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motion::CopyFrom(const Motion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.Motion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.metadata_))
    return false;
  return true;
}

void Motion::InternalSwap(Motion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.channelname_.InternalSwap(&other->_impl_.channelname_);
  _impl_.channeltype_.InternalSwap(&other->_impl_.channeltype_);
  _impl_.keytimes_.InternalSwap(&other->_impl_.keytimes_);
  _impl_.keyvalues_.InternalSwap(&other->_impl_.keyvalues_);
  _impl_.syncpoints_.InternalSwap(&other->_impl_.syncpoints_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motion, _impl_.numframes_)
      + sizeof(Motion::_impl_.numframes_)
      - PROTOBUF_FIELD_OFFSET(Motion, _impl_.numchannels_)>(
          reinterpret_cast<char*>(&_impl_.numchannels_),
          reinterpret_cast<char*>(&other->_impl_.numchannels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Motion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbmotion_2eproto_getter, &descriptor_table_sbmotion_2eproto_once,
      file_level_metadata_sbmotion_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::Motion_MetaData*
Arena::CreateMaybeMessage< ::SmartBodyBinary::Motion_MetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::Motion_MetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::Motion*
Arena::CreateMaybeMessage< ::SmartBodyBinary::Motion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::Motion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
