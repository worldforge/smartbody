// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbutilities.proto

#include "sbutilities.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SmartBodyBinary {
PROTOBUF_CONSTEXPR StringToStringMap::StringToStringMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StringToStringMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringToStringMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringToStringMapDefaultTypeInternal() {}
  union {
    StringToStringMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringToStringMapDefaultTypeInternal _StringToStringMap_default_instance_;
PROTOBUF_CONSTEXPR StringToFloatVectorMap::StringToFloatVectorMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.to_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StringToFloatVectorMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringToFloatVectorMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringToFloatVectorMapDefaultTypeInternal() {}
  union {
    StringToFloatVectorMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringToFloatVectorMapDefaultTypeInternal _StringToFloatVectorMap_default_instance_;
PROTOBUF_CONSTEXPR StringToIntVectorMap::StringToIntVectorMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.to_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StringToIntVectorMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringToIntVectorMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringToIntVectorMapDefaultTypeInternal() {}
  union {
    StringToIntVectorMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringToIntVectorMapDefaultTypeInternal _StringToIntVectorMap_default_instance_;
PROTOBUF_CONSTEXPR StringToStringVectorMap::StringToStringVectorMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.to_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StringToStringVectorMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringToStringVectorMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringToStringVectorMapDefaultTypeInternal() {}
  union {
    StringToStringVectorMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringToStringVectorMapDefaultTypeInternal _StringToStringVectorMap_default_instance_;
}  // namespace SmartBodyBinary
static ::_pb::Metadata file_level_metadata_sbutilities_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sbutilities_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sbutilities_2eproto = nullptr;

const uint32_t TableStruct_sbutilities_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, _impl_.to_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, _impl_.to_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, _impl_.to_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, _impl_.to_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::SmartBodyBinary::StringToStringMap)},
  { 10, 18, -1, sizeof(::SmartBodyBinary::StringToFloatVectorMap)},
  { 20, 28, -1, sizeof(::SmartBodyBinary::StringToIntVectorMap)},
  { 30, 38, -1, sizeof(::SmartBodyBinary::StringToStringVectorMap)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SmartBodyBinary::_StringToStringMap_default_instance_._instance,
  &::SmartBodyBinary::_StringToFloatVectorMap_default_instance_._instance,
  &::SmartBodyBinary::_StringToIntVectorMap_default_instance_._instance,
  &::SmartBodyBinary::_StringToStringVectorMap_default_instance_._instance,
};

const char descriptor_table_protodef_sbutilities_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sbutilities.proto\022\017SmartBodyBinary\"-\n\021"
  "StringToStringMap\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 "
  "\002(\t\"2\n\026StringToFloatVectorMap\022\014\n\004from\030\001 "
  "\002(\t\022\n\n\002to\030\002 \003(\002\"0\n\024StringToIntVectorMap\022"
  "\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \003(\005\"3\n\027StringToStr"
  "ingVectorMap\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \003(\t"
  ;
static ::_pbi::once_flag descriptor_table_sbutilities_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sbutilities_2eproto = {
    false, false, 238, descriptor_table_protodef_sbutilities_2eproto,
    "sbutilities.proto",
    &descriptor_table_sbutilities_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_sbutilities_2eproto::offsets,
    file_level_metadata_sbutilities_2eproto, file_level_enum_descriptors_sbutilities_2eproto,
    file_level_service_descriptors_sbutilities_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sbutilities_2eproto_getter() {
  return &descriptor_table_sbutilities_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sbutilities_2eproto(&descriptor_table_sbutilities_2eproto);
namespace SmartBodyBinary {

// ===================================================================

class StringToStringMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToStringMap>()._impl_._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StringToStringMap::StringToStringMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.StringToStringMap)
}
StringToStringMap::StringToStringMap(const StringToStringMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringToStringMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_to()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToStringMap)
}

inline void StringToStringMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringToStringMap::~StringToStringMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToStringMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringToStringMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
}

void StringToStringMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringToStringMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToStringMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.to_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringToStringMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.StringToStringMap.from");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.StringToStringMap.to");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringToStringMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToStringMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // required string to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringMap.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToStringMap)
  return target;
}

size_t StringToStringMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.StringToStringMap)
  size_t total_size = 0;

  if (_internal_has_from()) {
    // required string from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  if (_internal_has_to()) {
    // required string to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  return total_size;
}
size_t StringToStringMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToStringMap)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());

    // required string to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringToStringMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringToStringMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringToStringMap::GetClassData() const { return &_class_data_; }


void StringToStringMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringToStringMap*>(&to_msg);
  auto& from = static_cast<const StringToStringMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToStringMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_from(from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_to(from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringToStringMap::CopyFrom(const StringToStringMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToStringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToStringMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StringToStringMap::InternalSwap(StringToStringMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToStringMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbutilities_2eproto_getter, &descriptor_table_sbutilities_2eproto_once,
      file_level_metadata_sbutilities_2eproto[0]);
}

// ===================================================================

class StringToFloatVectorMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToFloatVectorMap>()._impl_._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StringToFloatVectorMap::StringToFloatVectorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.StringToFloatVectorMap)
}
StringToFloatVectorMap::StringToFloatVectorMap(const StringToFloatVectorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringToFloatVectorMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){from._impl_.to_}
    , decltype(_impl_.from_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToFloatVectorMap)
}

inline void StringToFloatVectorMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){arena}
    , decltype(_impl_.from_){}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringToFloatVectorMap::~StringToFloatVectorMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToFloatVectorMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringToFloatVectorMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.~RepeatedField();
  _impl_.from_.Destroy();
}

void StringToFloatVectorMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringToFloatVectorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToFloatVectorMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.from_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringToFloatVectorMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.StringToFloatVectorMap.from");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated float to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_to(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_to(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringToFloatVectorMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToFloatVectorMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToFloatVectorMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated float to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_to(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToFloatVectorMap)
  return target;
}

size_t StringToFloatVectorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToFloatVectorMap)
  size_t total_size = 0;

  // required string from = 1;
  if (_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float to = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_to_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_to_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringToFloatVectorMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringToFloatVectorMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringToFloatVectorMap::GetClassData() const { return &_class_data_; }


void StringToFloatVectorMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringToFloatVectorMap*>(&to_msg);
  auto& from = static_cast<const StringToFloatVectorMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToFloatVectorMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.to_.MergeFrom(from._impl_.to_);
  if (from._internal_has_from()) {
    _this->_internal_set_from(from._internal_from());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringToFloatVectorMap::CopyFrom(const StringToFloatVectorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToFloatVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToFloatVectorMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StringToFloatVectorMap::InternalSwap(StringToFloatVectorMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.to_.InternalSwap(&other->_impl_.to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToFloatVectorMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbutilities_2eproto_getter, &descriptor_table_sbutilities_2eproto_once,
      file_level_metadata_sbutilities_2eproto[1]);
}

// ===================================================================

class StringToIntVectorMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToIntVectorMap>()._impl_._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StringToIntVectorMap::StringToIntVectorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.StringToIntVectorMap)
}
StringToIntVectorMap::StringToIntVectorMap(const StringToIntVectorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringToIntVectorMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){from._impl_.to_}
    , decltype(_impl_.from_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToIntVectorMap)
}

inline void StringToIntVectorMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){arena}
    , decltype(_impl_.from_){}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringToIntVectorMap::~StringToIntVectorMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToIntVectorMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringToIntVectorMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.~RepeatedField();
  _impl_.from_.Destroy();
}

void StringToIntVectorMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringToIntVectorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToIntVectorMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.from_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringToIntVectorMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.StringToIntVectorMap.from");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_to(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_to(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringToIntVectorMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToIntVectorMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToIntVectorMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated int32 to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToIntVectorMap)
  return target;
}

size_t StringToIntVectorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToIntVectorMap)
  size_t total_size = 0;

  // required string from = 1;
  if (_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 to = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.to_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_to_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringToIntVectorMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringToIntVectorMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringToIntVectorMap::GetClassData() const { return &_class_data_; }


void StringToIntVectorMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringToIntVectorMap*>(&to_msg);
  auto& from = static_cast<const StringToIntVectorMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToIntVectorMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.to_.MergeFrom(from._impl_.to_);
  if (from._internal_has_from()) {
    _this->_internal_set_from(from._internal_from());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringToIntVectorMap::CopyFrom(const StringToIntVectorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToIntVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToIntVectorMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StringToIntVectorMap::InternalSwap(StringToIntVectorMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.to_.InternalSwap(&other->_impl_.to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToIntVectorMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbutilities_2eproto_getter, &descriptor_table_sbutilities_2eproto_once,
      file_level_metadata_sbutilities_2eproto[2]);
}

// ===================================================================

class StringToStringVectorMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToStringVectorMap>()._impl_._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StringToStringVectorMap::StringToStringVectorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.StringToStringVectorMap)
}
StringToStringVectorMap::StringToStringVectorMap(const StringToStringVectorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringToStringVectorMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){from._impl_.to_}
    , decltype(_impl_.from_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToStringVectorMap)
}

inline void StringToStringVectorMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_){arena}
    , decltype(_impl_.from_){}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringToStringVectorMap::~StringToStringVectorMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToStringVectorMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringToStringVectorMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.~RepeatedPtrField();
  _impl_.from_.Destroy();
}

void StringToStringVectorMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringToStringVectorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToStringVectorMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.from_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringToStringVectorMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.StringToStringVectorMap.from");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SmartBodyBinary.StringToStringVectorMap.to");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringToStringVectorMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToStringVectorMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringVectorMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated string to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringVectorMap.to");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToStringVectorMap)
  return target;
}

size_t StringToStringVectorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToStringVectorMap)
  size_t total_size = 0;

  // required string from = 1;
  if (_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.to_.size());
  for (int i = 0, n = _impl_.to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.to_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringToStringVectorMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringToStringVectorMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringToStringVectorMap::GetClassData() const { return &_class_data_; }


void StringToStringVectorMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringToStringVectorMap*>(&to_msg);
  auto& from = static_cast<const StringToStringVectorMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToStringVectorMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.to_.MergeFrom(from._impl_.to_);
  if (from._internal_has_from()) {
    _this->_internal_set_from(from._internal_from());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringToStringVectorMap::CopyFrom(const StringToStringVectorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToStringVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToStringVectorMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StringToStringVectorMap::InternalSwap(StringToStringVectorMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.to_.InternalSwap(&other->_impl_.to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToStringVectorMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbutilities_2eproto_getter, &descriptor_table_sbutilities_2eproto_once,
      file_level_metadata_sbutilities_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToStringMap*
Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToStringMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::StringToStringMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToFloatVectorMap*
Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToFloatVectorMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::StringToFloatVectorMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToIntVectorMap*
Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToIntVectorMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::StringToIntVectorMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToStringVectorMap*
Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToStringVectorMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::StringToStringVectorMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
