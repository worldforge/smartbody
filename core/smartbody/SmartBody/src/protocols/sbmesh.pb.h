// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmesh.proto

#ifndef PROTOBUF_sbmesh_2eproto__INCLUDED
#define PROTOBUF_sbmesh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "sbutilities.pb.h"
// @@protoc_insertion_point(includes)

namespace SmartBodyBinary {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sbmesh_2eproto();
void protobuf_AssignDesc_sbmesh_2eproto();
void protobuf_ShutdownFile_sbmesh_2eproto();

class Material;
class MeshModel;
class SkinWeight;
class StaticMesh;
class DeformableMesh;

// ===================================================================

class Material : public ::google::protobuf::Message {
 public:
  Material();
  virtual ~Material();

  Material(const Material& from);

  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Material& default_instance();

  void Swap(Material* other);

  // implements Message ----------------------------------------------

  Material* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Material& from);
  void MergeFrom(const Material& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ambient = 1;
  inline int ambient_size() const;
  inline void clear_ambient();
  static const int kAmbientFieldNumber = 1;
  inline ::google::protobuf::int32 ambient(int index) const;
  inline void set_ambient(int index, ::google::protobuf::int32 value);
  inline void add_ambient(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ambient() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ambient();

  // repeated int32 diffuse = 2;
  inline int diffuse_size() const;
  inline void clear_diffuse();
  static const int kDiffuseFieldNumber = 2;
  inline ::google::protobuf::int32 diffuse(int index) const;
  inline void set_diffuse(int index, ::google::protobuf::int32 value);
  inline void add_diffuse(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      diffuse() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_diffuse();

  // repeated int32 specular = 3;
  inline int specular_size() const;
  inline void clear_specular();
  static const int kSpecularFieldNumber = 3;
  inline ::google::protobuf::int32 specular(int index) const;
  inline void set_specular(int index, ::google::protobuf::int32 value);
  inline void add_specular(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      specular() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_specular();

  // repeated int32 emission = 4;
  inline int emission_size() const;
  inline void clear_emission();
  static const int kEmissionFieldNumber = 4;
  inline ::google::protobuf::int32 emission(int index) const;
  inline void set_emission(int index, ::google::protobuf::int32 value);
  inline void add_emission(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      emission() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_emission();

  // required int32 shininess = 5;
  inline bool has_shininess() const;
  inline void clear_shininess();
  static const int kShininessFieldNumber = 5;
  inline ::google::protobuf::int32 shininess() const;
  inline void set_shininess(::google::protobuf::int32 value);

  // required float transparency = 6;
  inline bool has_transparency() const;
  inline void clear_transparency();
  static const int kTransparencyFieldNumber = 6;
  inline float transparency() const;
  inline void set_transparency(float value);

  // required bool useAlphaBlend = 7;
  inline bool has_usealphablend() const;
  inline void clear_usealphablend();
  static const int kUseAlphaBlendFieldNumber = 7;
  inline bool usealphablend() const;
  inline void set_usealphablend(bool value);

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.Material)
 private:
  inline void set_has_shininess();
  inline void clear_has_shininess();
  inline void set_has_transparency();
  inline void clear_has_transparency();
  inline void set_has_usealphablend();
  inline void clear_has_usealphablend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ambient_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > diffuse_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > specular_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > emission_;
  ::google::protobuf::int32 shininess_;
  float transparency_;
  bool usealphablend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_sbmesh_2eproto();
  friend void protobuf_AssignDesc_sbmesh_2eproto();
  friend void protobuf_ShutdownFile_sbmesh_2eproto();

  void InitAsDefaultInstance();
  static Material* default_instance_;
};
// -------------------------------------------------------------------

class MeshModel : public ::google::protobuf::Message {
 public:
  MeshModel();
  virtual ~MeshModel();

  MeshModel(const MeshModel& from);

  inline MeshModel& operator=(const MeshModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeshModel& default_instance();

  void Swap(MeshModel* other);

  // implements Message ----------------------------------------------

  MeshModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeshModel& from);
  void MergeFrom(const MeshModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string meshName = 1;
  inline bool has_meshname() const;
  inline void clear_meshname();
  static const int kMeshNameFieldNumber = 1;
  inline const ::std::string& meshname() const;
  inline void set_meshname(const ::std::string& value);
  inline void set_meshname(const char* value);
  inline void set_meshname(const char* value, size_t size);
  inline ::std::string* mutable_meshname();
  inline ::std::string* release_meshname();
  inline void set_allocated_meshname(::std::string* meshname);

  // repeated .SmartBodyBinary.Material materials = 2;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 2;
  inline const ::SmartBodyBinary::Material& materials(int index) const;
  inline ::SmartBodyBinary::Material* mutable_materials(int index);
  inline ::SmartBodyBinary::Material* add_materials();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Material >&
      materials() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Material >*
      mutable_materials();

  // repeated float vertexCoordinates = 3;
  inline int vertexcoordinates_size() const;
  inline void clear_vertexcoordinates();
  static const int kVertexCoordinatesFieldNumber = 3;
  inline float vertexcoordinates(int index) const;
  inline void set_vertexcoordinates(int index, float value);
  inline void add_vertexcoordinates(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      vertexcoordinates() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_vertexcoordinates();

  // repeated float normals = 4;
  inline int normals_size() const;
  inline void clear_normals();
  static const int kNormalsFieldNumber = 4;
  inline float normals(int index) const;
  inline void set_normals(int index, float value);
  inline void add_normals(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      normals() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_normals();

  // repeated float tangents = 5;
  inline int tangents_size() const;
  inline void clear_tangents();
  static const int kTangentsFieldNumber = 5;
  inline float tangents(int index) const;
  inline void set_tangents(int index, float value);
  inline void add_tangents(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      tangents() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_tangents();

  // repeated float binormals = 6;
  inline int binormals_size() const;
  inline void clear_binormals();
  static const int kBinormalsFieldNumber = 6;
  inline float binormals(int index) const;
  inline void set_binormals(int index, float value);
  inline void add_binormals(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      binormals() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_binormals();

  // repeated float textureCoordinates = 7;
  inline int texturecoordinates_size() const;
  inline void clear_texturecoordinates();
  static const int kTextureCoordinatesFieldNumber = 7;
  inline float texturecoordinates(int index) const;
  inline void set_texturecoordinates(int index, float value);
  inline void add_texturecoordinates(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      texturecoordinates() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_texturecoordinates();

  // repeated int32 triangleFaceIndices = 8;
  inline int trianglefaceindices_size() const;
  inline void clear_trianglefaceindices();
  static const int kTriangleFaceIndicesFieldNumber = 8;
  inline ::google::protobuf::int32 trianglefaceindices(int index) const;
  inline void set_trianglefaceindices(int index, ::google::protobuf::int32 value);
  inline void add_trianglefaceindices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trianglefaceindices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trianglefaceindices();

  // repeated int32 materialIndices = 9;
  inline int materialindices_size() const;
  inline void clear_materialindices();
  static const int kMaterialIndicesFieldNumber = 9;
  inline ::google::protobuf::int32 materialindices(int index) const;
  inline void set_materialindices(int index, ::google::protobuf::int32 value);
  inline void add_materialindices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      materialindices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_materialindices();

  // repeated int32 normalIndices = 10;
  inline int normalindices_size() const;
  inline void clear_normalindices();
  static const int kNormalIndicesFieldNumber = 10;
  inline ::google::protobuf::int32 normalindices(int index) const;
  inline void set_normalindices(int index, ::google::protobuf::int32 value);
  inline void add_normalindices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      normalindices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_normalindices();

  // repeated int32 textureCoordinatesIndices = 11;
  inline int texturecoordinatesindices_size() const;
  inline void clear_texturecoordinatesindices();
  static const int kTextureCoordinatesIndicesFieldNumber = 11;
  inline ::google::protobuf::int32 texturecoordinatesindices(int index) const;
  inline void set_texturecoordinatesindices(int index, ::google::protobuf::int32 value);
  inline void add_texturecoordinatesindices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      texturecoordinatesindices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_texturecoordinatesindices();

  // required bool culling = 12;
  inline bool has_culling() const;
  inline void clear_culling();
  static const int kCullingFieldNumber = 12;
  inline bool culling() const;
  inline void set_culling(bool value);

  // repeated string materialNames = 13;
  inline int materialnames_size() const;
  inline void clear_materialnames();
  static const int kMaterialNamesFieldNumber = 13;
  inline const ::std::string& materialnames(int index) const;
  inline ::std::string* mutable_materialnames(int index);
  inline void set_materialnames(int index, const ::std::string& value);
  inline void set_materialnames(int index, const char* value);
  inline void set_materialnames(int index, const char* value, size_t size);
  inline ::std::string* add_materialnames();
  inline void add_materialnames(const ::std::string& value);
  inline void add_materialnames(const char* value);
  inline void add_materialnames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& materialnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_materialnames();

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  inline int materialtodiffusetexturemapping_size() const;
  inline void clear_materialtodiffusetexturemapping();
  static const int kMaterialToDiffuseTextureMappingFieldNumber = 14;
  inline const ::SmartBodyBinary::StringToStringMap& materialtodiffusetexturemapping(int index) const;
  inline ::SmartBodyBinary::StringToStringMap* mutable_materialtodiffusetexturemapping(int index);
  inline ::SmartBodyBinary::StringToStringMap* add_materialtodiffusetexturemapping();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtodiffusetexturemapping() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtodiffusetexturemapping();

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  inline int materialtonormaltexturemapping_size() const;
  inline void clear_materialtonormaltexturemapping();
  static const int kMaterialToNormalTextureMappingFieldNumber = 15;
  inline const ::SmartBodyBinary::StringToStringMap& materialtonormaltexturemapping(int index) const;
  inline ::SmartBodyBinary::StringToStringMap* mutable_materialtonormaltexturemapping(int index);
  inline ::SmartBodyBinary::StringToStringMap* add_materialtonormaltexturemapping();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtonormaltexturemapping() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtonormaltexturemapping();

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  inline int materialtospeculartexturemapping_size() const;
  inline void clear_materialtospeculartexturemapping();
  static const int kMaterialToSpecularTextureMappingFieldNumber = 16;
  inline const ::SmartBodyBinary::StringToStringMap& materialtospeculartexturemapping(int index) const;
  inline ::SmartBodyBinary::StringToStringMap* mutable_materialtospeculartexturemapping(int index);
  inline ::SmartBodyBinary::StringToStringMap* add_materialtospeculartexturemapping();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtospeculartexturemapping() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtospeculartexturemapping();

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  inline int materialtofaceindices_size() const;
  inline void clear_materialtofaceindices();
  static const int kMaterialToFaceIndicesFieldNumber = 17;
  inline const ::SmartBodyBinary::StringToIntVectorMap& materialtofaceindices(int index) const;
  inline ::SmartBodyBinary::StringToIntVectorMap* mutable_materialtofaceindices(int index);
  inline ::SmartBodyBinary::StringToIntVectorMap* add_materialtofaceindices();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >&
      materialtofaceindices() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >*
      mutable_materialtofaceindices();

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  inline int materialtotransparenttexturemapping_size() const;
  inline void clear_materialtotransparenttexturemapping();
  static const int kMaterialToTransparentTextureMappingFieldNumber = 18;
  inline const ::SmartBodyBinary::StringToStringMap& materialtotransparenttexturemapping(int index) const;
  inline ::SmartBodyBinary::StringToStringMap* mutable_materialtotransparenttexturemapping(int index);
  inline ::SmartBodyBinary::StringToStringMap* add_materialtotransparenttexturemapping();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtotransparenttexturemapping() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtotransparenttexturemapping();

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  inline int materialtoglossytexturemapping_size() const;
  inline void clear_materialtoglossytexturemapping();
  static const int kMaterialToGlossyTextureMappingFieldNumber = 19;
  inline const ::SmartBodyBinary::StringToStringMap& materialtoglossytexturemapping(int index) const;
  inline ::SmartBodyBinary::StringToStringMap* mutable_materialtoglossytexturemapping(int index);
  inline ::SmartBodyBinary::StringToStringMap* add_materialtoglossytexturemapping();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtoglossytexturemapping() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtoglossytexturemapping();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.MeshModel)
 private:
  inline void set_has_meshname();
  inline void clear_has_meshname();
  inline void set_has_culling();
  inline void clear_has_culling();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* meshname_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Material > materials_;
  ::google::protobuf::RepeatedField< float > vertexcoordinates_;
  ::google::protobuf::RepeatedField< float > normals_;
  ::google::protobuf::RepeatedField< float > tangents_;
  ::google::protobuf::RepeatedField< float > binormals_;
  ::google::protobuf::RepeatedField< float > texturecoordinates_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trianglefaceindices_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > materialindices_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > normalindices_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > texturecoordinatesindices_;
  ::google::protobuf::RepeatedPtrField< ::std::string> materialnames_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtodiffusetexturemapping_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtonormaltexturemapping_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtospeculartexturemapping_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap > materialtofaceindices_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtotransparenttexturemapping_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtoglossytexturemapping_;
  bool culling_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_sbmesh_2eproto();
  friend void protobuf_AssignDesc_sbmesh_2eproto();
  friend void protobuf_ShutdownFile_sbmesh_2eproto();

  void InitAsDefaultInstance();
  static MeshModel* default_instance_;
};
// -------------------------------------------------------------------

class SkinWeight : public ::google::protobuf::Message {
 public:
  SkinWeight();
  virtual ~SkinWeight();

  SkinWeight(const SkinWeight& from);

  inline SkinWeight& operator=(const SkinWeight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkinWeight& default_instance();

  void Swap(SkinWeight* other);

  // implements Message ----------------------------------------------

  SkinWeight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkinWeight& from);
  void MergeFrom(const SkinWeight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sourceMeshName = 1;
  inline bool has_sourcemeshname() const;
  inline void clear_sourcemeshname();
  static const int kSourceMeshNameFieldNumber = 1;
  inline const ::std::string& sourcemeshname() const;
  inline void set_sourcemeshname(const ::std::string& value);
  inline void set_sourcemeshname(const char* value);
  inline void set_sourcemeshname(const char* value, size_t size);
  inline ::std::string* mutable_sourcemeshname();
  inline ::std::string* release_sourcemeshname();
  inline void set_allocated_sourcemeshname(::std::string* sourcemeshname);

  // repeated string influenceJointNames = 2;
  inline int influencejointnames_size() const;
  inline void clear_influencejointnames();
  static const int kInfluenceJointNamesFieldNumber = 2;
  inline const ::std::string& influencejointnames(int index) const;
  inline ::std::string* mutable_influencejointnames(int index);
  inline void set_influencejointnames(int index, const ::std::string& value);
  inline void set_influencejointnames(int index, const char* value);
  inline void set_influencejointnames(int index, const char* value, size_t size);
  inline ::std::string* add_influencejointnames();
  inline void add_influencejointnames(const ::std::string& value);
  inline void add_influencejointnames(const char* value);
  inline void add_influencejointnames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& influencejointnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_influencejointnames();

  // repeated float bindWeights = 3;
  inline int bindweights_size() const;
  inline void clear_bindweights();
  static const int kBindWeightsFieldNumber = 3;
  inline float bindweights(int index) const;
  inline void set_bindweights(int index, float value);
  inline void add_bindweights(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bindweights() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bindweights();

  // repeated float bindPoseMatrice = 4;
  inline int bindposematrice_size() const;
  inline void clear_bindposematrice();
  static const int kBindPoseMatriceFieldNumber = 4;
  inline float bindposematrice(int index) const;
  inline void set_bindposematrice(int index, float value);
  inline void add_bindposematrice(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bindposematrice() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bindposematrice();

  // repeated float bindShapeMatrix = 5;
  inline int bindshapematrix_size() const;
  inline void clear_bindshapematrix();
  static const int kBindShapeMatrixFieldNumber = 5;
  inline float bindshapematrix(int index) const;
  inline void set_bindshapematrix(int index, float value);
  inline void add_bindshapematrix(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bindshapematrix() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bindshapematrix();

  // repeated int32 numberOfInfluenceJoints = 6;
  inline int numberofinfluencejoints_size() const;
  inline void clear_numberofinfluencejoints();
  static const int kNumberOfInfluenceJointsFieldNumber = 6;
  inline ::google::protobuf::int32 numberofinfluencejoints(int index) const;
  inline void set_numberofinfluencejoints(int index, ::google::protobuf::int32 value);
  inline void add_numberofinfluencejoints(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      numberofinfluencejoints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_numberofinfluencejoints();

  // repeated int32 weightIndices = 7;
  inline int weightindices_size() const;
  inline void clear_weightindices();
  static const int kWeightIndicesFieldNumber = 7;
  inline ::google::protobuf::int32 weightindices(int index) const;
  inline void set_weightindices(int index, ::google::protobuf::int32 value);
  inline void add_weightindices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      weightindices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_weightindices();

  // repeated int32 jointNameIndices = 8;
  inline int jointnameindices_size() const;
  inline void clear_jointnameindices();
  static const int kJointNameIndicesFieldNumber = 8;
  inline ::google::protobuf::int32 jointnameindices(int index) const;
  inline void set_jointnameindices(int index, ::google::protobuf::int32 value);
  inline void add_jointnameindices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jointnameindices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jointnameindices();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.SkinWeight)
 private:
  inline void set_has_sourcemeshname();
  inline void clear_has_sourcemeshname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sourcemeshname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> influencejointnames_;
  ::google::protobuf::RepeatedField< float > bindweights_;
  ::google::protobuf::RepeatedField< float > bindposematrice_;
  ::google::protobuf::RepeatedField< float > bindshapematrix_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > numberofinfluencejoints_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > weightindices_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jointnameindices_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_sbmesh_2eproto();
  friend void protobuf_AssignDesc_sbmesh_2eproto();
  friend void protobuf_ShutdownFile_sbmesh_2eproto();

  void InitAsDefaultInstance();
  static SkinWeight* default_instance_;
};
// -------------------------------------------------------------------

class StaticMesh : public ::google::protobuf::Message {
 public:
  StaticMesh();
  virtual ~StaticMesh();

  StaticMesh(const StaticMesh& from);

  inline StaticMesh& operator=(const StaticMesh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticMesh& default_instance();

  void Swap(StaticMesh* other);

  // implements Message ----------------------------------------------

  StaticMesh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StaticMesh& from);
  void MergeFrom(const StaticMesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string staticMeshName = 1;
  inline bool has_staticmeshname() const;
  inline void clear_staticmeshname();
  static const int kStaticMeshNameFieldNumber = 1;
  inline const ::std::string& staticmeshname() const;
  inline void set_staticmeshname(const ::std::string& value);
  inline void set_staticmeshname(const char* value);
  inline void set_staticmeshname(const char* value, size_t size);
  inline ::std::string* mutable_staticmeshname();
  inline ::std::string* release_staticmeshname();
  inline void set_allocated_staticmeshname(::std::string* staticmeshname);

  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  inline int meshmodels_size() const;
  inline void clear_meshmodels();
  static const int kMeshModelsFieldNumber = 2;
  inline const ::SmartBodyBinary::MeshModel& meshmodels(int index) const;
  inline ::SmartBodyBinary::MeshModel* mutable_meshmodels(int index);
  inline ::SmartBodyBinary::MeshModel* add_meshmodels();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::MeshModel >&
      meshmodels() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::MeshModel >*
      mutable_meshmodels();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StaticMesh)
 private:
  inline void set_has_staticmeshname();
  inline void clear_has_staticmeshname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* staticmeshname_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::MeshModel > meshmodels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sbmesh_2eproto();
  friend void protobuf_AssignDesc_sbmesh_2eproto();
  friend void protobuf_ShutdownFile_sbmesh_2eproto();

  void InitAsDefaultInstance();
  static StaticMesh* default_instance_;
};
// -------------------------------------------------------------------

class DeformableMesh : public ::google::protobuf::Message {
 public:
  DeformableMesh();
  virtual ~DeformableMesh();

  DeformableMesh(const DeformableMesh& from);

  inline DeformableMesh& operator=(const DeformableMesh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeformableMesh& default_instance();

  void Swap(DeformableMesh* other);

  // implements Message ----------------------------------------------

  DeformableMesh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeformableMesh& from);
  void MergeFrom(const DeformableMesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string deformableMeshName = 1;
  inline bool has_deformablemeshname() const;
  inline void clear_deformablemeshname();
  static const int kDeformableMeshNameFieldNumber = 1;
  inline const ::std::string& deformablemeshname() const;
  inline void set_deformablemeshname(const ::std::string& value);
  inline void set_deformablemeshname(const char* value);
  inline void set_deformablemeshname(const char* value, size_t size);
  inline ::std::string* mutable_deformablemeshname();
  inline ::std::string* release_deformablemeshname();
  inline void set_allocated_deformablemeshname(::std::string* deformablemeshname);

  // required .SmartBodyBinary.StaticMesh staticMesh = 2;
  inline bool has_staticmesh() const;
  inline void clear_staticmesh();
  static const int kStaticMeshFieldNumber = 2;
  inline const ::SmartBodyBinary::StaticMesh& staticmesh() const;
  inline ::SmartBodyBinary::StaticMesh* mutable_staticmesh();
  inline ::SmartBodyBinary::StaticMesh* release_staticmesh();
  inline void set_allocated_staticmesh(::SmartBodyBinary::StaticMesh* staticmesh);

  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  inline int skinweights_size() const;
  inline void clear_skinweights();
  static const int kSkinWeightsFieldNumber = 3;
  inline const ::SmartBodyBinary::SkinWeight& skinweights(int index) const;
  inline ::SmartBodyBinary::SkinWeight* mutable_skinweights(int index);
  inline ::SmartBodyBinary::SkinWeight* add_skinweights();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >&
      skinweights() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >*
      mutable_skinweights();

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  inline int morphtargets_size() const;
  inline void clear_morphtargets();
  static const int kMorphTargetsFieldNumber = 4;
  inline const ::SmartBodyBinary::StringToStringVectorMap& morphtargets(int index) const;
  inline ::SmartBodyBinary::StringToStringVectorMap* mutable_morphtargets(int index);
  inline ::SmartBodyBinary::StringToStringVectorMap* add_morphtargets();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >&
      morphtargets() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >*
      mutable_morphtargets();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.DeformableMesh)
 private:
  inline void set_has_deformablemeshname();
  inline void clear_has_deformablemeshname();
  inline void set_has_staticmesh();
  inline void clear_has_staticmesh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* deformablemeshname_;
  ::SmartBodyBinary::StaticMesh* staticmesh_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::SkinWeight > skinweights_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap > morphtargets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_sbmesh_2eproto();
  friend void protobuf_AssignDesc_sbmesh_2eproto();
  friend void protobuf_ShutdownFile_sbmesh_2eproto();

  void InitAsDefaultInstance();
  static DeformableMesh* default_instance_;
};
// ===================================================================


// ===================================================================

// Material

// repeated int32 ambient = 1;
inline int Material::ambient_size() const {
  return ambient_.size();
}
inline void Material::clear_ambient() {
  ambient_.Clear();
}
inline ::google::protobuf::int32 Material::ambient(int index) const {
  return ambient_.Get(index);
}
inline void Material::set_ambient(int index, ::google::protobuf::int32 value) {
  ambient_.Set(index, value);
}
inline void Material::add_ambient(::google::protobuf::int32 value) {
  ambient_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Material::ambient() const {
  return ambient_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Material::mutable_ambient() {
  return &ambient_;
}

// repeated int32 diffuse = 2;
inline int Material::diffuse_size() const {
  return diffuse_.size();
}
inline void Material::clear_diffuse() {
  diffuse_.Clear();
}
inline ::google::protobuf::int32 Material::diffuse(int index) const {
  return diffuse_.Get(index);
}
inline void Material::set_diffuse(int index, ::google::protobuf::int32 value) {
  diffuse_.Set(index, value);
}
inline void Material::add_diffuse(::google::protobuf::int32 value) {
  diffuse_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Material::diffuse() const {
  return diffuse_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Material::mutable_diffuse() {
  return &diffuse_;
}

// repeated int32 specular = 3;
inline int Material::specular_size() const {
  return specular_.size();
}
inline void Material::clear_specular() {
  specular_.Clear();
}
inline ::google::protobuf::int32 Material::specular(int index) const {
  return specular_.Get(index);
}
inline void Material::set_specular(int index, ::google::protobuf::int32 value) {
  specular_.Set(index, value);
}
inline void Material::add_specular(::google::protobuf::int32 value) {
  specular_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Material::specular() const {
  return specular_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Material::mutable_specular() {
  return &specular_;
}

// repeated int32 emission = 4;
inline int Material::emission_size() const {
  return emission_.size();
}
inline void Material::clear_emission() {
  emission_.Clear();
}
inline ::google::protobuf::int32 Material::emission(int index) const {
  return emission_.Get(index);
}
inline void Material::set_emission(int index, ::google::protobuf::int32 value) {
  emission_.Set(index, value);
}
inline void Material::add_emission(::google::protobuf::int32 value) {
  emission_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Material::emission() const {
  return emission_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Material::mutable_emission() {
  return &emission_;
}

// required int32 shininess = 5;
inline bool Material::has_shininess() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Material::set_has_shininess() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Material::clear_has_shininess() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Material::clear_shininess() {
  shininess_ = 0;
  clear_has_shininess();
}
inline ::google::protobuf::int32 Material::shininess() const {
  return shininess_;
}
inline void Material::set_shininess(::google::protobuf::int32 value) {
  set_has_shininess();
  shininess_ = value;
}

// required float transparency = 6;
inline bool Material::has_transparency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Material::set_has_transparency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Material::clear_has_transparency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Material::clear_transparency() {
  transparency_ = 0;
  clear_has_transparency();
}
inline float Material::transparency() const {
  return transparency_;
}
inline void Material::set_transparency(float value) {
  set_has_transparency();
  transparency_ = value;
}

// required bool useAlphaBlend = 7;
inline bool Material::has_usealphablend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Material::set_has_usealphablend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Material::clear_has_usealphablend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Material::clear_usealphablend() {
  usealphablend_ = false;
  clear_has_usealphablend();
}
inline bool Material::usealphablend() const {
  return usealphablend_;
}
inline void Material::set_usealphablend(bool value) {
  set_has_usealphablend();
  usealphablend_ = value;
}

// -------------------------------------------------------------------

// MeshModel

// required string meshName = 1;
inline bool MeshModel::has_meshname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeshModel::set_has_meshname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeshModel::clear_has_meshname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeshModel::clear_meshname() {
  if (meshname_ != &::google::protobuf::internal::kEmptyString) {
    meshname_->clear();
  }
  clear_has_meshname();
}
inline const ::std::string& MeshModel::meshname() const {
  return *meshname_;
}
inline void MeshModel::set_meshname(const ::std::string& value) {
  set_has_meshname();
  if (meshname_ == &::google::protobuf::internal::kEmptyString) {
    meshname_ = new ::std::string;
  }
  meshname_->assign(value);
}
inline void MeshModel::set_meshname(const char* value) {
  set_has_meshname();
  if (meshname_ == &::google::protobuf::internal::kEmptyString) {
    meshname_ = new ::std::string;
  }
  meshname_->assign(value);
}
inline void MeshModel::set_meshname(const char* value, size_t size) {
  set_has_meshname();
  if (meshname_ == &::google::protobuf::internal::kEmptyString) {
    meshname_ = new ::std::string;
  }
  meshname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MeshModel::mutable_meshname() {
  set_has_meshname();
  if (meshname_ == &::google::protobuf::internal::kEmptyString) {
    meshname_ = new ::std::string;
  }
  return meshname_;
}
inline ::std::string* MeshModel::release_meshname() {
  clear_has_meshname();
  if (meshname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meshname_;
    meshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MeshModel::set_allocated_meshname(::std::string* meshname) {
  if (meshname_ != &::google::protobuf::internal::kEmptyString) {
    delete meshname_;
  }
  if (meshname) {
    set_has_meshname();
    meshname_ = meshname;
  } else {
    clear_has_meshname();
    meshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SmartBodyBinary.Material materials = 2;
inline int MeshModel::materials_size() const {
  return materials_.size();
}
inline void MeshModel::clear_materials() {
  materials_.Clear();
}
inline const ::SmartBodyBinary::Material& MeshModel::materials(int index) const {
  return materials_.Get(index);
}
inline ::SmartBodyBinary::Material* MeshModel::mutable_materials(int index) {
  return materials_.Mutable(index);
}
inline ::SmartBodyBinary::Material* MeshModel::add_materials() {
  return materials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Material >&
MeshModel::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Material >*
MeshModel::mutable_materials() {
  return &materials_;
}

// repeated float vertexCoordinates = 3;
inline int MeshModel::vertexcoordinates_size() const {
  return vertexcoordinates_.size();
}
inline void MeshModel::clear_vertexcoordinates() {
  vertexcoordinates_.Clear();
}
inline float MeshModel::vertexcoordinates(int index) const {
  return vertexcoordinates_.Get(index);
}
inline void MeshModel::set_vertexcoordinates(int index, float value) {
  vertexcoordinates_.Set(index, value);
}
inline void MeshModel::add_vertexcoordinates(float value) {
  vertexcoordinates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MeshModel::vertexcoordinates() const {
  return vertexcoordinates_;
}
inline ::google::protobuf::RepeatedField< float >*
MeshModel::mutable_vertexcoordinates() {
  return &vertexcoordinates_;
}

// repeated float normals = 4;
inline int MeshModel::normals_size() const {
  return normals_.size();
}
inline void MeshModel::clear_normals() {
  normals_.Clear();
}
inline float MeshModel::normals(int index) const {
  return normals_.Get(index);
}
inline void MeshModel::set_normals(int index, float value) {
  normals_.Set(index, value);
}
inline void MeshModel::add_normals(float value) {
  normals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MeshModel::normals() const {
  return normals_;
}
inline ::google::protobuf::RepeatedField< float >*
MeshModel::mutable_normals() {
  return &normals_;
}

// repeated float tangents = 5;
inline int MeshModel::tangents_size() const {
  return tangents_.size();
}
inline void MeshModel::clear_tangents() {
  tangents_.Clear();
}
inline float MeshModel::tangents(int index) const {
  return tangents_.Get(index);
}
inline void MeshModel::set_tangents(int index, float value) {
  tangents_.Set(index, value);
}
inline void MeshModel::add_tangents(float value) {
  tangents_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MeshModel::tangents() const {
  return tangents_;
}
inline ::google::protobuf::RepeatedField< float >*
MeshModel::mutable_tangents() {
  return &tangents_;
}

// repeated float binormals = 6;
inline int MeshModel::binormals_size() const {
  return binormals_.size();
}
inline void MeshModel::clear_binormals() {
  binormals_.Clear();
}
inline float MeshModel::binormals(int index) const {
  return binormals_.Get(index);
}
inline void MeshModel::set_binormals(int index, float value) {
  binormals_.Set(index, value);
}
inline void MeshModel::add_binormals(float value) {
  binormals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MeshModel::binormals() const {
  return binormals_;
}
inline ::google::protobuf::RepeatedField< float >*
MeshModel::mutable_binormals() {
  return &binormals_;
}

// repeated float textureCoordinates = 7;
inline int MeshModel::texturecoordinates_size() const {
  return texturecoordinates_.size();
}
inline void MeshModel::clear_texturecoordinates() {
  texturecoordinates_.Clear();
}
inline float MeshModel::texturecoordinates(int index) const {
  return texturecoordinates_.Get(index);
}
inline void MeshModel::set_texturecoordinates(int index, float value) {
  texturecoordinates_.Set(index, value);
}
inline void MeshModel::add_texturecoordinates(float value) {
  texturecoordinates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MeshModel::texturecoordinates() const {
  return texturecoordinates_;
}
inline ::google::protobuf::RepeatedField< float >*
MeshModel::mutable_texturecoordinates() {
  return &texturecoordinates_;
}

// repeated int32 triangleFaceIndices = 8;
inline int MeshModel::trianglefaceindices_size() const {
  return trianglefaceindices_.size();
}
inline void MeshModel::clear_trianglefaceindices() {
  trianglefaceindices_.Clear();
}
inline ::google::protobuf::int32 MeshModel::trianglefaceindices(int index) const {
  return trianglefaceindices_.Get(index);
}
inline void MeshModel::set_trianglefaceindices(int index, ::google::protobuf::int32 value) {
  trianglefaceindices_.Set(index, value);
}
inline void MeshModel::add_trianglefaceindices(::google::protobuf::int32 value) {
  trianglefaceindices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MeshModel::trianglefaceindices() const {
  return trianglefaceindices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MeshModel::mutable_trianglefaceindices() {
  return &trianglefaceindices_;
}

// repeated int32 materialIndices = 9;
inline int MeshModel::materialindices_size() const {
  return materialindices_.size();
}
inline void MeshModel::clear_materialindices() {
  materialindices_.Clear();
}
inline ::google::protobuf::int32 MeshModel::materialindices(int index) const {
  return materialindices_.Get(index);
}
inline void MeshModel::set_materialindices(int index, ::google::protobuf::int32 value) {
  materialindices_.Set(index, value);
}
inline void MeshModel::add_materialindices(::google::protobuf::int32 value) {
  materialindices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MeshModel::materialindices() const {
  return materialindices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MeshModel::mutable_materialindices() {
  return &materialindices_;
}

// repeated int32 normalIndices = 10;
inline int MeshModel::normalindices_size() const {
  return normalindices_.size();
}
inline void MeshModel::clear_normalindices() {
  normalindices_.Clear();
}
inline ::google::protobuf::int32 MeshModel::normalindices(int index) const {
  return normalindices_.Get(index);
}
inline void MeshModel::set_normalindices(int index, ::google::protobuf::int32 value) {
  normalindices_.Set(index, value);
}
inline void MeshModel::add_normalindices(::google::protobuf::int32 value) {
  normalindices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MeshModel::normalindices() const {
  return normalindices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MeshModel::mutable_normalindices() {
  return &normalindices_;
}

// repeated int32 textureCoordinatesIndices = 11;
inline int MeshModel::texturecoordinatesindices_size() const {
  return texturecoordinatesindices_.size();
}
inline void MeshModel::clear_texturecoordinatesindices() {
  texturecoordinatesindices_.Clear();
}
inline ::google::protobuf::int32 MeshModel::texturecoordinatesindices(int index) const {
  return texturecoordinatesindices_.Get(index);
}
inline void MeshModel::set_texturecoordinatesindices(int index, ::google::protobuf::int32 value) {
  texturecoordinatesindices_.Set(index, value);
}
inline void MeshModel::add_texturecoordinatesindices(::google::protobuf::int32 value) {
  texturecoordinatesindices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MeshModel::texturecoordinatesindices() const {
  return texturecoordinatesindices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MeshModel::mutable_texturecoordinatesindices() {
  return &texturecoordinatesindices_;
}

// required bool culling = 12;
inline bool MeshModel::has_culling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MeshModel::set_has_culling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MeshModel::clear_has_culling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MeshModel::clear_culling() {
  culling_ = false;
  clear_has_culling();
}
inline bool MeshModel::culling() const {
  return culling_;
}
inline void MeshModel::set_culling(bool value) {
  set_has_culling();
  culling_ = value;
}

// repeated string materialNames = 13;
inline int MeshModel::materialnames_size() const {
  return materialnames_.size();
}
inline void MeshModel::clear_materialnames() {
  materialnames_.Clear();
}
inline const ::std::string& MeshModel::materialnames(int index) const {
  return materialnames_.Get(index);
}
inline ::std::string* MeshModel::mutable_materialnames(int index) {
  return materialnames_.Mutable(index);
}
inline void MeshModel::set_materialnames(int index, const ::std::string& value) {
  materialnames_.Mutable(index)->assign(value);
}
inline void MeshModel::set_materialnames(int index, const char* value) {
  materialnames_.Mutable(index)->assign(value);
}
inline void MeshModel::set_materialnames(int index, const char* value, size_t size) {
  materialnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MeshModel::add_materialnames() {
  return materialnames_.Add();
}
inline void MeshModel::add_materialnames(const ::std::string& value) {
  materialnames_.Add()->assign(value);
}
inline void MeshModel::add_materialnames(const char* value) {
  materialnames_.Add()->assign(value);
}
inline void MeshModel::add_materialnames(const char* value, size_t size) {
  materialnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MeshModel::materialnames() const {
  return materialnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MeshModel::mutable_materialnames() {
  return &materialnames_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
inline int MeshModel::materialtodiffusetexturemapping_size() const {
  return materialtodiffusetexturemapping_.size();
}
inline void MeshModel::clear_materialtodiffusetexturemapping() {
  materialtodiffusetexturemapping_.Clear();
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtodiffusetexturemapping(int index) const {
  return materialtodiffusetexturemapping_.Get(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtodiffusetexturemapping(int index) {
  return materialtodiffusetexturemapping_.Mutable(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtodiffusetexturemapping() {
  return materialtodiffusetexturemapping_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtodiffusetexturemapping() const {
  return materialtodiffusetexturemapping_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtodiffusetexturemapping() {
  return &materialtodiffusetexturemapping_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
inline int MeshModel::materialtonormaltexturemapping_size() const {
  return materialtonormaltexturemapping_.size();
}
inline void MeshModel::clear_materialtonormaltexturemapping() {
  materialtonormaltexturemapping_.Clear();
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtonormaltexturemapping(int index) const {
  return materialtonormaltexturemapping_.Get(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtonormaltexturemapping(int index) {
  return materialtonormaltexturemapping_.Mutable(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtonormaltexturemapping() {
  return materialtonormaltexturemapping_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtonormaltexturemapping() const {
  return materialtonormaltexturemapping_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtonormaltexturemapping() {
  return &materialtonormaltexturemapping_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
inline int MeshModel::materialtospeculartexturemapping_size() const {
  return materialtospeculartexturemapping_.size();
}
inline void MeshModel::clear_materialtospeculartexturemapping() {
  materialtospeculartexturemapping_.Clear();
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtospeculartexturemapping(int index) const {
  return materialtospeculartexturemapping_.Get(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtospeculartexturemapping(int index) {
  return materialtospeculartexturemapping_.Mutable(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtospeculartexturemapping() {
  return materialtospeculartexturemapping_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtospeculartexturemapping() const {
  return materialtospeculartexturemapping_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtospeculartexturemapping() {
  return &materialtospeculartexturemapping_;
}

// repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
inline int MeshModel::materialtofaceindices_size() const {
  return materialtofaceindices_.size();
}
inline void MeshModel::clear_materialtofaceindices() {
  materialtofaceindices_.Clear();
}
inline const ::SmartBodyBinary::StringToIntVectorMap& MeshModel::materialtofaceindices(int index) const {
  return materialtofaceindices_.Get(index);
}
inline ::SmartBodyBinary::StringToIntVectorMap* MeshModel::mutable_materialtofaceindices(int index) {
  return materialtofaceindices_.Mutable(index);
}
inline ::SmartBodyBinary::StringToIntVectorMap* MeshModel::add_materialtofaceindices() {
  return materialtofaceindices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >&
MeshModel::materialtofaceindices() const {
  return materialtofaceindices_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >*
MeshModel::mutable_materialtofaceindices() {
  return &materialtofaceindices_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
inline int MeshModel::materialtotransparenttexturemapping_size() const {
  return materialtotransparenttexturemapping_.size();
}
inline void MeshModel::clear_materialtotransparenttexturemapping() {
  materialtotransparenttexturemapping_.Clear();
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtotransparenttexturemapping(int index) const {
  return materialtotransparenttexturemapping_.Get(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtotransparenttexturemapping(int index) {
  return materialtotransparenttexturemapping_.Mutable(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtotransparenttexturemapping() {
  return materialtotransparenttexturemapping_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtotransparenttexturemapping() const {
  return materialtotransparenttexturemapping_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtotransparenttexturemapping() {
  return &materialtotransparenttexturemapping_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
inline int MeshModel::materialtoglossytexturemapping_size() const {
  return materialtoglossytexturemapping_.size();
}
inline void MeshModel::clear_materialtoglossytexturemapping() {
  materialtoglossytexturemapping_.Clear();
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtoglossytexturemapping(int index) const {
  return materialtoglossytexturemapping_.Get(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtoglossytexturemapping(int index) {
  return materialtoglossytexturemapping_.Mutable(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtoglossytexturemapping() {
  return materialtoglossytexturemapping_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtoglossytexturemapping() const {
  return materialtoglossytexturemapping_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtoglossytexturemapping() {
  return &materialtoglossytexturemapping_;
}

// -------------------------------------------------------------------

// SkinWeight

// required string sourceMeshName = 1;
inline bool SkinWeight::has_sourcemeshname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkinWeight::set_has_sourcemeshname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkinWeight::clear_has_sourcemeshname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkinWeight::clear_sourcemeshname() {
  if (sourcemeshname_ != &::google::protobuf::internal::kEmptyString) {
    sourcemeshname_->clear();
  }
  clear_has_sourcemeshname();
}
inline const ::std::string& SkinWeight::sourcemeshname() const {
  return *sourcemeshname_;
}
inline void SkinWeight::set_sourcemeshname(const ::std::string& value) {
  set_has_sourcemeshname();
  if (sourcemeshname_ == &::google::protobuf::internal::kEmptyString) {
    sourcemeshname_ = new ::std::string;
  }
  sourcemeshname_->assign(value);
}
inline void SkinWeight::set_sourcemeshname(const char* value) {
  set_has_sourcemeshname();
  if (sourcemeshname_ == &::google::protobuf::internal::kEmptyString) {
    sourcemeshname_ = new ::std::string;
  }
  sourcemeshname_->assign(value);
}
inline void SkinWeight::set_sourcemeshname(const char* value, size_t size) {
  set_has_sourcemeshname();
  if (sourcemeshname_ == &::google::protobuf::internal::kEmptyString) {
    sourcemeshname_ = new ::std::string;
  }
  sourcemeshname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkinWeight::mutable_sourcemeshname() {
  set_has_sourcemeshname();
  if (sourcemeshname_ == &::google::protobuf::internal::kEmptyString) {
    sourcemeshname_ = new ::std::string;
  }
  return sourcemeshname_;
}
inline ::std::string* SkinWeight::release_sourcemeshname() {
  clear_has_sourcemeshname();
  if (sourcemeshname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcemeshname_;
    sourcemeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkinWeight::set_allocated_sourcemeshname(::std::string* sourcemeshname) {
  if (sourcemeshname_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcemeshname_;
  }
  if (sourcemeshname) {
    set_has_sourcemeshname();
    sourcemeshname_ = sourcemeshname;
  } else {
    clear_has_sourcemeshname();
    sourcemeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string influenceJointNames = 2;
inline int SkinWeight::influencejointnames_size() const {
  return influencejointnames_.size();
}
inline void SkinWeight::clear_influencejointnames() {
  influencejointnames_.Clear();
}
inline const ::std::string& SkinWeight::influencejointnames(int index) const {
  return influencejointnames_.Get(index);
}
inline ::std::string* SkinWeight::mutable_influencejointnames(int index) {
  return influencejointnames_.Mutable(index);
}
inline void SkinWeight::set_influencejointnames(int index, const ::std::string& value) {
  influencejointnames_.Mutable(index)->assign(value);
}
inline void SkinWeight::set_influencejointnames(int index, const char* value) {
  influencejointnames_.Mutable(index)->assign(value);
}
inline void SkinWeight::set_influencejointnames(int index, const char* value, size_t size) {
  influencejointnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkinWeight::add_influencejointnames() {
  return influencejointnames_.Add();
}
inline void SkinWeight::add_influencejointnames(const ::std::string& value) {
  influencejointnames_.Add()->assign(value);
}
inline void SkinWeight::add_influencejointnames(const char* value) {
  influencejointnames_.Add()->assign(value);
}
inline void SkinWeight::add_influencejointnames(const char* value, size_t size) {
  influencejointnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SkinWeight::influencejointnames() const {
  return influencejointnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SkinWeight::mutable_influencejointnames() {
  return &influencejointnames_;
}

// repeated float bindWeights = 3;
inline int SkinWeight::bindweights_size() const {
  return bindweights_.size();
}
inline void SkinWeight::clear_bindweights() {
  bindweights_.Clear();
}
inline float SkinWeight::bindweights(int index) const {
  return bindweights_.Get(index);
}
inline void SkinWeight::set_bindweights(int index, float value) {
  bindweights_.Set(index, value);
}
inline void SkinWeight::add_bindweights(float value) {
  bindweights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SkinWeight::bindweights() const {
  return bindweights_;
}
inline ::google::protobuf::RepeatedField< float >*
SkinWeight::mutable_bindweights() {
  return &bindweights_;
}

// repeated float bindPoseMatrice = 4;
inline int SkinWeight::bindposematrice_size() const {
  return bindposematrice_.size();
}
inline void SkinWeight::clear_bindposematrice() {
  bindposematrice_.Clear();
}
inline float SkinWeight::bindposematrice(int index) const {
  return bindposematrice_.Get(index);
}
inline void SkinWeight::set_bindposematrice(int index, float value) {
  bindposematrice_.Set(index, value);
}
inline void SkinWeight::add_bindposematrice(float value) {
  bindposematrice_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SkinWeight::bindposematrice() const {
  return bindposematrice_;
}
inline ::google::protobuf::RepeatedField< float >*
SkinWeight::mutable_bindposematrice() {
  return &bindposematrice_;
}

// repeated float bindShapeMatrix = 5;
inline int SkinWeight::bindshapematrix_size() const {
  return bindshapematrix_.size();
}
inline void SkinWeight::clear_bindshapematrix() {
  bindshapematrix_.Clear();
}
inline float SkinWeight::bindshapematrix(int index) const {
  return bindshapematrix_.Get(index);
}
inline void SkinWeight::set_bindshapematrix(int index, float value) {
  bindshapematrix_.Set(index, value);
}
inline void SkinWeight::add_bindshapematrix(float value) {
  bindshapematrix_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SkinWeight::bindshapematrix() const {
  return bindshapematrix_;
}
inline ::google::protobuf::RepeatedField< float >*
SkinWeight::mutable_bindshapematrix() {
  return &bindshapematrix_;
}

// repeated int32 numberOfInfluenceJoints = 6;
inline int SkinWeight::numberofinfluencejoints_size() const {
  return numberofinfluencejoints_.size();
}
inline void SkinWeight::clear_numberofinfluencejoints() {
  numberofinfluencejoints_.Clear();
}
inline ::google::protobuf::int32 SkinWeight::numberofinfluencejoints(int index) const {
  return numberofinfluencejoints_.Get(index);
}
inline void SkinWeight::set_numberofinfluencejoints(int index, ::google::protobuf::int32 value) {
  numberofinfluencejoints_.Set(index, value);
}
inline void SkinWeight::add_numberofinfluencejoints(::google::protobuf::int32 value) {
  numberofinfluencejoints_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkinWeight::numberofinfluencejoints() const {
  return numberofinfluencejoints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkinWeight::mutable_numberofinfluencejoints() {
  return &numberofinfluencejoints_;
}

// repeated int32 weightIndices = 7;
inline int SkinWeight::weightindices_size() const {
  return weightindices_.size();
}
inline void SkinWeight::clear_weightindices() {
  weightindices_.Clear();
}
inline ::google::protobuf::int32 SkinWeight::weightindices(int index) const {
  return weightindices_.Get(index);
}
inline void SkinWeight::set_weightindices(int index, ::google::protobuf::int32 value) {
  weightindices_.Set(index, value);
}
inline void SkinWeight::add_weightindices(::google::protobuf::int32 value) {
  weightindices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkinWeight::weightindices() const {
  return weightindices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkinWeight::mutable_weightindices() {
  return &weightindices_;
}

// repeated int32 jointNameIndices = 8;
inline int SkinWeight::jointnameindices_size() const {
  return jointnameindices_.size();
}
inline void SkinWeight::clear_jointnameindices() {
  jointnameindices_.Clear();
}
inline ::google::protobuf::int32 SkinWeight::jointnameindices(int index) const {
  return jointnameindices_.Get(index);
}
inline void SkinWeight::set_jointnameindices(int index, ::google::protobuf::int32 value) {
  jointnameindices_.Set(index, value);
}
inline void SkinWeight::add_jointnameindices(::google::protobuf::int32 value) {
  jointnameindices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkinWeight::jointnameindices() const {
  return jointnameindices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkinWeight::mutable_jointnameindices() {
  return &jointnameindices_;
}

// -------------------------------------------------------------------

// StaticMesh

// required string staticMeshName = 1;
inline bool StaticMesh::has_staticmeshname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticMesh::set_has_staticmeshname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticMesh::clear_has_staticmeshname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticMesh::clear_staticmeshname() {
  if (staticmeshname_ != &::google::protobuf::internal::kEmptyString) {
    staticmeshname_->clear();
  }
  clear_has_staticmeshname();
}
inline const ::std::string& StaticMesh::staticmeshname() const {
  return *staticmeshname_;
}
inline void StaticMesh::set_staticmeshname(const ::std::string& value) {
  set_has_staticmeshname();
  if (staticmeshname_ == &::google::protobuf::internal::kEmptyString) {
    staticmeshname_ = new ::std::string;
  }
  staticmeshname_->assign(value);
}
inline void StaticMesh::set_staticmeshname(const char* value) {
  set_has_staticmeshname();
  if (staticmeshname_ == &::google::protobuf::internal::kEmptyString) {
    staticmeshname_ = new ::std::string;
  }
  staticmeshname_->assign(value);
}
inline void StaticMesh::set_staticmeshname(const char* value, size_t size) {
  set_has_staticmeshname();
  if (staticmeshname_ == &::google::protobuf::internal::kEmptyString) {
    staticmeshname_ = new ::std::string;
  }
  staticmeshname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StaticMesh::mutable_staticmeshname() {
  set_has_staticmeshname();
  if (staticmeshname_ == &::google::protobuf::internal::kEmptyString) {
    staticmeshname_ = new ::std::string;
  }
  return staticmeshname_;
}
inline ::std::string* StaticMesh::release_staticmeshname() {
  clear_has_staticmeshname();
  if (staticmeshname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = staticmeshname_;
    staticmeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StaticMesh::set_allocated_staticmeshname(::std::string* staticmeshname) {
  if (staticmeshname_ != &::google::protobuf::internal::kEmptyString) {
    delete staticmeshname_;
  }
  if (staticmeshname) {
    set_has_staticmeshname();
    staticmeshname_ = staticmeshname;
  } else {
    clear_has_staticmeshname();
    staticmeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SmartBodyBinary.MeshModel meshModels = 2;
inline int StaticMesh::meshmodels_size() const {
  return meshmodels_.size();
}
inline void StaticMesh::clear_meshmodels() {
  meshmodels_.Clear();
}
inline const ::SmartBodyBinary::MeshModel& StaticMesh::meshmodels(int index) const {
  return meshmodels_.Get(index);
}
inline ::SmartBodyBinary::MeshModel* StaticMesh::mutable_meshmodels(int index) {
  return meshmodels_.Mutable(index);
}
inline ::SmartBodyBinary::MeshModel* StaticMesh::add_meshmodels() {
  return meshmodels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::MeshModel >&
StaticMesh::meshmodels() const {
  return meshmodels_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::MeshModel >*
StaticMesh::mutable_meshmodels() {
  return &meshmodels_;
}

// -------------------------------------------------------------------

// DeformableMesh

// required string deformableMeshName = 1;
inline bool DeformableMesh::has_deformablemeshname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeformableMesh::set_has_deformablemeshname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeformableMesh::clear_has_deformablemeshname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeformableMesh::clear_deformablemeshname() {
  if (deformablemeshname_ != &::google::protobuf::internal::kEmptyString) {
    deformablemeshname_->clear();
  }
  clear_has_deformablemeshname();
}
inline const ::std::string& DeformableMesh::deformablemeshname() const {
  return *deformablemeshname_;
}
inline void DeformableMesh::set_deformablemeshname(const ::std::string& value) {
  set_has_deformablemeshname();
  if (deformablemeshname_ == &::google::protobuf::internal::kEmptyString) {
    deformablemeshname_ = new ::std::string;
  }
  deformablemeshname_->assign(value);
}
inline void DeformableMesh::set_deformablemeshname(const char* value) {
  set_has_deformablemeshname();
  if (deformablemeshname_ == &::google::protobuf::internal::kEmptyString) {
    deformablemeshname_ = new ::std::string;
  }
  deformablemeshname_->assign(value);
}
inline void DeformableMesh::set_deformablemeshname(const char* value, size_t size) {
  set_has_deformablemeshname();
  if (deformablemeshname_ == &::google::protobuf::internal::kEmptyString) {
    deformablemeshname_ = new ::std::string;
  }
  deformablemeshname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeformableMesh::mutable_deformablemeshname() {
  set_has_deformablemeshname();
  if (deformablemeshname_ == &::google::protobuf::internal::kEmptyString) {
    deformablemeshname_ = new ::std::string;
  }
  return deformablemeshname_;
}
inline ::std::string* DeformableMesh::release_deformablemeshname() {
  clear_has_deformablemeshname();
  if (deformablemeshname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deformablemeshname_;
    deformablemeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeformableMesh::set_allocated_deformablemeshname(::std::string* deformablemeshname) {
  if (deformablemeshname_ != &::google::protobuf::internal::kEmptyString) {
    delete deformablemeshname_;
  }
  if (deformablemeshname) {
    set_has_deformablemeshname();
    deformablemeshname_ = deformablemeshname;
  } else {
    clear_has_deformablemeshname();
    deformablemeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .SmartBodyBinary.StaticMesh staticMesh = 2;
inline bool DeformableMesh::has_staticmesh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeformableMesh::set_has_staticmesh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeformableMesh::clear_has_staticmesh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeformableMesh::clear_staticmesh() {
  if (staticmesh_ != NULL) staticmesh_->::SmartBodyBinary::StaticMesh::Clear();
  clear_has_staticmesh();
}
inline const ::SmartBodyBinary::StaticMesh& DeformableMesh::staticmesh() const {
  return staticmesh_ != NULL ? *staticmesh_ : *default_instance_->staticmesh_;
}
inline ::SmartBodyBinary::StaticMesh* DeformableMesh::mutable_staticmesh() {
  set_has_staticmesh();
  if (staticmesh_ == NULL) staticmesh_ = new ::SmartBodyBinary::StaticMesh;
  return staticmesh_;
}
inline ::SmartBodyBinary::StaticMesh* DeformableMesh::release_staticmesh() {
  clear_has_staticmesh();
  ::SmartBodyBinary::StaticMesh* temp = staticmesh_;
  staticmesh_ = NULL;
  return temp;
}
inline void DeformableMesh::set_allocated_staticmesh(::SmartBodyBinary::StaticMesh* staticmesh) {
  delete staticmesh_;
  staticmesh_ = staticmesh;
  if (staticmesh) {
    set_has_staticmesh();
  } else {
    clear_has_staticmesh();
  }
}

// repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
inline int DeformableMesh::skinweights_size() const {
  return skinweights_.size();
}
inline void DeformableMesh::clear_skinweights() {
  skinweights_.Clear();
}
inline const ::SmartBodyBinary::SkinWeight& DeformableMesh::skinweights(int index) const {
  return skinweights_.Get(index);
}
inline ::SmartBodyBinary::SkinWeight* DeformableMesh::mutable_skinweights(int index) {
  return skinweights_.Mutable(index);
}
inline ::SmartBodyBinary::SkinWeight* DeformableMesh::add_skinweights() {
  return skinweights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >&
DeformableMesh::skinweights() const {
  return skinweights_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >*
DeformableMesh::mutable_skinweights() {
  return &skinweights_;
}

// repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
inline int DeformableMesh::morphtargets_size() const {
  return morphtargets_.size();
}
inline void DeformableMesh::clear_morphtargets() {
  morphtargets_.Clear();
}
inline const ::SmartBodyBinary::StringToStringVectorMap& DeformableMesh::morphtargets(int index) const {
  return morphtargets_.Get(index);
}
inline ::SmartBodyBinary::StringToStringVectorMap* DeformableMesh::mutable_morphtargets(int index) {
  return morphtargets_.Mutable(index);
}
inline ::SmartBodyBinary::StringToStringVectorMap* DeformableMesh::add_morphtargets() {
  return morphtargets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >&
DeformableMesh::morphtargets() const {
  return morphtargets_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >*
DeformableMesh::mutable_morphtargets() {
  return &morphtargets_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sbmesh_2eproto__INCLUDED
