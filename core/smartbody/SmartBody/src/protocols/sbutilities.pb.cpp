// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbutilities.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sbutilities.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SmartBodyBinary {

namespace {

const ::google::protobuf::Descriptor* StringToStringMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringToStringMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringToFloatVectorMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringToFloatVectorMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringToIntVectorMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringToIntVectorMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringToStringVectorMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringToStringVectorMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sbutilities_2eproto() {
  protobuf_AddDesc_sbutilities_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sbutilities.proto");
  GOOGLE_CHECK(file != NULL);
  StringToStringMap_descriptor_ = file->message_type(0);
  static const int StringToStringMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringMap, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringMap, to_),
  };
  StringToStringMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringToStringMap_descriptor_,
      StringToStringMap::default_instance_,
      StringToStringMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringToStringMap));
  StringToFloatVectorMap_descriptor_ = file->message_type(1);
  static const int StringToFloatVectorMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToFloatVectorMap, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToFloatVectorMap, to_),
  };
  StringToFloatVectorMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringToFloatVectorMap_descriptor_,
      StringToFloatVectorMap::default_instance_,
      StringToFloatVectorMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToFloatVectorMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToFloatVectorMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringToFloatVectorMap));
  StringToIntVectorMap_descriptor_ = file->message_type(2);
  static const int StringToIntVectorMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToIntVectorMap, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToIntVectorMap, to_),
  };
  StringToIntVectorMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringToIntVectorMap_descriptor_,
      StringToIntVectorMap::default_instance_,
      StringToIntVectorMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToIntVectorMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToIntVectorMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringToIntVectorMap));
  StringToStringVectorMap_descriptor_ = file->message_type(3);
  static const int StringToStringVectorMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringVectorMap, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringVectorMap, to_),
  };
  StringToStringVectorMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringToStringVectorMap_descriptor_,
      StringToStringVectorMap::default_instance_,
      StringToStringVectorMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringVectorMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringToStringVectorMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringToStringVectorMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sbutilities_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringToStringMap_descriptor_, &StringToStringMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringToFloatVectorMap_descriptor_, &StringToFloatVectorMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringToIntVectorMap_descriptor_, &StringToIntVectorMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringToStringVectorMap_descriptor_, &StringToStringVectorMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sbutilities_2eproto() {
  delete StringToStringMap::default_instance_;
  delete StringToStringMap_reflection_;
  delete StringToFloatVectorMap::default_instance_;
  delete StringToFloatVectorMap_reflection_;
  delete StringToIntVectorMap::default_instance_;
  delete StringToIntVectorMap_reflection_;
  delete StringToStringVectorMap::default_instance_;
  delete StringToStringVectorMap_reflection_;
}

void protobuf_AddDesc_sbutilities_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021sbutilities.proto\022\017SmartBodyBinary\"-\n\021"
    "StringToStringMap\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 "
    "\002(\t\"2\n\026StringToFloatVectorMap\022\014\n\004from\030\001 "
    "\002(\t\022\n\n\002to\030\002 \003(\002\"0\n\024StringToIntVectorMap\022"
    "\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \003(\005\"3\n\027StringToStr"
    "ingVectorMap\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \003(\t", 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sbutilities.proto", &protobuf_RegisterTypes);
  StringToStringMap::default_instance_ = new StringToStringMap();
  StringToFloatVectorMap::default_instance_ = new StringToFloatVectorMap();
  StringToIntVectorMap::default_instance_ = new StringToIntVectorMap();
  StringToStringVectorMap::default_instance_ = new StringToStringVectorMap();
  StringToStringMap::default_instance_->InitAsDefaultInstance();
  StringToFloatVectorMap::default_instance_->InitAsDefaultInstance();
  StringToIntVectorMap::default_instance_->InitAsDefaultInstance();
  StringToStringVectorMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sbutilities_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sbutilities_2eproto {
  StaticDescriptorInitializer_sbutilities_2eproto() {
    protobuf_AddDesc_sbutilities_2eproto();
  }
} static_descriptor_initializer_sbutilities_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StringToStringMap::kFromFieldNumber;
const int StringToStringMap::kToFieldNumber;
#endif  // !_MSC_VER

StringToStringMap::StringToStringMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringToStringMap::InitAsDefaultInstance() {
}

StringToStringMap::StringToStringMap(const StringToStringMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringToStringMap::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringToStringMap::~StringToStringMap() {
  SharedDtor();
}

void StringToStringMap::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void StringToStringMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringToStringMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringToStringMap_descriptor_;
}

const StringToStringMap& StringToStringMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbutilities_2eproto();
  return *default_instance_;
}

StringToStringMap* StringToStringMap::default_instance_ = NULL;

StringToStringMap* StringToStringMap::New() const {
  return new StringToStringMap;
}

void StringToStringMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringToStringMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // required string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringToStringMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }

  // required string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringToStringMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // required string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringToStringMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringToStringMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringToStringMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringToStringMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringToStringMap::MergeFrom(const StringToStringMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringToStringMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToStringMap::CopyFrom(const StringToStringMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToStringMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringToStringMap::Swap(StringToStringMap* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringToStringMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringToStringMap_descriptor_;
  metadata.reflection = StringToStringMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringToFloatVectorMap::kFromFieldNumber;
const int StringToFloatVectorMap::kToFieldNumber;
#endif  // !_MSC_VER

StringToFloatVectorMap::StringToFloatVectorMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringToFloatVectorMap::InitAsDefaultInstance() {
}

StringToFloatVectorMap::StringToFloatVectorMap(const StringToFloatVectorMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringToFloatVectorMap::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringToFloatVectorMap::~StringToFloatVectorMap() {
  SharedDtor();
}

void StringToFloatVectorMap::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (this != default_instance_) {
  }
}

void StringToFloatVectorMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringToFloatVectorMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringToFloatVectorMap_descriptor_;
}

const StringToFloatVectorMap& StringToFloatVectorMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbutilities_2eproto();
  return *default_instance_;
}

StringToFloatVectorMap* StringToFloatVectorMap::default_instance_ = NULL;

StringToFloatVectorMap* StringToFloatVectorMap::New() const {
  return new StringToFloatVectorMap;
}

void StringToFloatVectorMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
  }
  to_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringToFloatVectorMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_to;
        break;
      }

      // repeated float to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_to())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_to())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_to;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringToFloatVectorMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }

  // repeated float to = 2;
  for (int i = 0; i < this->to_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->to(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringToFloatVectorMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // repeated float to = 2;
  for (int i = 0; i < this->to_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->to(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringToFloatVectorMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

  }
  // repeated float to = 2;
  {
    int data_size = 0;
    data_size = 4 * this->to_size();
    total_size += 1 * this->to_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringToFloatVectorMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringToFloatVectorMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringToFloatVectorMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringToFloatVectorMap::MergeFrom(const StringToFloatVectorMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  to_.MergeFrom(from.to_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringToFloatVectorMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToFloatVectorMap::CopyFrom(const StringToFloatVectorMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToFloatVectorMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StringToFloatVectorMap::Swap(StringToFloatVectorMap* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    to_.Swap(&other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringToFloatVectorMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringToFloatVectorMap_descriptor_;
  metadata.reflection = StringToFloatVectorMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringToIntVectorMap::kFromFieldNumber;
const int StringToIntVectorMap::kToFieldNumber;
#endif  // !_MSC_VER

StringToIntVectorMap::StringToIntVectorMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringToIntVectorMap::InitAsDefaultInstance() {
}

StringToIntVectorMap::StringToIntVectorMap(const StringToIntVectorMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringToIntVectorMap::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringToIntVectorMap::~StringToIntVectorMap() {
  SharedDtor();
}

void StringToIntVectorMap::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (this != default_instance_) {
  }
}

void StringToIntVectorMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringToIntVectorMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringToIntVectorMap_descriptor_;
}

const StringToIntVectorMap& StringToIntVectorMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbutilities_2eproto();
  return *default_instance_;
}

StringToIntVectorMap* StringToIntVectorMap::default_instance_ = NULL;

StringToIntVectorMap* StringToIntVectorMap::New() const {
  return new StringToIntVectorMap;
}

void StringToIntVectorMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
  }
  to_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringToIntVectorMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // repeated int32 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_to())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_to())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringToIntVectorMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }

  // repeated int32 to = 2;
  for (int i = 0; i < this->to_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->to(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringToIntVectorMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // repeated int32 to = 2;
  for (int i = 0; i < this->to_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->to(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringToIntVectorMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

  }
  // repeated int32 to = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->to_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->to(i));
    }
    total_size += 1 * this->to_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringToIntVectorMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringToIntVectorMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringToIntVectorMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringToIntVectorMap::MergeFrom(const StringToIntVectorMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  to_.MergeFrom(from.to_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringToIntVectorMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToIntVectorMap::CopyFrom(const StringToIntVectorMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToIntVectorMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StringToIntVectorMap::Swap(StringToIntVectorMap* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    to_.Swap(&other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringToIntVectorMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringToIntVectorMap_descriptor_;
  metadata.reflection = StringToIntVectorMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringToStringVectorMap::kFromFieldNumber;
const int StringToStringVectorMap::kToFieldNumber;
#endif  // !_MSC_VER

StringToStringVectorMap::StringToStringVectorMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringToStringVectorMap::InitAsDefaultInstance() {
}

StringToStringVectorMap::StringToStringVectorMap(const StringToStringVectorMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringToStringVectorMap::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringToStringVectorMap::~StringToStringVectorMap() {
  SharedDtor();
}

void StringToStringVectorMap::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (this != default_instance_) {
  }
}

void StringToStringVectorMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringToStringVectorMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringToStringVectorMap_descriptor_;
}

const StringToStringVectorMap& StringToStringVectorMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbutilities_2eproto();
  return *default_instance_;
}

StringToStringVectorMap* StringToStringVectorMap::default_instance_ = NULL;

StringToStringVectorMap* StringToStringVectorMap::New() const {
  return new StringToStringVectorMap;
}

void StringToStringVectorMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
  }
  to_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringToStringVectorMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // repeated string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to(this->to_size() - 1).data(),
            this->to(this->to_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringToStringVectorMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }

  // repeated string to = 2;
  for (int i = 0; i < this->to_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->to(i).data(), this->to(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringToStringVectorMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // repeated string to = 2;
  for (int i = 0; i < this->to_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to(i).data(), this->to(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->to(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringToStringVectorMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

  }
  // repeated string to = 2;
  total_size += 1 * this->to_size();
  for (int i = 0; i < this->to_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->to(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringToStringVectorMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringToStringVectorMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringToStringVectorMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringToStringVectorMap::MergeFrom(const StringToStringVectorMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  to_.MergeFrom(from.to_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringToStringVectorMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToStringVectorMap::CopyFrom(const StringToStringVectorMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToStringVectorMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StringToStringVectorMap::Swap(StringToStringVectorMap* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    to_.Swap(&other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringToStringVectorMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringToStringVectorMap_descriptor_;
  metadata.reflection = StringToStringVectorMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

// @@protoc_insertion_point(global_scope)
