// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbutilities.proto

#ifndef PROTOBUF_sbutilities_2eproto__INCLUDED
#define PROTOBUF_sbutilities_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SmartBodyBinary {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sbutilities_2eproto();
void protobuf_AssignDesc_sbutilities_2eproto();
void protobuf_ShutdownFile_sbutilities_2eproto();

class StringToStringMap;
class StringToFloatVectorMap;
class StringToIntVectorMap;
class StringToStringVectorMap;

// ===================================================================

class StringToStringMap : public ::google::protobuf::Message {
 public:
  StringToStringMap();
  virtual ~StringToStringMap();

  StringToStringMap(const StringToStringMap& from);

  inline StringToStringMap& operator=(const StringToStringMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringToStringMap& default_instance();

  void Swap(StringToStringMap* other);

  // implements Message ----------------------------------------------

  StringToStringMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringToStringMap& from);
  void MergeFrom(const StringToStringMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required string to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToStringMap)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::std::string* to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sbutilities_2eproto();
  friend void protobuf_AssignDesc_sbutilities_2eproto();
  friend void protobuf_ShutdownFile_sbutilities_2eproto();

  void InitAsDefaultInstance();
  static StringToStringMap* default_instance_;
};
// -------------------------------------------------------------------

class StringToFloatVectorMap : public ::google::protobuf::Message {
 public:
  StringToFloatVectorMap();
  virtual ~StringToFloatVectorMap();

  StringToFloatVectorMap(const StringToFloatVectorMap& from);

  inline StringToFloatVectorMap& operator=(const StringToFloatVectorMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringToFloatVectorMap& default_instance();

  void Swap(StringToFloatVectorMap* other);

  // implements Message ----------------------------------------------

  StringToFloatVectorMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringToFloatVectorMap& from);
  void MergeFrom(const StringToFloatVectorMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // repeated float to = 2;
  inline int to_size() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline float to(int index) const;
  inline void set_to(int index, float value);
  inline void add_to(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      to() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_to();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToFloatVectorMap)
 private:
  inline void set_has_from();
  inline void clear_has_from();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::google::protobuf::RepeatedField< float > to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sbutilities_2eproto();
  friend void protobuf_AssignDesc_sbutilities_2eproto();
  friend void protobuf_ShutdownFile_sbutilities_2eproto();

  void InitAsDefaultInstance();
  static StringToFloatVectorMap* default_instance_;
};
// -------------------------------------------------------------------

class StringToIntVectorMap : public ::google::protobuf::Message {
 public:
  StringToIntVectorMap();
  virtual ~StringToIntVectorMap();

  StringToIntVectorMap(const StringToIntVectorMap& from);

  inline StringToIntVectorMap& operator=(const StringToIntVectorMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringToIntVectorMap& default_instance();

  void Swap(StringToIntVectorMap* other);

  // implements Message ----------------------------------------------

  StringToIntVectorMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringToIntVectorMap& from);
  void MergeFrom(const StringToIntVectorMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // repeated int32 to = 2;
  inline int to_size() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline ::google::protobuf::int32 to(int index) const;
  inline void set_to(int index, ::google::protobuf::int32 value);
  inline void add_to(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      to() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_to();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToIntVectorMap)
 private:
  inline void set_has_from();
  inline void clear_has_from();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sbutilities_2eproto();
  friend void protobuf_AssignDesc_sbutilities_2eproto();
  friend void protobuf_ShutdownFile_sbutilities_2eproto();

  void InitAsDefaultInstance();
  static StringToIntVectorMap* default_instance_;
};
// -------------------------------------------------------------------

class StringToStringVectorMap : public ::google::protobuf::Message {
 public:
  StringToStringVectorMap();
  virtual ~StringToStringVectorMap();

  StringToStringVectorMap(const StringToStringVectorMap& from);

  inline StringToStringVectorMap& operator=(const StringToStringVectorMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringToStringVectorMap& default_instance();

  void Swap(StringToStringVectorMap* other);

  // implements Message ----------------------------------------------

  StringToStringVectorMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringToStringVectorMap& from);
  void MergeFrom(const StringToStringVectorMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // repeated string to = 2;
  inline int to_size() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to(int index) const;
  inline ::std::string* mutable_to(int index);
  inline void set_to(int index, const ::std::string& value);
  inline void set_to(int index, const char* value);
  inline void set_to(int index, const char* value, size_t size);
  inline ::std::string* add_to();
  inline void add_to(const ::std::string& value);
  inline void add_to(const char* value);
  inline void add_to(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& to() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_to();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToStringVectorMap)
 private:
  inline void set_has_from();
  inline void clear_has_from();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::google::protobuf::RepeatedPtrField< ::std::string> to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sbutilities_2eproto();
  friend void protobuf_AssignDesc_sbutilities_2eproto();
  friend void protobuf_ShutdownFile_sbutilities_2eproto();

  void InitAsDefaultInstance();
  static StringToStringVectorMap* default_instance_;
};
// ===================================================================


// ===================================================================

// StringToStringMap

// required string from = 1;
inline bool StringToStringMap::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringToStringMap::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringToStringMap::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringToStringMap::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& StringToStringMap::from() const {
  return *from_;
}
inline void StringToStringMap::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToStringMap::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToStringMap::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringToStringMap::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* StringToStringMap::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StringToStringMap::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string to = 2;
inline bool StringToStringMap::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringToStringMap::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StringToStringMap::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StringToStringMap::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& StringToStringMap::to() const {
  return *to_;
}
inline void StringToStringMap::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void StringToStringMap::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void StringToStringMap::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringToStringMap::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* StringToStringMap::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StringToStringMap::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StringToFloatVectorMap

// required string from = 1;
inline bool StringToFloatVectorMap::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringToFloatVectorMap::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringToFloatVectorMap::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringToFloatVectorMap::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& StringToFloatVectorMap::from() const {
  return *from_;
}
inline void StringToFloatVectorMap::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToFloatVectorMap::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToFloatVectorMap::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringToFloatVectorMap::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* StringToFloatVectorMap::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StringToFloatVectorMap::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated float to = 2;
inline int StringToFloatVectorMap::to_size() const {
  return to_.size();
}
inline void StringToFloatVectorMap::clear_to() {
  to_.Clear();
}
inline float StringToFloatVectorMap::to(int index) const {
  return to_.Get(index);
}
inline void StringToFloatVectorMap::set_to(int index, float value) {
  to_.Set(index, value);
}
inline void StringToFloatVectorMap::add_to(float value) {
  to_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
StringToFloatVectorMap::to() const {
  return to_;
}
inline ::google::protobuf::RepeatedField< float >*
StringToFloatVectorMap::mutable_to() {
  return &to_;
}

// -------------------------------------------------------------------

// StringToIntVectorMap

// required string from = 1;
inline bool StringToIntVectorMap::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringToIntVectorMap::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringToIntVectorMap::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringToIntVectorMap::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& StringToIntVectorMap::from() const {
  return *from_;
}
inline void StringToIntVectorMap::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToIntVectorMap::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToIntVectorMap::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringToIntVectorMap::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* StringToIntVectorMap::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StringToIntVectorMap::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 to = 2;
inline int StringToIntVectorMap::to_size() const {
  return to_.size();
}
inline void StringToIntVectorMap::clear_to() {
  to_.Clear();
}
inline ::google::protobuf::int32 StringToIntVectorMap::to(int index) const {
  return to_.Get(index);
}
inline void StringToIntVectorMap::set_to(int index, ::google::protobuf::int32 value) {
  to_.Set(index, value);
}
inline void StringToIntVectorMap::add_to(::google::protobuf::int32 value) {
  to_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StringToIntVectorMap::to() const {
  return to_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StringToIntVectorMap::mutable_to() {
  return &to_;
}

// -------------------------------------------------------------------

// StringToStringVectorMap

// required string from = 1;
inline bool StringToStringVectorMap::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringToStringVectorMap::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringToStringVectorMap::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringToStringVectorMap::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& StringToStringVectorMap::from() const {
  return *from_;
}
inline void StringToStringVectorMap::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToStringVectorMap::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void StringToStringVectorMap::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringToStringVectorMap::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* StringToStringVectorMap::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StringToStringVectorMap::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string to = 2;
inline int StringToStringVectorMap::to_size() const {
  return to_.size();
}
inline void StringToStringVectorMap::clear_to() {
  to_.Clear();
}
inline const ::std::string& StringToStringVectorMap::to(int index) const {
  return to_.Get(index);
}
inline ::std::string* StringToStringVectorMap::mutable_to(int index) {
  return to_.Mutable(index);
}
inline void StringToStringVectorMap::set_to(int index, const ::std::string& value) {
  to_.Mutable(index)->assign(value);
}
inline void StringToStringVectorMap::set_to(int index, const char* value) {
  to_.Mutable(index)->assign(value);
}
inline void StringToStringVectorMap::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringToStringVectorMap::add_to() {
  return to_.Add();
}
inline void StringToStringVectorMap::add_to(const ::std::string& value) {
  to_.Add()->assign(value);
}
inline void StringToStringVectorMap::add_to(const char* value) {
  to_.Add()->assign(value);
}
inline void StringToStringVectorMap::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringToStringVectorMap::to() const {
  return to_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringToStringVectorMap::mutable_to() {
  return &to_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sbutilities_2eproto__INCLUDED
