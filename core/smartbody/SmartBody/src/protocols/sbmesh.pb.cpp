// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmesh.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sbmesh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SmartBodyBinary {

namespace {

const ::google::protobuf::Descriptor* Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeshModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeshModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkinWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkinWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticMesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeformableMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeformableMesh_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sbmesh_2eproto() {
  protobuf_AddDesc_sbmesh_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sbmesh.proto");
  GOOGLE_CHECK(file != NULL);
  Material_descriptor_ = file->message_type(0);
  static const int Material_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, ambient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, diffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, specular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, emission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, shininess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, transparency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, usealphablend_),
  };
  Material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Material_descriptor_,
      Material::default_instance_,
      Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Material));
  MeshModel_descriptor_ = file->message_type(1);
  static const int MeshModel_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, meshname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, vertexcoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, tangents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, binormals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, texturecoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, trianglefaceindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, normalindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, texturecoordinatesindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, culling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialtodiffusetexturemapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialtonormaltexturemapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialtospeculartexturemapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialtofaceindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialtotransparenttexturemapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, materialtoglossytexturemapping_),
  };
  MeshModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeshModel_descriptor_,
      MeshModel::default_instance_,
      MeshModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeshModel));
  SkinWeight_descriptor_ = file->message_type(2);
  static const int SkinWeight_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, sourcemeshname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, influencejointnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, bindweights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, bindposematrice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, bindshapematrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, numberofinfluencejoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, weightindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, jointnameindices_),
  };
  SkinWeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkinWeight_descriptor_,
      SkinWeight::default_instance_,
      SkinWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinWeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkinWeight));
  StaticMesh_descriptor_ = file->message_type(3);
  static const int StaticMesh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticMesh, staticmeshname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticMesh, meshmodels_),
  };
  StaticMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaticMesh_descriptor_,
      StaticMesh::default_instance_,
      StaticMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaticMesh));
  DeformableMesh_descriptor_ = file->message_type(4);
  static const int DeformableMesh_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableMesh, deformablemeshname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableMesh, staticmesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableMesh, skinweights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableMesh, morphtargets_),
  };
  DeformableMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeformableMesh_descriptor_,
      DeformableMesh::default_instance_,
      DeformableMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeformableMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeformableMesh));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sbmesh_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Material_descriptor_, &Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeshModel_descriptor_, &MeshModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkinWeight_descriptor_, &SkinWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaticMesh_descriptor_, &StaticMesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeformableMesh_descriptor_, &DeformableMesh::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sbmesh_2eproto() {
  delete Material::default_instance_;
  delete Material_reflection_;
  delete MeshModel::default_instance_;
  delete MeshModel_reflection_;
  delete SkinWeight::default_instance_;
  delete SkinWeight_reflection_;
  delete StaticMesh::default_instance_;
  delete StaticMesh_reflection_;
  delete DeformableMesh::default_instance_;
  delete DeformableMesh_reflection_;
}

void protobuf_AddDesc_sbmesh_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SmartBodyBinary::protobuf_AddDesc_sbutilities_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014sbmesh.proto\022\017SmartBodyBinary\032\021sbutili"
    "ties.proto\"\220\001\n\010Material\022\017\n\007ambient\030\001 \003(\005"
    "\022\017\n\007diffuse\030\002 \003(\005\022\020\n\010specular\030\003 \003(\005\022\020\n\010e"
    "mission\030\004 \003(\005\022\021\n\tshininess\030\005 \002(\005\022\024\n\014tran"
    "sparency\030\006 \002(\002\022\025\n\ruseAlphaBlend\030\007 \002(\010\"\232\006"
    "\n\tMeshModel\022\020\n\010meshName\030\001 \002(\t\022,\n\tmateria"
    "ls\030\002 \003(\0132\031.SmartBodyBinary.Material\022\031\n\021v"
    "ertexCoordinates\030\003 \003(\002\022\017\n\007normals\030\004 \003(\002\022"
    "\020\n\010tangents\030\005 \003(\002\022\021\n\tbinormals\030\006 \003(\002\022\032\n\022"
    "textureCoordinates\030\007 \003(\002\022\033\n\023triangleFace"
    "Indices\030\010 \003(\005\022\027\n\017materialIndices\030\t \003(\005\022\025"
    "\n\rnormalIndices\030\n \003(\005\022!\n\031textureCoordina"
    "tesIndices\030\013 \003(\005\022\017\n\007culling\030\014 \002(\010\022\025\n\rmat"
    "erialNames\030\r \003(\t\022K\n\037materialToDiffuseTex"
    "tureMapping\030\016 \003(\0132\".SmartBodyBinary.Stri"
    "ngToStringMap\022J\n\036materialToNormalTexture"
    "Mapping\030\017 \003(\0132\".SmartBodyBinary.StringTo"
    "StringMap\022L\n materialToSpecularTextureMa"
    "pping\030\020 \003(\0132\".SmartBodyBinary.StringToSt"
    "ringMap\022D\n\025materialToFaceIndices\030\021 \003(\0132%"
    ".SmartBodyBinary.StringToIntVectorMap\022O\n"
    "#materialToTransparentTextureMapping\030\022 \003"
    "(\0132\".SmartBodyBinary.StringToStringMap\022J"
    "\n\036materialToGlossyTextureMapping\030\023 \003(\0132\""
    ".SmartBodyBinary.StringToStringMap\"\332\001\n\nS"
    "kinWeight\022\026\n\016sourceMeshName\030\001 \002(\t\022\033\n\023inf"
    "luenceJointNames\030\002 \003(\t\022\023\n\013bindWeights\030\003 "
    "\003(\002\022\027\n\017bindPoseMatrice\030\004 \003(\002\022\027\n\017bindShap"
    "eMatrix\030\005 \003(\002\022\037\n\027numberOfInfluenceJoints"
    "\030\006 \003(\005\022\025\n\rweightIndices\030\007 \003(\005\022\030\n\020jointNa"
    "meIndices\030\010 \003(\005\"T\n\nStaticMesh\022\026\n\016staticM"
    "eshName\030\001 \002(\t\022.\n\nmeshModels\030\002 \003(\0132\032.Smar"
    "tBodyBinary.MeshModel\"\317\001\n\016DeformableMesh"
    "\022\032\n\022deformableMeshName\030\001 \002(\t\022/\n\nstaticMe"
    "sh\030\002 \002(\0132\033.SmartBodyBinary.StaticMesh\0220\n"
    "\013skinWeights\030\003 \003(\0132\033.SmartBodyBinary.Ski"
    "nWeight\022>\n\014morphTargets\030\004 \003(\0132(.SmartBod"
    "yBinary.StringToStringVectorMap", 1511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sbmesh.proto", &protobuf_RegisterTypes);
  Material::default_instance_ = new Material();
  MeshModel::default_instance_ = new MeshModel();
  SkinWeight::default_instance_ = new SkinWeight();
  StaticMesh::default_instance_ = new StaticMesh();
  DeformableMesh::default_instance_ = new DeformableMesh();
  Material::default_instance_->InitAsDefaultInstance();
  MeshModel::default_instance_->InitAsDefaultInstance();
  SkinWeight::default_instance_->InitAsDefaultInstance();
  StaticMesh::default_instance_->InitAsDefaultInstance();
  DeformableMesh::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sbmesh_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sbmesh_2eproto {
  StaticDescriptorInitializer_sbmesh_2eproto() {
    protobuf_AddDesc_sbmesh_2eproto();
  }
} static_descriptor_initializer_sbmesh_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Material::kAmbientFieldNumber;
const int Material::kDiffuseFieldNumber;
const int Material::kSpecularFieldNumber;
const int Material::kEmissionFieldNumber;
const int Material::kShininessFieldNumber;
const int Material::kTransparencyFieldNumber;
const int Material::kUseAlphaBlendFieldNumber;
#endif  // !_MSC_VER

Material::Material()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Material::InitAsDefaultInstance() {
}

Material::Material(const Material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Material::SharedCtor() {
  _cached_size_ = 0;
  shininess_ = 0;
  transparency_ = 0;
  usealphablend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material::~Material() {
  SharedDtor();
}

void Material::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_descriptor_;
}

const Material& Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbmesh_2eproto();
  return *default_instance_;
}

Material* Material::default_instance_ = NULL;

Material* Material::New() const {
  return new Material;
}

void Material::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    shininess_ = 0;
    transparency_ = 0;
    usealphablend_ = false;
  }
  ambient_.Clear();
  diffuse_.Clear();
  specular_.Clear();
  emission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ambient = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ambient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ambient())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ambient())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ambient;
        if (input->ExpectTag(16)) goto parse_diffuse;
        break;
      }

      // repeated int32 diffuse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diffuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_diffuse())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_diffuse())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diffuse;
        if (input->ExpectTag(24)) goto parse_specular;
        break;
      }

      // repeated int32 specular = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specular:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_specular())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_specular())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_specular;
        if (input->ExpectTag(32)) goto parse_emission;
        break;
      }

      // repeated int32 emission = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_emission())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_emission())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_emission;
        if (input->ExpectTag(40)) goto parse_shininess;
        break;
      }

      // required int32 shininess = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shininess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shininess_)));
          set_has_shininess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_transparency;
        break;
      }

      // required float transparency = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transparency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
          set_has_transparency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_useAlphaBlend;
        break;
      }

      // required bool useAlphaBlend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useAlphaBlend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usealphablend_)));
          set_has_usealphablend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ambient = 1;
  for (int i = 0; i < this->ambient_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ambient(i), output);
  }

  // repeated int32 diffuse = 2;
  for (int i = 0; i < this->diffuse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->diffuse(i), output);
  }

  // repeated int32 specular = 3;
  for (int i = 0; i < this->specular_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->specular(i), output);
  }

  // repeated int32 emission = 4;
  for (int i = 0; i < this->emission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->emission(i), output);
  }

  // required int32 shininess = 5;
  if (has_shininess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->shininess(), output);
  }

  // required float transparency = 6;
  if (has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->transparency(), output);
  }

  // required bool useAlphaBlend = 7;
  if (has_usealphablend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->usealphablend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 ambient = 1;
  for (int i = 0; i < this->ambient_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ambient(i), target);
  }

  // repeated int32 diffuse = 2;
  for (int i = 0; i < this->diffuse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->diffuse(i), target);
  }

  // repeated int32 specular = 3;
  for (int i = 0; i < this->specular_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->specular(i), target);
  }

  // repeated int32 emission = 4;
  for (int i = 0; i < this->emission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->emission(i), target);
  }

  // required int32 shininess = 5;
  if (has_shininess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->shininess(), target);
  }

  // required float transparency = 6;
  if (has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->transparency(), target);
  }

  // required bool useAlphaBlend = 7;
  if (has_usealphablend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->usealphablend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required int32 shininess = 5;
    if (has_shininess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shininess());
    }

    // required float transparency = 6;
    if (has_transparency()) {
      total_size += 1 + 4;
    }

    // required bool useAlphaBlend = 7;
    if (has_usealphablend()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 ambient = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ambient_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ambient(i));
    }
    total_size += 1 * this->ambient_size() + data_size;
  }

  // repeated int32 diffuse = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->diffuse_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->diffuse(i));
    }
    total_size += 1 * this->diffuse_size() + data_size;
  }

  // repeated int32 specular = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->specular_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->specular(i));
    }
    total_size += 1 * this->specular_size() + data_size;
  }

  // repeated int32 emission = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->emission_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->emission(i));
    }
    total_size += 1 * this->emission_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  ambient_.MergeFrom(from.ambient_);
  diffuse_.MergeFrom(from.diffuse_);
  specular_.MergeFrom(from.specular_);
  emission_.MergeFrom(from.emission_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_shininess()) {
      set_shininess(from.shininess());
    }
    if (from.has_transparency()) {
      set_transparency(from.transparency());
    }
    if (from.has_usealphablend()) {
      set_usealphablend(from.usealphablend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000070) != 0x00000070) return false;

  return true;
}

void Material::Swap(Material* other) {
  if (other != this) {
    ambient_.Swap(&other->ambient_);
    diffuse_.Swap(&other->diffuse_);
    specular_.Swap(&other->specular_);
    emission_.Swap(&other->emission_);
    std::swap(shininess_, other->shininess_);
    std::swap(transparency_, other->transparency_);
    std::swap(usealphablend_, other->usealphablend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_descriptor_;
  metadata.reflection = Material_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeshModel::kMeshNameFieldNumber;
const int MeshModel::kMaterialsFieldNumber;
const int MeshModel::kVertexCoordinatesFieldNumber;
const int MeshModel::kNormalsFieldNumber;
const int MeshModel::kTangentsFieldNumber;
const int MeshModel::kBinormalsFieldNumber;
const int MeshModel::kTextureCoordinatesFieldNumber;
const int MeshModel::kTriangleFaceIndicesFieldNumber;
const int MeshModel::kMaterialIndicesFieldNumber;
const int MeshModel::kNormalIndicesFieldNumber;
const int MeshModel::kTextureCoordinatesIndicesFieldNumber;
const int MeshModel::kCullingFieldNumber;
const int MeshModel::kMaterialNamesFieldNumber;
const int MeshModel::kMaterialToDiffuseTextureMappingFieldNumber;
const int MeshModel::kMaterialToNormalTextureMappingFieldNumber;
const int MeshModel::kMaterialToSpecularTextureMappingFieldNumber;
const int MeshModel::kMaterialToFaceIndicesFieldNumber;
const int MeshModel::kMaterialToTransparentTextureMappingFieldNumber;
const int MeshModel::kMaterialToGlossyTextureMappingFieldNumber;
#endif  // !_MSC_VER

MeshModel::MeshModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeshModel::InitAsDefaultInstance() {
}

MeshModel::MeshModel(const MeshModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeshModel::SharedCtor() {
  _cached_size_ = 0;
  meshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  culling_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeshModel::~MeshModel() {
  SharedDtor();
}

void MeshModel::SharedDtor() {
  if (meshname_ != &::google::protobuf::internal::kEmptyString) {
    delete meshname_;
  }
  if (this != default_instance_) {
  }
}

void MeshModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeshModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeshModel_descriptor_;
}

const MeshModel& MeshModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbmesh_2eproto();
  return *default_instance_;
}

MeshModel* MeshModel::default_instance_ = NULL;

MeshModel* MeshModel::New() const {
  return new MeshModel;
}

void MeshModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_meshname()) {
      if (meshname_ != &::google::protobuf::internal::kEmptyString) {
        meshname_->clear();
      }
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    culling_ = false;
  }
  materials_.Clear();
  vertexcoordinates_.Clear();
  normals_.Clear();
  tangents_.Clear();
  binormals_.Clear();
  texturecoordinates_.Clear();
  trianglefaceindices_.Clear();
  materialindices_.Clear();
  normalindices_.Clear();
  texturecoordinatesindices_.Clear();
  materialnames_.Clear();
  materialtodiffusetexturemapping_.Clear();
  materialtonormaltexturemapping_.Clear();
  materialtospeculartexturemapping_.Clear();
  materialtofaceindices_.Clear();
  materialtotransparenttexturemapping_.Clear();
  materialtoglossytexturemapping_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeshModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string meshName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meshname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meshname().data(), this->meshname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_materials;
        break;
      }

      // repeated .SmartBodyBinary.Material materials = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_materials;
        if (input->ExpectTag(29)) goto parse_vertexCoordinates;
        break;
      }

      // repeated float vertexCoordinates = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vertexCoordinates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_vertexcoordinates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vertexcoordinates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_vertexCoordinates;
        if (input->ExpectTag(37)) goto parse_normals;
        break;
      }

      // repeated float normals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_normals())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_normals())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_normals;
        if (input->ExpectTag(45)) goto parse_tangents;
        break;
      }

      // repeated float tangents = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tangents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_tangents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tangents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_tangents;
        if (input->ExpectTag(53)) goto parse_binormals;
        break;
      }

      // repeated float binormals = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_binormals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_binormals())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_binormals())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_binormals;
        if (input->ExpectTag(61)) goto parse_textureCoordinates;
        break;
      }

      // repeated float textureCoordinates = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_textureCoordinates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_texturecoordinates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_texturecoordinates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_textureCoordinates;
        if (input->ExpectTag(64)) goto parse_triangleFaceIndices;
        break;
      }

      // repeated int32 triangleFaceIndices = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triangleFaceIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_trianglefaceindices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trianglefaceindices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_triangleFaceIndices;
        if (input->ExpectTag(72)) goto parse_materialIndices;
        break;
      }

      // repeated int32 materialIndices = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_materialindices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_materialindices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_materialIndices;
        if (input->ExpectTag(80)) goto parse_normalIndices;
        break;
      }

      // repeated int32 normalIndices = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_normalindices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_normalindices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_normalIndices;
        if (input->ExpectTag(88)) goto parse_textureCoordinatesIndices;
        break;
      }

      // repeated int32 textureCoordinatesIndices = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textureCoordinatesIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_texturecoordinatesindices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_texturecoordinatesindices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_textureCoordinatesIndices;
        if (input->ExpectTag(96)) goto parse_culling;
        break;
      }

      // required bool culling = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_culling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &culling_)));
          set_has_culling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_materialNames;
        break;
      }

      // repeated string materialNames = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materialNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_materialnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->materialnames(this->materialnames_size() - 1).data(),
            this->materialnames(this->materialnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_materialNames;
        if (input->ExpectTag(114)) goto parse_materialToDiffuseTextureMapping;
        break;
      }

      // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materialToDiffuseTextureMapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialtodiffusetexturemapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_materialToDiffuseTextureMapping;
        if (input->ExpectTag(122)) goto parse_materialToNormalTextureMapping;
        break;
      }

      // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materialToNormalTextureMapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialtonormaltexturemapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_materialToNormalTextureMapping;
        if (input->ExpectTag(130)) goto parse_materialToSpecularTextureMapping;
        break;
      }

      // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materialToSpecularTextureMapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialtospeculartexturemapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_materialToSpecularTextureMapping;
        if (input->ExpectTag(138)) goto parse_materialToFaceIndices;
        break;
      }

      // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materialToFaceIndices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialtofaceindices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_materialToFaceIndices;
        if (input->ExpectTag(146)) goto parse_materialToTransparentTextureMapping;
        break;
      }

      // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materialToTransparentTextureMapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialtotransparenttexturemapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_materialToTransparentTextureMapping;
        if (input->ExpectTag(154)) goto parse_materialToGlossyTextureMapping;
        break;
      }

      // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materialToGlossyTextureMapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialtoglossytexturemapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_materialToGlossyTextureMapping;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeshModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string meshName = 1;
  if (has_meshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meshname().data(), this->meshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->meshname(), output);
  }

  // repeated .SmartBodyBinary.Material materials = 2;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->materials(i), output);
  }

  // repeated float vertexCoordinates = 3;
  for (int i = 0; i < this->vertexcoordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->vertexcoordinates(i), output);
  }

  // repeated float normals = 4;
  for (int i = 0; i < this->normals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->normals(i), output);
  }

  // repeated float tangents = 5;
  for (int i = 0; i < this->tangents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->tangents(i), output);
  }

  // repeated float binormals = 6;
  for (int i = 0; i < this->binormals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->binormals(i), output);
  }

  // repeated float textureCoordinates = 7;
  for (int i = 0; i < this->texturecoordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->texturecoordinates(i), output);
  }

  // repeated int32 triangleFaceIndices = 8;
  for (int i = 0; i < this->trianglefaceindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->trianglefaceindices(i), output);
  }

  // repeated int32 materialIndices = 9;
  for (int i = 0; i < this->materialindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->materialindices(i), output);
  }

  // repeated int32 normalIndices = 10;
  for (int i = 0; i < this->normalindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->normalindices(i), output);
  }

  // repeated int32 textureCoordinatesIndices = 11;
  for (int i = 0; i < this->texturecoordinatesindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->texturecoordinatesindices(i), output);
  }

  // required bool culling = 12;
  if (has_culling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->culling(), output);
  }

  // repeated string materialNames = 13;
  for (int i = 0; i < this->materialnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->materialnames(i).data(), this->materialnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->materialnames(i), output);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  for (int i = 0; i < this->materialtodiffusetexturemapping_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->materialtodiffusetexturemapping(i), output);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  for (int i = 0; i < this->materialtonormaltexturemapping_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->materialtonormaltexturemapping(i), output);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  for (int i = 0; i < this->materialtospeculartexturemapping_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->materialtospeculartexturemapping(i), output);
  }

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  for (int i = 0; i < this->materialtofaceindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->materialtofaceindices(i), output);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  for (int i = 0; i < this->materialtotransparenttexturemapping_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->materialtotransparenttexturemapping(i), output);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  for (int i = 0; i < this->materialtoglossytexturemapping_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->materialtoglossytexturemapping(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeshModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string meshName = 1;
  if (has_meshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meshname().data(), this->meshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->meshname(), target);
  }

  // repeated .SmartBodyBinary.Material materials = 2;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->materials(i), target);
  }

  // repeated float vertexCoordinates = 3;
  for (int i = 0; i < this->vertexcoordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->vertexcoordinates(i), target);
  }

  // repeated float normals = 4;
  for (int i = 0; i < this->normals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->normals(i), target);
  }

  // repeated float tangents = 5;
  for (int i = 0; i < this->tangents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->tangents(i), target);
  }

  // repeated float binormals = 6;
  for (int i = 0; i < this->binormals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->binormals(i), target);
  }

  // repeated float textureCoordinates = 7;
  for (int i = 0; i < this->texturecoordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->texturecoordinates(i), target);
  }

  // repeated int32 triangleFaceIndices = 8;
  for (int i = 0; i < this->trianglefaceindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->trianglefaceindices(i), target);
  }

  // repeated int32 materialIndices = 9;
  for (int i = 0; i < this->materialindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->materialindices(i), target);
  }

  // repeated int32 normalIndices = 10;
  for (int i = 0; i < this->normalindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->normalindices(i), target);
  }

  // repeated int32 textureCoordinatesIndices = 11;
  for (int i = 0; i < this->texturecoordinatesindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->texturecoordinatesindices(i), target);
  }

  // required bool culling = 12;
  if (has_culling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->culling(), target);
  }

  // repeated string materialNames = 13;
  for (int i = 0; i < this->materialnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialnames(i).data(), this->materialnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->materialnames(i), target);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  for (int i = 0; i < this->materialtodiffusetexturemapping_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->materialtodiffusetexturemapping(i), target);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  for (int i = 0; i < this->materialtonormaltexturemapping_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->materialtonormaltexturemapping(i), target);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  for (int i = 0; i < this->materialtospeculartexturemapping_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->materialtospeculartexturemapping(i), target);
  }

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  for (int i = 0; i < this->materialtofaceindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->materialtofaceindices(i), target);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  for (int i = 0; i < this->materialtotransparenttexturemapping_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->materialtotransparenttexturemapping(i), target);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  for (int i = 0; i < this->materialtoglossytexturemapping_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->materialtoglossytexturemapping(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeshModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string meshName = 1;
    if (has_meshname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meshname());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // required bool culling = 12;
    if (has_culling()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SmartBodyBinary.Material materials = 2;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  // repeated float vertexCoordinates = 3;
  {
    int data_size = 0;
    data_size = 4 * this->vertexcoordinates_size();
    total_size += 1 * this->vertexcoordinates_size() + data_size;
  }

  // repeated float normals = 4;
  {
    int data_size = 0;
    data_size = 4 * this->normals_size();
    total_size += 1 * this->normals_size() + data_size;
  }

  // repeated float tangents = 5;
  {
    int data_size = 0;
    data_size = 4 * this->tangents_size();
    total_size += 1 * this->tangents_size() + data_size;
  }

  // repeated float binormals = 6;
  {
    int data_size = 0;
    data_size = 4 * this->binormals_size();
    total_size += 1 * this->binormals_size() + data_size;
  }

  // repeated float textureCoordinates = 7;
  {
    int data_size = 0;
    data_size = 4 * this->texturecoordinates_size();
    total_size += 1 * this->texturecoordinates_size() + data_size;
  }

  // repeated int32 triangleFaceIndices = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->trianglefaceindices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trianglefaceindices(i));
    }
    total_size += 1 * this->trianglefaceindices_size() + data_size;
  }

  // repeated int32 materialIndices = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->materialindices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->materialindices(i));
    }
    total_size += 1 * this->materialindices_size() + data_size;
  }

  // repeated int32 normalIndices = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->normalindices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->normalindices(i));
    }
    total_size += 1 * this->normalindices_size() + data_size;
  }

  // repeated int32 textureCoordinatesIndices = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->texturecoordinatesindices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->texturecoordinatesindices(i));
    }
    total_size += 1 * this->texturecoordinatesindices_size() + data_size;
  }

  // repeated string materialNames = 13;
  total_size += 1 * this->materialnames_size();
  for (int i = 0; i < this->materialnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->materialnames(i));
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  total_size += 1 * this->materialtodiffusetexturemapping_size();
  for (int i = 0; i < this->materialtodiffusetexturemapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialtodiffusetexturemapping(i));
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  total_size += 1 * this->materialtonormaltexturemapping_size();
  for (int i = 0; i < this->materialtonormaltexturemapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialtonormaltexturemapping(i));
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  total_size += 2 * this->materialtospeculartexturemapping_size();
  for (int i = 0; i < this->materialtospeculartexturemapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialtospeculartexturemapping(i));
  }

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  total_size += 2 * this->materialtofaceindices_size();
  for (int i = 0; i < this->materialtofaceindices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialtofaceindices(i));
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  total_size += 2 * this->materialtotransparenttexturemapping_size();
  for (int i = 0; i < this->materialtotransparenttexturemapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialtotransparenttexturemapping(i));
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  total_size += 2 * this->materialtoglossytexturemapping_size();
  for (int i = 0; i < this->materialtoglossytexturemapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialtoglossytexturemapping(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeshModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeshModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeshModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeshModel::MergeFrom(const MeshModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  vertexcoordinates_.MergeFrom(from.vertexcoordinates_);
  normals_.MergeFrom(from.normals_);
  tangents_.MergeFrom(from.tangents_);
  binormals_.MergeFrom(from.binormals_);
  texturecoordinates_.MergeFrom(from.texturecoordinates_);
  trianglefaceindices_.MergeFrom(from.trianglefaceindices_);
  materialindices_.MergeFrom(from.materialindices_);
  normalindices_.MergeFrom(from.normalindices_);
  texturecoordinatesindices_.MergeFrom(from.texturecoordinatesindices_);
  materialnames_.MergeFrom(from.materialnames_);
  materialtodiffusetexturemapping_.MergeFrom(from.materialtodiffusetexturemapping_);
  materialtonormaltexturemapping_.MergeFrom(from.materialtonormaltexturemapping_);
  materialtospeculartexturemapping_.MergeFrom(from.materialtospeculartexturemapping_);
  materialtofaceindices_.MergeFrom(from.materialtofaceindices_);
  materialtotransparenttexturemapping_.MergeFrom(from.materialtotransparenttexturemapping_);
  materialtoglossytexturemapping_.MergeFrom(from.materialtoglossytexturemapping_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meshname()) {
      set_meshname(from.meshname());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_culling()) {
      set_culling(from.culling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeshModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshModel::CopyFrom(const MeshModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000801) != 0x00000801) return false;

  for (int i = 0; i < materials_size(); i++) {
    if (!this->materials(i).IsInitialized()) return false;
  }
  for (int i = 0; i < materialtodiffusetexturemapping_size(); i++) {
    if (!this->materialtodiffusetexturemapping(i).IsInitialized()) return false;
  }
  for (int i = 0; i < materialtonormaltexturemapping_size(); i++) {
    if (!this->materialtonormaltexturemapping(i).IsInitialized()) return false;
  }
  for (int i = 0; i < materialtospeculartexturemapping_size(); i++) {
    if (!this->materialtospeculartexturemapping(i).IsInitialized()) return false;
  }
  for (int i = 0; i < materialtofaceindices_size(); i++) {
    if (!this->materialtofaceindices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < materialtotransparenttexturemapping_size(); i++) {
    if (!this->materialtotransparenttexturemapping(i).IsInitialized()) return false;
  }
  for (int i = 0; i < materialtoglossytexturemapping_size(); i++) {
    if (!this->materialtoglossytexturemapping(i).IsInitialized()) return false;
  }
  return true;
}

void MeshModel::Swap(MeshModel* other) {
  if (other != this) {
    std::swap(meshname_, other->meshname_);
    materials_.Swap(&other->materials_);
    vertexcoordinates_.Swap(&other->vertexcoordinates_);
    normals_.Swap(&other->normals_);
    tangents_.Swap(&other->tangents_);
    binormals_.Swap(&other->binormals_);
    texturecoordinates_.Swap(&other->texturecoordinates_);
    trianglefaceindices_.Swap(&other->trianglefaceindices_);
    materialindices_.Swap(&other->materialindices_);
    normalindices_.Swap(&other->normalindices_);
    texturecoordinatesindices_.Swap(&other->texturecoordinatesindices_);
    std::swap(culling_, other->culling_);
    materialnames_.Swap(&other->materialnames_);
    materialtodiffusetexturemapping_.Swap(&other->materialtodiffusetexturemapping_);
    materialtonormaltexturemapping_.Swap(&other->materialtonormaltexturemapping_);
    materialtospeculartexturemapping_.Swap(&other->materialtospeculartexturemapping_);
    materialtofaceindices_.Swap(&other->materialtofaceindices_);
    materialtotransparenttexturemapping_.Swap(&other->materialtotransparenttexturemapping_);
    materialtoglossytexturemapping_.Swap(&other->materialtoglossytexturemapping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeshModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeshModel_descriptor_;
  metadata.reflection = MeshModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkinWeight::kSourceMeshNameFieldNumber;
const int SkinWeight::kInfluenceJointNamesFieldNumber;
const int SkinWeight::kBindWeightsFieldNumber;
const int SkinWeight::kBindPoseMatriceFieldNumber;
const int SkinWeight::kBindShapeMatrixFieldNumber;
const int SkinWeight::kNumberOfInfluenceJointsFieldNumber;
const int SkinWeight::kWeightIndicesFieldNumber;
const int SkinWeight::kJointNameIndicesFieldNumber;
#endif  // !_MSC_VER

SkinWeight::SkinWeight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkinWeight::InitAsDefaultInstance() {
}

SkinWeight::SkinWeight(const SkinWeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkinWeight::SharedCtor() {
  _cached_size_ = 0;
  sourcemeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkinWeight::~SkinWeight() {
  SharedDtor();
}

void SkinWeight::SharedDtor() {
  if (sourcemeshname_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcemeshname_;
  }
  if (this != default_instance_) {
  }
}

void SkinWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkinWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkinWeight_descriptor_;
}

const SkinWeight& SkinWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbmesh_2eproto();
  return *default_instance_;
}

SkinWeight* SkinWeight::default_instance_ = NULL;

SkinWeight* SkinWeight::New() const {
  return new SkinWeight;
}

void SkinWeight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sourcemeshname()) {
      if (sourcemeshname_ != &::google::protobuf::internal::kEmptyString) {
        sourcemeshname_->clear();
      }
    }
  }
  influencejointnames_.Clear();
  bindweights_.Clear();
  bindposematrice_.Clear();
  bindshapematrix_.Clear();
  numberofinfluencejoints_.Clear();
  weightindices_.Clear();
  jointnameindices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkinWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sourceMeshName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcemeshname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcemeshname().data(), this->sourcemeshname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_influenceJointNames;
        break;
      }

      // repeated string influenceJointNames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_influenceJointNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_influencejointnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->influencejointnames(this->influencejointnames_size() - 1).data(),
            this->influencejointnames(this->influencejointnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_influenceJointNames;
        if (input->ExpectTag(29)) goto parse_bindWeights;
        break;
      }

      // repeated float bindWeights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bindWeights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_bindweights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bindweights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bindWeights;
        if (input->ExpectTag(37)) goto parse_bindPoseMatrice;
        break;
      }

      // repeated float bindPoseMatrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bindPoseMatrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_bindposematrice())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bindposematrice())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_bindPoseMatrice;
        if (input->ExpectTag(45)) goto parse_bindShapeMatrix;
        break;
      }

      // repeated float bindShapeMatrix = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bindShapeMatrix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_bindshapematrix())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bindshapematrix())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bindShapeMatrix;
        if (input->ExpectTag(48)) goto parse_numberOfInfluenceJoints;
        break;
      }

      // repeated int32 numberOfInfluenceJoints = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfInfluenceJoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_numberofinfluencejoints())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_numberofinfluencejoints())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numberOfInfluenceJoints;
        if (input->ExpectTag(56)) goto parse_weightIndices;
        break;
      }

      // repeated int32 weightIndices = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weightIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_weightindices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weightindices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weightIndices;
        if (input->ExpectTag(64)) goto parse_jointNameIndices;
        break;
      }

      // repeated int32 jointNameIndices = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointNameIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_jointnameindices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jointnameindices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jointNameIndices;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkinWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sourceMeshName = 1;
  if (has_sourcemeshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcemeshname().data(), this->sourcemeshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sourcemeshname(), output);
  }

  // repeated string influenceJointNames = 2;
  for (int i = 0; i < this->influencejointnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->influencejointnames(i).data(), this->influencejointnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->influencejointnames(i), output);
  }

  // repeated float bindWeights = 3;
  for (int i = 0; i < this->bindweights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->bindweights(i), output);
  }

  // repeated float bindPoseMatrice = 4;
  for (int i = 0; i < this->bindposematrice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->bindposematrice(i), output);
  }

  // repeated float bindShapeMatrix = 5;
  for (int i = 0; i < this->bindshapematrix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->bindshapematrix(i), output);
  }

  // repeated int32 numberOfInfluenceJoints = 6;
  for (int i = 0; i < this->numberofinfluencejoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->numberofinfluencejoints(i), output);
  }

  // repeated int32 weightIndices = 7;
  for (int i = 0; i < this->weightindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->weightindices(i), output);
  }

  // repeated int32 jointNameIndices = 8;
  for (int i = 0; i < this->jointnameindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->jointnameindices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkinWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sourceMeshName = 1;
  if (has_sourcemeshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcemeshname().data(), this->sourcemeshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcemeshname(), target);
  }

  // repeated string influenceJointNames = 2;
  for (int i = 0; i < this->influencejointnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->influencejointnames(i).data(), this->influencejointnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->influencejointnames(i), target);
  }

  // repeated float bindWeights = 3;
  for (int i = 0; i < this->bindweights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->bindweights(i), target);
  }

  // repeated float bindPoseMatrice = 4;
  for (int i = 0; i < this->bindposematrice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->bindposematrice(i), target);
  }

  // repeated float bindShapeMatrix = 5;
  for (int i = 0; i < this->bindshapematrix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->bindshapematrix(i), target);
  }

  // repeated int32 numberOfInfluenceJoints = 6;
  for (int i = 0; i < this->numberofinfluencejoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->numberofinfluencejoints(i), target);
  }

  // repeated int32 weightIndices = 7;
  for (int i = 0; i < this->weightindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->weightindices(i), target);
  }

  // repeated int32 jointNameIndices = 8;
  for (int i = 0; i < this->jointnameindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->jointnameindices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkinWeight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sourceMeshName = 1;
    if (has_sourcemeshname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcemeshname());
    }

  }
  // repeated string influenceJointNames = 2;
  total_size += 1 * this->influencejointnames_size();
  for (int i = 0; i < this->influencejointnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->influencejointnames(i));
  }

  // repeated float bindWeights = 3;
  {
    int data_size = 0;
    data_size = 4 * this->bindweights_size();
    total_size += 1 * this->bindweights_size() + data_size;
  }

  // repeated float bindPoseMatrice = 4;
  {
    int data_size = 0;
    data_size = 4 * this->bindposematrice_size();
    total_size += 1 * this->bindposematrice_size() + data_size;
  }

  // repeated float bindShapeMatrix = 5;
  {
    int data_size = 0;
    data_size = 4 * this->bindshapematrix_size();
    total_size += 1 * this->bindshapematrix_size() + data_size;
  }

  // repeated int32 numberOfInfluenceJoints = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->numberofinfluencejoints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->numberofinfluencejoints(i));
    }
    total_size += 1 * this->numberofinfluencejoints_size() + data_size;
  }

  // repeated int32 weightIndices = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->weightindices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weightindices(i));
    }
    total_size += 1 * this->weightindices_size() + data_size;
  }

  // repeated int32 jointNameIndices = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->jointnameindices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jointnameindices(i));
    }
    total_size += 1 * this->jointnameindices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkinWeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkinWeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkinWeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkinWeight::MergeFrom(const SkinWeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  influencejointnames_.MergeFrom(from.influencejointnames_);
  bindweights_.MergeFrom(from.bindweights_);
  bindposematrice_.MergeFrom(from.bindposematrice_);
  bindshapematrix_.MergeFrom(from.bindshapematrix_);
  numberofinfluencejoints_.MergeFrom(from.numberofinfluencejoints_);
  weightindices_.MergeFrom(from.weightindices_);
  jointnameindices_.MergeFrom(from.jointnameindices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcemeshname()) {
      set_sourcemeshname(from.sourcemeshname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkinWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkinWeight::CopyFrom(const SkinWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkinWeight::Swap(SkinWeight* other) {
  if (other != this) {
    std::swap(sourcemeshname_, other->sourcemeshname_);
    influencejointnames_.Swap(&other->influencejointnames_);
    bindweights_.Swap(&other->bindweights_);
    bindposematrice_.Swap(&other->bindposematrice_);
    bindshapematrix_.Swap(&other->bindshapematrix_);
    numberofinfluencejoints_.Swap(&other->numberofinfluencejoints_);
    weightindices_.Swap(&other->weightindices_);
    jointnameindices_.Swap(&other->jointnameindices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkinWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkinWeight_descriptor_;
  metadata.reflection = SkinWeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StaticMesh::kStaticMeshNameFieldNumber;
const int StaticMesh::kMeshModelsFieldNumber;
#endif  // !_MSC_VER

StaticMesh::StaticMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StaticMesh::InitAsDefaultInstance() {
}

StaticMesh::StaticMesh(const StaticMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StaticMesh::SharedCtor() {
  _cached_size_ = 0;
  staticmeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticMesh::~StaticMesh() {
  SharedDtor();
}

void StaticMesh::SharedDtor() {
  if (staticmeshname_ != &::google::protobuf::internal::kEmptyString) {
    delete staticmeshname_;
  }
  if (this != default_instance_) {
  }
}

void StaticMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticMesh_descriptor_;
}

const StaticMesh& StaticMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbmesh_2eproto();
  return *default_instance_;
}

StaticMesh* StaticMesh::default_instance_ = NULL;

StaticMesh* StaticMesh::New() const {
  return new StaticMesh;
}

void StaticMesh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_staticmeshname()) {
      if (staticmeshname_ != &::google::protobuf::internal::kEmptyString) {
        staticmeshname_->clear();
      }
    }
  }
  meshmodels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaticMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string staticMeshName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_staticmeshname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->staticmeshname().data(), this->staticmeshname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_meshModels;
        break;
      }

      // repeated .SmartBodyBinary.MeshModel meshModels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meshModels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meshmodels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_meshModels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StaticMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string staticMeshName = 1;
  if (has_staticmeshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->staticmeshname().data(), this->staticmeshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->staticmeshname(), output);
  }

  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  for (int i = 0; i < this->meshmodels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->meshmodels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StaticMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string staticMeshName = 1;
  if (has_staticmeshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->staticmeshname().data(), this->staticmeshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->staticmeshname(), target);
  }

  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  for (int i = 0; i < this->meshmodels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->meshmodels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StaticMesh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string staticMeshName = 1;
    if (has_staticmeshname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->staticmeshname());
    }

  }
  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  total_size += 1 * this->meshmodels_size();
  for (int i = 0; i < this->meshmodels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meshmodels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaticMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaticMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaticMesh::MergeFrom(const StaticMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  meshmodels_.MergeFrom(from.meshmodels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_staticmeshname()) {
      set_staticmeshname(from.staticmeshname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaticMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticMesh::CopyFrom(const StaticMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticMesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < meshmodels_size(); i++) {
    if (!this->meshmodels(i).IsInitialized()) return false;
  }
  return true;
}

void StaticMesh::Swap(StaticMesh* other) {
  if (other != this) {
    std::swap(staticmeshname_, other->staticmeshname_);
    meshmodels_.Swap(&other->meshmodels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaticMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticMesh_descriptor_;
  metadata.reflection = StaticMesh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeformableMesh::kDeformableMeshNameFieldNumber;
const int DeformableMesh::kStaticMeshFieldNumber;
const int DeformableMesh::kSkinWeightsFieldNumber;
const int DeformableMesh::kMorphTargetsFieldNumber;
#endif  // !_MSC_VER

DeformableMesh::DeformableMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeformableMesh::InitAsDefaultInstance() {
  staticmesh_ = const_cast< ::SmartBodyBinary::StaticMesh*>(&::SmartBodyBinary::StaticMesh::default_instance());
}

DeformableMesh::DeformableMesh(const DeformableMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeformableMesh::SharedCtor() {
  _cached_size_ = 0;
  deformablemeshname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  staticmesh_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeformableMesh::~DeformableMesh() {
  SharedDtor();
}

void DeformableMesh::SharedDtor() {
  if (deformablemeshname_ != &::google::protobuf::internal::kEmptyString) {
    delete deformablemeshname_;
  }
  if (this != default_instance_) {
    delete staticmesh_;
  }
}

void DeformableMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeformableMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeformableMesh_descriptor_;
}

const DeformableMesh& DeformableMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbmesh_2eproto();
  return *default_instance_;
}

DeformableMesh* DeformableMesh::default_instance_ = NULL;

DeformableMesh* DeformableMesh::New() const {
  return new DeformableMesh;
}

void DeformableMesh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deformablemeshname()) {
      if (deformablemeshname_ != &::google::protobuf::internal::kEmptyString) {
        deformablemeshname_->clear();
      }
    }
    if (has_staticmesh()) {
      if (staticmesh_ != NULL) staticmesh_->::SmartBodyBinary::StaticMesh::Clear();
    }
  }
  skinweights_.Clear();
  morphtargets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeformableMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string deformableMeshName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deformablemeshname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deformablemeshname().data(), this->deformablemeshname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_staticMesh;
        break;
      }

      // required .SmartBodyBinary.StaticMesh staticMesh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_staticMesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staticmesh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skinWeights;
        break;
      }

      // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skinWeights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skinweights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skinWeights;
        if (input->ExpectTag(34)) goto parse_morphTargets;
        break;
      }

      // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphTargets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_morphtargets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_morphTargets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeformableMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string deformableMeshName = 1;
  if (has_deformablemeshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deformablemeshname().data(), this->deformablemeshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->deformablemeshname(), output);
  }

  // required .SmartBodyBinary.StaticMesh staticMesh = 2;
  if (has_staticmesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->staticmesh(), output);
  }

  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  for (int i = 0; i < this->skinweights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skinweights(i), output);
  }

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  for (int i = 0; i < this->morphtargets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->morphtargets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeformableMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string deformableMeshName = 1;
  if (has_deformablemeshname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deformablemeshname().data(), this->deformablemeshname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deformablemeshname(), target);
  }

  // required .SmartBodyBinary.StaticMesh staticMesh = 2;
  if (has_staticmesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->staticmesh(), target);
  }

  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  for (int i = 0; i < this->skinweights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skinweights(i), target);
  }

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  for (int i = 0; i < this->morphtargets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->morphtargets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeformableMesh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string deformableMeshName = 1;
    if (has_deformablemeshname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deformablemeshname());
    }

    // required .SmartBodyBinary.StaticMesh staticMesh = 2;
    if (has_staticmesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staticmesh());
    }

  }
  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  total_size += 1 * this->skinweights_size();
  for (int i = 0; i < this->skinweights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skinweights(i));
  }

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  total_size += 1 * this->morphtargets_size();
  for (int i = 0; i < this->morphtargets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->morphtargets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeformableMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeformableMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeformableMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeformableMesh::MergeFrom(const DeformableMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  skinweights_.MergeFrom(from.skinweights_);
  morphtargets_.MergeFrom(from.morphtargets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deformablemeshname()) {
      set_deformablemeshname(from.deformablemeshname());
    }
    if (from.has_staticmesh()) {
      mutable_staticmesh()->::SmartBodyBinary::StaticMesh::MergeFrom(from.staticmesh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeformableMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeformableMesh::CopyFrom(const DeformableMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeformableMesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_staticmesh()) {
    if (!this->staticmesh().IsInitialized()) return false;
  }
  for (int i = 0; i < skinweights_size(); i++) {
    if (!this->skinweights(i).IsInitialized()) return false;
  }
  for (int i = 0; i < morphtargets_size(); i++) {
    if (!this->morphtargets(i).IsInitialized()) return false;
  }
  return true;
}

void DeformableMesh::Swap(DeformableMesh* other) {
  if (other != this) {
    std::swap(deformablemeshname_, other->deformablemeshname_);
    std::swap(staticmesh_, other->staticmesh_);
    skinweights_.Swap(&other->skinweights_);
    morphtargets_.Swap(&other->morphtargets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeformableMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeformableMesh_descriptor_;
  metadata.reflection = DeformableMesh_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

// @@protoc_insertion_point(global_scope)
