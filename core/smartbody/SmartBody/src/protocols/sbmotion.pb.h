// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmotion.proto

#ifndef PROTOBUF_sbmotion_2eproto__INCLUDED
#define PROTOBUF_sbmotion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SmartBodyBinary {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sbmotion_2eproto();
void protobuf_AssignDesc_sbmotion_2eproto();
void protobuf_ShutdownFile_sbmotion_2eproto();

class Motion;
class Motion_MetaData;

// ===================================================================

class Motion_MetaData : public ::google::protobuf::Message {
 public:
  Motion_MetaData();
  virtual ~Motion_MetaData();

  Motion_MetaData(const Motion_MetaData& from);

  inline Motion_MetaData& operator=(const Motion_MetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Motion_MetaData& default_instance();

  void Swap(Motion_MetaData* other);

  // implements Message ----------------------------------------------

  Motion_MetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Motion_MetaData& from);
  void MergeFrom(const Motion_MetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string metaDataName = 1;
  inline bool has_metadataname() const;
  inline void clear_metadataname();
  static const int kMetaDataNameFieldNumber = 1;
  inline const ::std::string& metadataname() const;
  inline void set_metadataname(const ::std::string& value);
  inline void set_metadataname(const char* value);
  inline void set_metadataname(const char* value, size_t size);
  inline ::std::string* mutable_metadataname();
  inline ::std::string* release_metadataname();
  inline void set_allocated_metadataname(::std::string* metadataname);

  // required string metaDataValue = 2;
  inline bool has_metadatavalue() const;
  inline void clear_metadatavalue();
  static const int kMetaDataValueFieldNumber = 2;
  inline const ::std::string& metadatavalue() const;
  inline void set_metadatavalue(const ::std::string& value);
  inline void set_metadatavalue(const char* value);
  inline void set_metadatavalue(const char* value, size_t size);
  inline ::std::string* mutable_metadatavalue();
  inline ::std::string* release_metadatavalue();
  inline void set_allocated_metadatavalue(::std::string* metadatavalue);

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.Motion.MetaData)
 private:
  inline void set_has_metadataname();
  inline void clear_has_metadataname();
  inline void set_has_metadatavalue();
  inline void clear_has_metadatavalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* metadataname_;
  ::std::string* metadatavalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sbmotion_2eproto();
  friend void protobuf_AssignDesc_sbmotion_2eproto();
  friend void protobuf_ShutdownFile_sbmotion_2eproto();

  void InitAsDefaultInstance();
  static Motion_MetaData* default_instance_;
};
// -------------------------------------------------------------------

class Motion : public ::google::protobuf::Message {
 public:
  Motion();
  virtual ~Motion();

  Motion(const Motion& from);

  inline Motion& operator=(const Motion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Motion& default_instance();

  void Swap(Motion* other);

  // implements Message ----------------------------------------------

  Motion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Motion& from);
  void MergeFrom(const Motion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Motion_MetaData MetaData;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 numChannels = 2;
  inline bool has_numchannels() const;
  inline void clear_numchannels();
  static const int kNumChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 numchannels() const;
  inline void set_numchannels(::google::protobuf::int32 value);

  // repeated string channelName = 3;
  inline int channelname_size() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 3;
  inline const ::std::string& channelname(int index) const;
  inline ::std::string* mutable_channelname(int index);
  inline void set_channelname(int index, const ::std::string& value);
  inline void set_channelname(int index, const char* value);
  inline void set_channelname(int index, const char* value, size_t size);
  inline ::std::string* add_channelname();
  inline void add_channelname(const ::std::string& value);
  inline void add_channelname(const char* value);
  inline void add_channelname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channelname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channelname();

  // repeated int32 channelType = 4;
  inline int channeltype_size() const;
  inline void clear_channeltype();
  static const int kChannelTypeFieldNumber = 4;
  inline ::google::protobuf::int32 channeltype(int index) const;
  inline void set_channeltype(int index, ::google::protobuf::int32 value);
  inline void add_channeltype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      channeltype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_channeltype();

  // required int32 numFrames = 5;
  inline bool has_numframes() const;
  inline void clear_numframes();
  static const int kNumFramesFieldNumber = 5;
  inline ::google::protobuf::int32 numframes() const;
  inline void set_numframes(::google::protobuf::int32 value);

  // repeated float keyTimes = 6;
  inline int keytimes_size() const;
  inline void clear_keytimes();
  static const int kKeyTimesFieldNumber = 6;
  inline float keytimes(int index) const;
  inline void set_keytimes(int index, float value);
  inline void add_keytimes(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      keytimes() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_keytimes();

  // repeated float keyValues = 7;
  inline int keyvalues_size() const;
  inline void clear_keyvalues();
  static const int kKeyValuesFieldNumber = 7;
  inline float keyvalues(int index) const;
  inline void set_keyvalues(int index, float value);
  inline void add_keyvalues(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      keyvalues() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_keyvalues();

  // repeated float syncPoints = 8;
  inline int syncpoints_size() const;
  inline void clear_syncpoints();
  static const int kSyncPointsFieldNumber = 8;
  inline float syncpoints(int index) const;
  inline void set_syncpoints(int index, float value);
  inline void add_syncpoints(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      syncpoints() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_syncpoints();

  // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
  inline int metadata_size() const;
  inline void clear_metadata();
  static const int kMetaDataFieldNumber = 9;
  inline const ::SmartBodyBinary::Motion_MetaData& metadata(int index) const;
  inline ::SmartBodyBinary::Motion_MetaData* mutable_metadata(int index);
  inline ::SmartBodyBinary::Motion_MetaData* add_metadata();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >&
      metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.Motion)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_numchannels();
  inline void clear_has_numchannels();
  inline void set_has_numframes();
  inline void clear_has_numframes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channelname_;
  ::google::protobuf::int32 numchannels_;
  ::google::protobuf::int32 numframes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > channeltype_;
  ::google::protobuf::RepeatedField< float > keytimes_;
  ::google::protobuf::RepeatedField< float > keyvalues_;
  ::google::protobuf::RepeatedField< float > syncpoints_;
  ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData > metadata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_sbmotion_2eproto();
  friend void protobuf_AssignDesc_sbmotion_2eproto();
  friend void protobuf_ShutdownFile_sbmotion_2eproto();

  void InitAsDefaultInstance();
  static Motion* default_instance_;
};
// ===================================================================


// ===================================================================

// Motion_MetaData

// required string metaDataName = 1;
inline bool Motion_MetaData::has_metadataname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Motion_MetaData::set_has_metadataname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Motion_MetaData::clear_has_metadataname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Motion_MetaData::clear_metadataname() {
  if (metadataname_ != &::google::protobuf::internal::kEmptyString) {
    metadataname_->clear();
  }
  clear_has_metadataname();
}
inline const ::std::string& Motion_MetaData::metadataname() const {
  return *metadataname_;
}
inline void Motion_MetaData::set_metadataname(const ::std::string& value) {
  set_has_metadataname();
  if (metadataname_ == &::google::protobuf::internal::kEmptyString) {
    metadataname_ = new ::std::string;
  }
  metadataname_->assign(value);
}
inline void Motion_MetaData::set_metadataname(const char* value) {
  set_has_metadataname();
  if (metadataname_ == &::google::protobuf::internal::kEmptyString) {
    metadataname_ = new ::std::string;
  }
  metadataname_->assign(value);
}
inline void Motion_MetaData::set_metadataname(const char* value, size_t size) {
  set_has_metadataname();
  if (metadataname_ == &::google::protobuf::internal::kEmptyString) {
    metadataname_ = new ::std::string;
  }
  metadataname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Motion_MetaData::mutable_metadataname() {
  set_has_metadataname();
  if (metadataname_ == &::google::protobuf::internal::kEmptyString) {
    metadataname_ = new ::std::string;
  }
  return metadataname_;
}
inline ::std::string* Motion_MetaData::release_metadataname() {
  clear_has_metadataname();
  if (metadataname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = metadataname_;
    metadataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Motion_MetaData::set_allocated_metadataname(::std::string* metadataname) {
  if (metadataname_ != &::google::protobuf::internal::kEmptyString) {
    delete metadataname_;
  }
  if (metadataname) {
    set_has_metadataname();
    metadataname_ = metadataname;
  } else {
    clear_has_metadataname();
    metadataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string metaDataValue = 2;
inline bool Motion_MetaData::has_metadatavalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Motion_MetaData::set_has_metadatavalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Motion_MetaData::clear_has_metadatavalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Motion_MetaData::clear_metadatavalue() {
  if (metadatavalue_ != &::google::protobuf::internal::kEmptyString) {
    metadatavalue_->clear();
  }
  clear_has_metadatavalue();
}
inline const ::std::string& Motion_MetaData::metadatavalue() const {
  return *metadatavalue_;
}
inline void Motion_MetaData::set_metadatavalue(const ::std::string& value) {
  set_has_metadatavalue();
  if (metadatavalue_ == &::google::protobuf::internal::kEmptyString) {
    metadatavalue_ = new ::std::string;
  }
  metadatavalue_->assign(value);
}
inline void Motion_MetaData::set_metadatavalue(const char* value) {
  set_has_metadatavalue();
  if (metadatavalue_ == &::google::protobuf::internal::kEmptyString) {
    metadatavalue_ = new ::std::string;
  }
  metadatavalue_->assign(value);
}
inline void Motion_MetaData::set_metadatavalue(const char* value, size_t size) {
  set_has_metadatavalue();
  if (metadatavalue_ == &::google::protobuf::internal::kEmptyString) {
    metadatavalue_ = new ::std::string;
  }
  metadatavalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Motion_MetaData::mutable_metadatavalue() {
  set_has_metadatavalue();
  if (metadatavalue_ == &::google::protobuf::internal::kEmptyString) {
    metadatavalue_ = new ::std::string;
  }
  return metadatavalue_;
}
inline ::std::string* Motion_MetaData::release_metadatavalue() {
  clear_has_metadatavalue();
  if (metadatavalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = metadatavalue_;
    metadatavalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Motion_MetaData::set_allocated_metadatavalue(::std::string* metadatavalue) {
  if (metadatavalue_ != &::google::protobuf::internal::kEmptyString) {
    delete metadatavalue_;
  }
  if (metadatavalue) {
    set_has_metadatavalue();
    metadatavalue_ = metadatavalue;
  } else {
    clear_has_metadatavalue();
    metadatavalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Motion

// required string name = 1;
inline bool Motion::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Motion::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Motion::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Motion::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Motion::name() const {
  return *name_;
}
inline void Motion::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Motion::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Motion::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Motion::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Motion::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Motion::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 numChannels = 2;
inline bool Motion::has_numchannels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Motion::set_has_numchannels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Motion::clear_has_numchannels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Motion::clear_numchannels() {
  numchannels_ = 0;
  clear_has_numchannels();
}
inline ::google::protobuf::int32 Motion::numchannels() const {
  return numchannels_;
}
inline void Motion::set_numchannels(::google::protobuf::int32 value) {
  set_has_numchannels();
  numchannels_ = value;
}

// repeated string channelName = 3;
inline int Motion::channelname_size() const {
  return channelname_.size();
}
inline void Motion::clear_channelname() {
  channelname_.Clear();
}
inline const ::std::string& Motion::channelname(int index) const {
  return channelname_.Get(index);
}
inline ::std::string* Motion::mutable_channelname(int index) {
  return channelname_.Mutable(index);
}
inline void Motion::set_channelname(int index, const ::std::string& value) {
  channelname_.Mutable(index)->assign(value);
}
inline void Motion::set_channelname(int index, const char* value) {
  channelname_.Mutable(index)->assign(value);
}
inline void Motion::set_channelname(int index, const char* value, size_t size) {
  channelname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Motion::add_channelname() {
  return channelname_.Add();
}
inline void Motion::add_channelname(const ::std::string& value) {
  channelname_.Add()->assign(value);
}
inline void Motion::add_channelname(const char* value) {
  channelname_.Add()->assign(value);
}
inline void Motion::add_channelname(const char* value, size_t size) {
  channelname_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Motion::channelname() const {
  return channelname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Motion::mutable_channelname() {
  return &channelname_;
}

// repeated int32 channelType = 4;
inline int Motion::channeltype_size() const {
  return channeltype_.size();
}
inline void Motion::clear_channeltype() {
  channeltype_.Clear();
}
inline ::google::protobuf::int32 Motion::channeltype(int index) const {
  return channeltype_.Get(index);
}
inline void Motion::set_channeltype(int index, ::google::protobuf::int32 value) {
  channeltype_.Set(index, value);
}
inline void Motion::add_channeltype(::google::protobuf::int32 value) {
  channeltype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Motion::channeltype() const {
  return channeltype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Motion::mutable_channeltype() {
  return &channeltype_;
}

// required int32 numFrames = 5;
inline bool Motion::has_numframes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Motion::set_has_numframes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Motion::clear_has_numframes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Motion::clear_numframes() {
  numframes_ = 0;
  clear_has_numframes();
}
inline ::google::protobuf::int32 Motion::numframes() const {
  return numframes_;
}
inline void Motion::set_numframes(::google::protobuf::int32 value) {
  set_has_numframes();
  numframes_ = value;
}

// repeated float keyTimes = 6;
inline int Motion::keytimes_size() const {
  return keytimes_.size();
}
inline void Motion::clear_keytimes() {
  keytimes_.Clear();
}
inline float Motion::keytimes(int index) const {
  return keytimes_.Get(index);
}
inline void Motion::set_keytimes(int index, float value) {
  keytimes_.Set(index, value);
}
inline void Motion::add_keytimes(float value) {
  keytimes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Motion::keytimes() const {
  return keytimes_;
}
inline ::google::protobuf::RepeatedField< float >*
Motion::mutable_keytimes() {
  return &keytimes_;
}

// repeated float keyValues = 7;
inline int Motion::keyvalues_size() const {
  return keyvalues_.size();
}
inline void Motion::clear_keyvalues() {
  keyvalues_.Clear();
}
inline float Motion::keyvalues(int index) const {
  return keyvalues_.Get(index);
}
inline void Motion::set_keyvalues(int index, float value) {
  keyvalues_.Set(index, value);
}
inline void Motion::add_keyvalues(float value) {
  keyvalues_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Motion::keyvalues() const {
  return keyvalues_;
}
inline ::google::protobuf::RepeatedField< float >*
Motion::mutable_keyvalues() {
  return &keyvalues_;
}

// repeated float syncPoints = 8;
inline int Motion::syncpoints_size() const {
  return syncpoints_.size();
}
inline void Motion::clear_syncpoints() {
  syncpoints_.Clear();
}
inline float Motion::syncpoints(int index) const {
  return syncpoints_.Get(index);
}
inline void Motion::set_syncpoints(int index, float value) {
  syncpoints_.Set(index, value);
}
inline void Motion::add_syncpoints(float value) {
  syncpoints_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Motion::syncpoints() const {
  return syncpoints_;
}
inline ::google::protobuf::RepeatedField< float >*
Motion::mutable_syncpoints() {
  return &syncpoints_;
}

// repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
inline int Motion::metadata_size() const {
  return metadata_.size();
}
inline void Motion::clear_metadata() {
  metadata_.Clear();
}
inline const ::SmartBodyBinary::Motion_MetaData& Motion::metadata(int index) const {
  return metadata_.Get(index);
}
inline ::SmartBodyBinary::Motion_MetaData* Motion::mutable_metadata(int index) {
  return metadata_.Mutable(index);
}
inline ::SmartBodyBinary::Motion_MetaData* Motion::add_metadata() {
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >&
Motion::metadata() const {
  return metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >*
Motion::mutable_metadata() {
  return &metadata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sbmotion_2eproto__INCLUDED
