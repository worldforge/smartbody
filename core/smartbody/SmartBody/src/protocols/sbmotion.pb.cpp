// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmotion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sbmotion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SmartBodyBinary {

namespace {

const ::google::protobuf::Descriptor* Motion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Motion_MetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motion_MetaData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sbmotion_2eproto() {
  protobuf_AddDesc_sbmotion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sbmotion.proto");
  GOOGLE_CHECK(file != NULL);
  Motion_descriptor_ = file->message_type(0);
  static const int Motion_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, numchannels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, channeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, numframes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, keytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, keyvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, syncpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, metadata_),
  };
  Motion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motion_descriptor_,
      Motion::default_instance_,
      Motion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motion));
  Motion_MetaData_descriptor_ = Motion_descriptor_->nested_type(0);
  static const int Motion_MetaData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_MetaData, metadataname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_MetaData, metadatavalue_),
  };
  Motion_MetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motion_MetaData_descriptor_,
      Motion_MetaData::default_instance_,
      Motion_MetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_MetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_MetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motion_MetaData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sbmotion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motion_descriptor_, &Motion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motion_MetaData_descriptor_, &Motion_MetaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sbmotion_2eproto() {
  delete Motion::default_instance_;
  delete Motion_reflection_;
  delete Motion_MetaData::default_instance_;
  delete Motion_MetaData_reflection_;
}

void protobuf_AddDesc_sbmotion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016sbmotion.proto\022\017SmartBodyBinary\"\216\002\n\006Mo"
    "tion\022\014\n\004name\030\001 \002(\t\022\023\n\013numChannels\030\002 \002(\005\022"
    "\023\n\013channelName\030\003 \003(\t\022\023\n\013channelType\030\004 \003("
    "\005\022\021\n\tnumFrames\030\005 \002(\005\022\020\n\010keyTimes\030\006 \003(\002\022\021"
    "\n\tkeyValues\030\007 \003(\002\022\022\n\nsyncPoints\030\010 \003(\002\0222\n"
    "\010metaData\030\t \003(\0132 .SmartBodyBinary.Motion"
    ".MetaData\0327\n\010MetaData\022\024\n\014metaDataName\030\001 "
    "\002(\t\022\025\n\rmetaDataValue\030\002 \002(\t", 306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sbmotion.proto", &protobuf_RegisterTypes);
  Motion::default_instance_ = new Motion();
  Motion_MetaData::default_instance_ = new Motion_MetaData();
  Motion::default_instance_->InitAsDefaultInstance();
  Motion_MetaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sbmotion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sbmotion_2eproto {
  StaticDescriptorInitializer_sbmotion_2eproto() {
    protobuf_AddDesc_sbmotion_2eproto();
  }
} static_descriptor_initializer_sbmotion_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Motion_MetaData::kMetaDataNameFieldNumber;
const int Motion_MetaData::kMetaDataValueFieldNumber;
#endif  // !_MSC_VER

Motion_MetaData::Motion_MetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Motion_MetaData::InitAsDefaultInstance() {
}

Motion_MetaData::Motion_MetaData(const Motion_MetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Motion_MetaData::SharedCtor() {
  _cached_size_ = 0;
  metadataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metadatavalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motion_MetaData::~Motion_MetaData() {
  SharedDtor();
}

void Motion_MetaData::SharedDtor() {
  if (metadataname_ != &::google::protobuf::internal::kEmptyString) {
    delete metadataname_;
  }
  if (metadatavalue_ != &::google::protobuf::internal::kEmptyString) {
    delete metadatavalue_;
  }
  if (this != default_instance_) {
  }
}

void Motion_MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motion_MetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motion_MetaData_descriptor_;
}

const Motion_MetaData& Motion_MetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbmotion_2eproto();
  return *default_instance_;
}

Motion_MetaData* Motion_MetaData::default_instance_ = NULL;

Motion_MetaData* Motion_MetaData::New() const {
  return new Motion_MetaData;
}

void Motion_MetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadataname()) {
      if (metadataname_ != &::google::protobuf::internal::kEmptyString) {
        metadataname_->clear();
      }
    }
    if (has_metadatavalue()) {
      if (metadatavalue_ != &::google::protobuf::internal::kEmptyString) {
        metadatavalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motion_MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string metaDataName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metadataname().data(), this->metadataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metaDataValue;
        break;
      }

      // required string metaDataValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaDataValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadatavalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metadatavalue().data(), this->metadatavalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Motion_MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string metaDataName = 1;
  if (has_metadataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metadataname().data(), this->metadataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->metadataname(), output);
  }

  // required string metaDataValue = 2;
  if (has_metadatavalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metadatavalue().data(), this->metadatavalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->metadatavalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Motion_MetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string metaDataName = 1;
  if (has_metadataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metadataname().data(), this->metadataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metadataname(), target);
  }

  // required string metaDataValue = 2;
  if (has_metadatavalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metadatavalue().data(), this->metadatavalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metadatavalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Motion_MetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string metaDataName = 1;
    if (has_metadataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metadataname());
    }

    // required string metaDataValue = 2;
    if (has_metadatavalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metadatavalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motion_MetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motion_MetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motion_MetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motion_MetaData::MergeFrom(const Motion_MetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadataname()) {
      set_metadataname(from.metadataname());
    }
    if (from.has_metadatavalue()) {
      set_metadatavalue(from.metadatavalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motion_MetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_MetaData::CopyFrom(const Motion_MetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_MetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Motion_MetaData::Swap(Motion_MetaData* other) {
  if (other != this) {
    std::swap(metadataname_, other->metadataname_);
    std::swap(metadatavalue_, other->metadatavalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motion_MetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motion_MetaData_descriptor_;
  metadata.reflection = Motion_MetaData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Motion::kNameFieldNumber;
const int Motion::kNumChannelsFieldNumber;
const int Motion::kChannelNameFieldNumber;
const int Motion::kChannelTypeFieldNumber;
const int Motion::kNumFramesFieldNumber;
const int Motion::kKeyTimesFieldNumber;
const int Motion::kKeyValuesFieldNumber;
const int Motion::kSyncPointsFieldNumber;
const int Motion::kMetaDataFieldNumber;
#endif  // !_MSC_VER

Motion::Motion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Motion::InitAsDefaultInstance() {
}

Motion::Motion(const Motion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Motion::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numchannels_ = 0;
  numframes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motion::~Motion() {
  SharedDtor();
}

void Motion::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Motion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motion_descriptor_;
}

const Motion& Motion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sbmotion_2eproto();
  return *default_instance_;
}

Motion* Motion::default_instance_ = NULL;

Motion* Motion::New() const {
  return new Motion;
}

void Motion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    numchannels_ = 0;
    numframes_ = 0;
  }
  channelname_.Clear();
  channeltype_.Clear();
  keytimes_.Clear();
  keyvalues_.Clear();
  syncpoints_.Clear();
  metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numChannels;
        break;
      }

      // required int32 numChannels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numChannels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numchannels_)));
          set_has_numchannels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelName;
        break;
      }

      // repeated string channelName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelname(this->channelname_size() - 1).data(),
            this->channelname(this->channelname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelName;
        if (input->ExpectTag(32)) goto parse_channelType;
        break;
      }

      // repeated int32 channelType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_channeltype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_channeltype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channelType;
        if (input->ExpectTag(40)) goto parse_numFrames;
        break;
      }

      // required int32 numFrames = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numFrames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numframes_)));
          set_has_numframes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_keyTimes;
        break;
      }

      // repeated float keyTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_keyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_keytimes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_keytimes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_keyTimes;
        if (input->ExpectTag(61)) goto parse_keyValues;
        break;
      }

      // repeated float keyValues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_keyValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_keyvalues())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_keyvalues())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_keyValues;
        if (input->ExpectTag(69)) goto parse_syncPoints;
        break;
      }

      // repeated float syncPoints = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_syncPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_syncpoints())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_syncpoints())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_syncPoints;
        if (input->ExpectTag(74)) goto parse_metaData;
        break;
      }

      // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_metaData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Motion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 numChannels = 2;
  if (has_numchannels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numchannels(), output);
  }

  // repeated string channelName = 3;
  for (int i = 0; i < this->channelname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->channelname(i).data(), this->channelname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelname(i), output);
  }

  // repeated int32 channelType = 4;
  for (int i = 0; i < this->channeltype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->channeltype(i), output);
  }

  // required int32 numFrames = 5;
  if (has_numframes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numframes(), output);
  }

  // repeated float keyTimes = 6;
  for (int i = 0; i < this->keytimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->keytimes(i), output);
  }

  // repeated float keyValues = 7;
  for (int i = 0; i < this->keyvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->keyvalues(i), output);
  }

  // repeated float syncPoints = 8;
  for (int i = 0; i < this->syncpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->syncpoints(i), output);
  }

  // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->metadata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Motion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 numChannels = 2;
  if (has_numchannels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numchannels(), target);
  }

  // repeated string channelName = 3;
  for (int i = 0; i < this->channelname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname(i).data(), this->channelname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->channelname(i), target);
  }

  // repeated int32 channelType = 4;
  for (int i = 0; i < this->channeltype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->channeltype(i), target);
  }

  // required int32 numFrames = 5;
  if (has_numframes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numframes(), target);
  }

  // repeated float keyTimes = 6;
  for (int i = 0; i < this->keytimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->keytimes(i), target);
  }

  // repeated float keyValues = 7;
  for (int i = 0; i < this->keyvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->keyvalues(i), target);
  }

  // repeated float syncPoints = 8;
  for (int i = 0; i < this->syncpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->syncpoints(i), target);
  }

  // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
  for (int i = 0; i < this->metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->metadata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Motion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 numChannels = 2;
    if (has_numchannels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numchannels());
    }

    // required int32 numFrames = 5;
    if (has_numframes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numframes());
    }

  }
  // repeated string channelName = 3;
  total_size += 1 * this->channelname_size();
  for (int i = 0; i < this->channelname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channelname(i));
  }

  // repeated int32 channelType = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->channeltype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->channeltype(i));
    }
    total_size += 1 * this->channeltype_size() + data_size;
  }

  // repeated float keyTimes = 6;
  {
    int data_size = 0;
    data_size = 4 * this->keytimes_size();
    total_size += 1 * this->keytimes_size() + data_size;
  }

  // repeated float keyValues = 7;
  {
    int data_size = 0;
    data_size = 4 * this->keyvalues_size();
    total_size += 1 * this->keyvalues_size() + data_size;
  }

  // repeated float syncPoints = 8;
  {
    int data_size = 0;
    data_size = 4 * this->syncpoints_size();
    total_size += 1 * this->syncpoints_size() + data_size;
  }

  // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motion::MergeFrom(const Motion& from) {
  GOOGLE_CHECK_NE(&from, this);
  channelname_.MergeFrom(from.channelname_);
  channeltype_.MergeFrom(from.channeltype_);
  keytimes_.MergeFrom(from.keytimes_);
  keyvalues_.MergeFrom(from.keyvalues_);
  syncpoints_.MergeFrom(from.syncpoints_);
  metadata_.MergeFrom(from.metadata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_numchannels()) {
      set_numchannels(from.numchannels());
    }
    if (from.has_numframes()) {
      set_numframes(from.numframes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion::CopyFrom(const Motion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  for (int i = 0; i < metadata_size(); i++) {
    if (!this->metadata(i).IsInitialized()) return false;
  }
  return true;
}

void Motion::Swap(Motion* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(numchannels_, other->numchannels_);
    channelname_.Swap(&other->channelname_);
    channeltype_.Swap(&other->channeltype_);
    std::swap(numframes_, other->numframes_);
    keytimes_.Swap(&other->keytimes_);
    keyvalues_.Swap(&other->keyvalues_);
    syncpoints_.Swap(&other->syncpoints_);
    metadata_.Swap(&other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motion_descriptor_;
  metadata.reflection = Motion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

// @@protoc_insertion_point(global_scope)
