// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmesh.proto

#include "sbmesh.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sbmesh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Material_sbmesh_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sbmesh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MeshModel_sbmesh_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sbmesh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkinWeight_sbmesh_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sbmesh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StaticMesh_sbmesh_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sbutilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringToIntVectorMap_sbutilities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sbutilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringToStringMap_sbutilities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sbutilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringToStringVectorMap_sbutilities_2eproto;
namespace SmartBodyBinary {
class MaterialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Material> _instance;
} _Material_default_instance_;
class MeshModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshModel> _instance;
} _MeshModel_default_instance_;
class SkinWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkinWeight> _instance;
} _SkinWeight_default_instance_;
class StaticMeshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticMesh> _instance;
} _StaticMesh_default_instance_;
class DeformableMeshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeformableMesh> _instance;
} _DeformableMesh_default_instance_;
}  // namespace SmartBodyBinary
static void InitDefaultsscc_info_DeformableMesh_sbmesh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_DeformableMesh_default_instance_;
    new (ptr) ::SmartBodyBinary::DeformableMesh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::DeformableMesh::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeformableMesh_sbmesh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DeformableMesh_sbmesh_2eproto}, {
      &scc_info_StaticMesh_sbmesh_2eproto.base,
      &scc_info_SkinWeight_sbmesh_2eproto.base,
      &scc_info_StringToStringVectorMap_sbutilities_2eproto.base,}};

static void InitDefaultsscc_info_Material_sbmesh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_Material_default_instance_;
    new (ptr) ::SmartBodyBinary::Material();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::Material::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Material_sbmesh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Material_sbmesh_2eproto}, {}};

static void InitDefaultsscc_info_MeshModel_sbmesh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_MeshModel_default_instance_;
    new (ptr) ::SmartBodyBinary::MeshModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::MeshModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MeshModel_sbmesh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MeshModel_sbmesh_2eproto}, {
      &scc_info_Material_sbmesh_2eproto.base,
      &scc_info_StringToStringMap_sbutilities_2eproto.base,
      &scc_info_StringToIntVectorMap_sbutilities_2eproto.base,}};

static void InitDefaultsscc_info_SkinWeight_sbmesh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_SkinWeight_default_instance_;
    new (ptr) ::SmartBodyBinary::SkinWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::SkinWeight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkinWeight_sbmesh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SkinWeight_sbmesh_2eproto}, {}};

static void InitDefaultsscc_info_StaticMesh_sbmesh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_StaticMesh_default_instance_;
    new (ptr) ::SmartBodyBinary::StaticMesh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::StaticMesh::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StaticMesh_sbmesh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StaticMesh_sbmesh_2eproto}, {
      &scc_info_MeshModel_sbmesh_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sbmesh_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sbmesh_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sbmesh_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sbmesh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, ambient_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, diffuse_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, specular_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, emission_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, shininess_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, transparency_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, usealphablend_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, meshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materials_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, vertexcoordinates_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, normals_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, tangents_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, binormals_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, texturecoordinates_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, trianglefaceindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, normalindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, texturecoordinatesindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, culling_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialnames_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialtodiffusetexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialtonormaltexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialtospeculartexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialtofaceindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialtotransparenttexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, materialtoglossytexturemapping_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, sourcemeshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, influencejointnames_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, bindweights_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, bindposematrice_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, bindshapematrix_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, numberofinfluencejoints_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, weightindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, jointnameindices_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, staticmeshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, meshmodels_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, deformablemeshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, staticmesh_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, skinweights_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, morphtargets_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::SmartBodyBinary::Material)},
  { 19, 43, sizeof(::SmartBodyBinary::MeshModel)},
  { 62, 75, sizeof(::SmartBodyBinary::SkinWeight)},
  { 83, 90, sizeof(::SmartBodyBinary::StaticMesh)},
  { 92, 101, sizeof(::SmartBodyBinary::DeformableMesh)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_Material_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_MeshModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_SkinWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_StaticMesh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_DeformableMesh_default_instance_),
};

const char descriptor_table_protodef_sbmesh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sbmesh.proto\022\017SmartBodyBinary\032\021sbutili"
  "ties.proto\"\220\001\n\010Material\022\017\n\007ambient\030\001 \003(\005"
  "\022\017\n\007diffuse\030\002 \003(\005\022\020\n\010specular\030\003 \003(\005\022\020\n\010e"
  "mission\030\004 \003(\005\022\021\n\tshininess\030\005 \002(\005\022\024\n\014tran"
  "sparency\030\006 \002(\002\022\025\n\ruseAlphaBlend\030\007 \002(\010\"\232\006"
  "\n\tMeshModel\022\020\n\010meshName\030\001 \002(\t\022,\n\tmateria"
  "ls\030\002 \003(\0132\031.SmartBodyBinary.Material\022\031\n\021v"
  "ertexCoordinates\030\003 \003(\002\022\017\n\007normals\030\004 \003(\002\022"
  "\020\n\010tangents\030\005 \003(\002\022\021\n\tbinormals\030\006 \003(\002\022\032\n\022"
  "textureCoordinates\030\007 \003(\002\022\033\n\023triangleFace"
  "Indices\030\010 \003(\005\022\027\n\017materialIndices\030\t \003(\005\022\025"
  "\n\rnormalIndices\030\n \003(\005\022!\n\031textureCoordina"
  "tesIndices\030\013 \003(\005\022\017\n\007culling\030\014 \002(\010\022\025\n\rmat"
  "erialNames\030\r \003(\t\022K\n\037materialToDiffuseTex"
  "tureMapping\030\016 \003(\0132\".SmartBodyBinary.Stri"
  "ngToStringMap\022J\n\036materialToNormalTexture"
  "Mapping\030\017 \003(\0132\".SmartBodyBinary.StringTo"
  "StringMap\022L\n materialToSpecularTextureMa"
  "pping\030\020 \003(\0132\".SmartBodyBinary.StringToSt"
  "ringMap\022D\n\025materialToFaceIndices\030\021 \003(\0132%"
  ".SmartBodyBinary.StringToIntVectorMap\022O\n"
  "#materialToTransparentTextureMapping\030\022 \003"
  "(\0132\".SmartBodyBinary.StringToStringMap\022J"
  "\n\036materialToGlossyTextureMapping\030\023 \003(\0132\""
  ".SmartBodyBinary.StringToStringMap\"\332\001\n\nS"
  "kinWeight\022\026\n\016sourceMeshName\030\001 \002(\t\022\033\n\023inf"
  "luenceJointNames\030\002 \003(\t\022\023\n\013bindWeights\030\003 "
  "\003(\002\022\027\n\017bindPoseMatrice\030\004 \003(\002\022\027\n\017bindShap"
  "eMatrix\030\005 \003(\002\022\037\n\027numberOfInfluenceJoints"
  "\030\006 \003(\005\022\025\n\rweightIndices\030\007 \003(\005\022\030\n\020jointNa"
  "meIndices\030\010 \003(\005\"T\n\nStaticMesh\022\026\n\016staticM"
  "eshName\030\001 \002(\t\022.\n\nmeshModels\030\002 \003(\0132\032.Smar"
  "tBodyBinary.MeshModel\"\317\001\n\016DeformableMesh"
  "\022\032\n\022deformableMeshName\030\001 \002(\t\022/\n\nstaticMe"
  "sh\030\002 \002(\0132\033.SmartBodyBinary.StaticMesh\0220\n"
  "\013skinWeights\030\003 \003(\0132\033.SmartBodyBinary.Ski"
  "nWeight\022>\n\014morphTargets\030\004 \003(\0132(.SmartBod"
  "yBinary.StringToStringVectorMap"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sbmesh_2eproto_deps[1] = {
  &::descriptor_table_sbutilities_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sbmesh_2eproto_sccs[5] = {
  &scc_info_DeformableMesh_sbmesh_2eproto.base,
  &scc_info_Material_sbmesh_2eproto.base,
  &scc_info_MeshModel_sbmesh_2eproto.base,
  &scc_info_SkinWeight_sbmesh_2eproto.base,
  &scc_info_StaticMesh_sbmesh_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sbmesh_2eproto_once;
static bool descriptor_table_sbmesh_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sbmesh_2eproto = {
  &descriptor_table_sbmesh_2eproto_initialized, descriptor_table_protodef_sbmesh_2eproto, "sbmesh.proto", 1511,
  &descriptor_table_sbmesh_2eproto_once, descriptor_table_sbmesh_2eproto_sccs, descriptor_table_sbmesh_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_sbmesh_2eproto::offsets,
  file_level_metadata_sbmesh_2eproto, 5, file_level_enum_descriptors_sbmesh_2eproto, file_level_service_descriptors_sbmesh_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sbmesh_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sbmesh_2eproto), true);
namespace SmartBodyBinary {

// ===================================================================

void Material::InitAsDefaultInstance() {
}
class Material::_Internal {
 public:
  using HasBits = decltype(std::declval<Material>()._has_bits_);
  static void set_has_shininess(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transparency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usealphablend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Material::Material()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.Material)
}
Material::Material(const Material& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ambient_(from.ambient_),
      diffuse_(from.diffuse_),
      specular_(from.specular_),
      emission_(from.emission_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shininess_, &from.shininess_,
    static_cast<size_t>(reinterpret_cast<char*>(&usealphablend_) -
    reinterpret_cast<char*>(&shininess_)) + sizeof(usealphablend_));
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.Material)
}

void Material::SharedCtor() {
  ::memset(&shininess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usealphablend_) -
      reinterpret_cast<char*>(&shininess_)) + sizeof(usealphablend_));
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.Material)
  SharedDtor();
}

void Material::SharedDtor() {
}

void Material::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Material& Material::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Material_sbmesh_2eproto.base);
  return *internal_default_instance();
}


void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ambient_.Clear();
  diffuse_.Clear();
  specular_.Clear();
  emission_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&shininess_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usealphablend_) -
        reinterpret_cast<char*>(&shininess_)) + sizeof(usealphablend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Material::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ambient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ambient(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ambient(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 diffuse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_diffuse(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_diffuse(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 specular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_specular(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_specular(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 emission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_emission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_emission(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 shininess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_shininess(&has_bits);
          shininess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float transparency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_transparency(&has_bits);
          transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool useAlphaBlend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_usealphablend(&has_bits);
          usealphablend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Material::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ambient = 1;
  for (int i = 0, n = this->_internal_ambient_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ambient(i), target);
  }

  // repeated int32 diffuse = 2;
  for (int i = 0, n = this->_internal_diffuse_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_diffuse(i), target);
  }

  // repeated int32 specular = 3;
  for (int i = 0, n = this->_internal_specular_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_specular(i), target);
  }

  // repeated int32 emission = 4;
  for (int i = 0, n = this->_internal_emission_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_emission(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 shininess = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_shininess(), target);
  }

  // required float transparency = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_transparency(), target);
  }

  // required bool useAlphaBlend = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_usealphablend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.Material)
  return target;
}

size_t Material::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.Material)
  size_t total_size = 0;

  if (_internal_has_shininess()) {
    // required int32 shininess = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shininess());
  }

  if (_internal_has_transparency()) {
    // required float transparency = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_usealphablend()) {
    // required bool useAlphaBlend = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.Material)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 shininess = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shininess());

    // required float transparency = 6;
    total_size += 1 + 4;

    // required bool useAlphaBlend = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ambient = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ambient_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ambient_size());
    total_size += data_size;
  }

  // repeated int32 diffuse = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->diffuse_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_diffuse_size());
    total_size += data_size;
  }

  // repeated int32 specular = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->specular_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_specular_size());
    total_size += data_size;
  }

  // repeated int32 emission = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->emission_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_emission_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Material* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Material>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.Material)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.Material)
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ambient_.MergeFrom(from.ambient_);
  diffuse_.MergeFrom(from.diffuse_);
  specular_.MergeFrom(from.specular_);
  emission_.MergeFrom(from.emission_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shininess_ = from.shininess_;
    }
    if (cached_has_bits & 0x00000002u) {
      transparency_ = from.transparency_;
    }
    if (cached_has_bits & 0x00000004u) {
      usealphablend_ = from.usealphablend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Material::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Material::InternalSwap(Material* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ambient_.InternalSwap(&other->ambient_);
  diffuse_.InternalSwap(&other->diffuse_);
  specular_.InternalSwap(&other->specular_);
  emission_.InternalSwap(&other->emission_);
  swap(shininess_, other->shininess_);
  swap(transparency_, other->transparency_);
  swap(usealphablend_, other->usealphablend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Material::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshModel::InitAsDefaultInstance() {
}
class MeshModel::_Internal {
 public:
  using HasBits = decltype(std::declval<MeshModel>()._has_bits_);
  static void set_has_meshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_culling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void MeshModel::clear_materialtodiffusetexturemapping() {
  materialtodiffusetexturemapping_.Clear();
}
void MeshModel::clear_materialtonormaltexturemapping() {
  materialtonormaltexturemapping_.Clear();
}
void MeshModel::clear_materialtospeculartexturemapping() {
  materialtospeculartexturemapping_.Clear();
}
void MeshModel::clear_materialtofaceindices() {
  materialtofaceindices_.Clear();
}
void MeshModel::clear_materialtotransparenttexturemapping() {
  materialtotransparenttexturemapping_.Clear();
}
void MeshModel::clear_materialtoglossytexturemapping() {
  materialtoglossytexturemapping_.Clear();
}
MeshModel::MeshModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.MeshModel)
}
MeshModel::MeshModel(const MeshModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      materials_(from.materials_),
      vertexcoordinates_(from.vertexcoordinates_),
      normals_(from.normals_),
      tangents_(from.tangents_),
      binormals_(from.binormals_),
      texturecoordinates_(from.texturecoordinates_),
      trianglefaceindices_(from.trianglefaceindices_),
      materialindices_(from.materialindices_),
      normalindices_(from.normalindices_),
      texturecoordinatesindices_(from.texturecoordinatesindices_),
      materialnames_(from.materialnames_),
      materialtodiffusetexturemapping_(from.materialtodiffusetexturemapping_),
      materialtonormaltexturemapping_(from.materialtonormaltexturemapping_),
      materialtospeculartexturemapping_(from.materialtospeculartexturemapping_),
      materialtofaceindices_(from.materialtofaceindices_),
      materialtotransparenttexturemapping_(from.materialtotransparenttexturemapping_),
      materialtoglossytexturemapping_(from.materialtoglossytexturemapping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_meshname()) {
    meshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meshname_);
  }
  culling_ = from.culling_;
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.MeshModel)
}

void MeshModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshModel_sbmesh_2eproto.base);
  meshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  culling_ = false;
}

MeshModel::~MeshModel() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.MeshModel)
  SharedDtor();
}

void MeshModel::SharedDtor() {
  meshname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshModel& MeshModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshModel_sbmesh_2eproto.base);
  return *internal_default_instance();
}


void MeshModel::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.MeshModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materials_.Clear();
  vertexcoordinates_.Clear();
  normals_.Clear();
  tangents_.Clear();
  binormals_.Clear();
  texturecoordinates_.Clear();
  trianglefaceindices_.Clear();
  materialindices_.Clear();
  normalindices_.Clear();
  texturecoordinatesindices_.Clear();
  materialnames_.Clear();
  materialtodiffusetexturemapping_.Clear();
  materialtonormaltexturemapping_.Clear();
  materialtospeculartexturemapping_.Clear();
  materialtofaceindices_.Clear();
  materialtotransparenttexturemapping_.Clear();
  materialtoglossytexturemapping_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    meshname_.ClearNonDefaultToEmptyNoArena();
  }
  culling_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MeshModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string meshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_meshname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.MeshModel.meshName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.Material materials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float vertexCoordinates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vertexcoordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vertexcoordinates(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float normals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_normals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_normals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float tangents = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_tangents(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float binormals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_binormals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_binormals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float textureCoordinates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_texturecoordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_texturecoordinates(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 triangleFaceIndices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_trianglefaceindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_trianglefaceindices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 materialIndices = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_materialindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_materialindices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 normalIndices = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_normalindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_normalindices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 textureCoordinatesIndices = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_texturecoordinatesindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_texturecoordinatesindices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool culling = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_culling(&has_bits);
          culling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string materialNames = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_materialnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.MeshModel.materialNames");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materialtodiffusetexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materialtonormaltexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtospeculartexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtofaceindices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtotransparenttexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtoglossytexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.MeshModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string meshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_meshname().data(), static_cast<int>(this->_internal_meshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.MeshModel.meshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_meshname(), target);
  }

  // repeated .SmartBodyBinary.Material materials = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materials_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_materials(i), target, stream);
  }

  // repeated float vertexCoordinates = 3;
  for (int i = 0, n = this->_internal_vertexcoordinates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_vertexcoordinates(i), target);
  }

  // repeated float normals = 4;
  for (int i = 0, n = this->_internal_normals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_normals(i), target);
  }

  // repeated float tangents = 5;
  for (int i = 0, n = this->_internal_tangents_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_tangents(i), target);
  }

  // repeated float binormals = 6;
  for (int i = 0, n = this->_internal_binormals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_binormals(i), target);
  }

  // repeated float textureCoordinates = 7;
  for (int i = 0, n = this->_internal_texturecoordinates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_texturecoordinates(i), target);
  }

  // repeated int32 triangleFaceIndices = 8;
  for (int i = 0, n = this->_internal_trianglefaceindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_trianglefaceindices(i), target);
  }

  // repeated int32 materialIndices = 9;
  for (int i = 0, n = this->_internal_materialindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_materialindices(i), target);
  }

  // repeated int32 normalIndices = 10;
  for (int i = 0, n = this->_internal_normalindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_normalindices(i), target);
  }

  // repeated int32 textureCoordinatesIndices = 11;
  for (int i = 0, n = this->_internal_texturecoordinatesindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_texturecoordinatesindices(i), target);
  }

  // required bool culling = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_culling(), target);
  }

  // repeated string materialNames = 13;
  for (int i = 0, n = this->_internal_materialnames_size(); i < n; i++) {
    const auto& s = this->_internal_materialnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.MeshModel.materialNames");
    target = stream->WriteString(13, s, target);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materialtodiffusetexturemapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_materialtodiffusetexturemapping(i), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materialtonormaltexturemapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_materialtonormaltexturemapping(i), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materialtospeculartexturemapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_materialtospeculartexturemapping(i), target, stream);
  }

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materialtofaceindices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_materialtofaceindices(i), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materialtotransparenttexturemapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_materialtotransparenttexturemapping(i), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materialtoglossytexturemapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_materialtoglossytexturemapping(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.MeshModel)
  return target;
}

size_t MeshModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.MeshModel)
  size_t total_size = 0;

  if (_internal_has_meshname()) {
    // required string meshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meshname());
  }

  if (_internal_has_culling()) {
    // required bool culling = 12;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MeshModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.MeshModel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string meshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meshname());

    // required bool culling = 12;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SmartBodyBinary.Material materials = 2;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float vertexCoordinates = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vertexcoordinates_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vertexcoordinates_size());
    total_size += data_size;
  }

  // repeated float normals = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normals_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_normals_size());
    total_size += data_size;
  }

  // repeated float tangents = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tangents_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tangents_size());
    total_size += data_size;
  }

  // repeated float binormals = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_binormals_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_binormals_size());
    total_size += data_size;
  }

  // repeated float textureCoordinates = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_texturecoordinates_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_texturecoordinates_size());
    total_size += data_size;
  }

  // repeated int32 triangleFaceIndices = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->trianglefaceindices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_trianglefaceindices_size());
    total_size += data_size;
  }

  // repeated int32 materialIndices = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->materialindices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_materialindices_size());
    total_size += data_size;
  }

  // repeated int32 normalIndices = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->normalindices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_normalindices_size());
    total_size += data_size;
  }

  // repeated int32 textureCoordinatesIndices = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->texturecoordinatesindices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_texturecoordinatesindices_size());
    total_size += data_size;
  }

  // repeated string materialNames = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(materialnames_.size());
  for (int i = 0, n = materialnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      materialnames_.Get(i));
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  total_size += 1UL * this->_internal_materialtodiffusetexturemapping_size();
  for (const auto& msg : this->materialtodiffusetexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  total_size += 1UL * this->_internal_materialtonormaltexturemapping_size();
  for (const auto& msg : this->materialtonormaltexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  total_size += 2UL * this->_internal_materialtospeculartexturemapping_size();
  for (const auto& msg : this->materialtospeculartexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  total_size += 2UL * this->_internal_materialtofaceindices_size();
  for (const auto& msg : this->materialtofaceindices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  total_size += 2UL * this->_internal_materialtotransparenttexturemapping_size();
  for (const auto& msg : this->materialtotransparenttexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  total_size += 2UL * this->_internal_materialtoglossytexturemapping_size();
  for (const auto& msg : this->materialtoglossytexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.MeshModel)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.MeshModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.MeshModel)
    MergeFrom(*source);
  }
}

void MeshModel::MergeFrom(const MeshModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.MeshModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materials_.MergeFrom(from.materials_);
  vertexcoordinates_.MergeFrom(from.vertexcoordinates_);
  normals_.MergeFrom(from.normals_);
  tangents_.MergeFrom(from.tangents_);
  binormals_.MergeFrom(from.binormals_);
  texturecoordinates_.MergeFrom(from.texturecoordinates_);
  trianglefaceindices_.MergeFrom(from.trianglefaceindices_);
  materialindices_.MergeFrom(from.materialindices_);
  normalindices_.MergeFrom(from.normalindices_);
  texturecoordinatesindices_.MergeFrom(from.texturecoordinatesindices_);
  materialnames_.MergeFrom(from.materialnames_);
  materialtodiffusetexturemapping_.MergeFrom(from.materialtodiffusetexturemapping_);
  materialtonormaltexturemapping_.MergeFrom(from.materialtonormaltexturemapping_);
  materialtospeculartexturemapping_.MergeFrom(from.materialtospeculartexturemapping_);
  materialtofaceindices_.MergeFrom(from.materialtofaceindices_);
  materialtotransparenttexturemapping_.MergeFrom(from.materialtotransparenttexturemapping_);
  materialtoglossytexturemapping_.MergeFrom(from.materialtoglossytexturemapping_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      meshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meshname_);
    }
    if (cached_has_bits & 0x00000002u) {
      culling_ = from.culling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MeshModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.MeshModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshModel::CopyFrom(const MeshModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.MeshModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(materials_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(materialtodiffusetexturemapping_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(materialtonormaltexturemapping_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(materialtospeculartexturemapping_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(materialtofaceindices_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(materialtotransparenttexturemapping_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(materialtoglossytexturemapping_)) return false;
  return true;
}

void MeshModel::InternalSwap(MeshModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  materials_.InternalSwap(&other->materials_);
  vertexcoordinates_.InternalSwap(&other->vertexcoordinates_);
  normals_.InternalSwap(&other->normals_);
  tangents_.InternalSwap(&other->tangents_);
  binormals_.InternalSwap(&other->binormals_);
  texturecoordinates_.InternalSwap(&other->texturecoordinates_);
  trianglefaceindices_.InternalSwap(&other->trianglefaceindices_);
  materialindices_.InternalSwap(&other->materialindices_);
  normalindices_.InternalSwap(&other->normalindices_);
  texturecoordinatesindices_.InternalSwap(&other->texturecoordinatesindices_);
  materialnames_.InternalSwap(&other->materialnames_);
  materialtodiffusetexturemapping_.InternalSwap(&other->materialtodiffusetexturemapping_);
  materialtonormaltexturemapping_.InternalSwap(&other->materialtonormaltexturemapping_);
  materialtospeculartexturemapping_.InternalSwap(&other->materialtospeculartexturemapping_);
  materialtofaceindices_.InternalSwap(&other->materialtofaceindices_);
  materialtotransparenttexturemapping_.InternalSwap(&other->materialtotransparenttexturemapping_);
  materialtoglossytexturemapping_.InternalSwap(&other->materialtoglossytexturemapping_);
  meshname_.Swap(&other->meshname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(culling_, other->culling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkinWeight::InitAsDefaultInstance() {
}
class SkinWeight::_Internal {
 public:
  using HasBits = decltype(std::declval<SkinWeight>()._has_bits_);
  static void set_has_sourcemeshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SkinWeight::SkinWeight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.SkinWeight)
}
SkinWeight::SkinWeight(const SkinWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      influencejointnames_(from.influencejointnames_),
      bindweights_(from.bindweights_),
      bindposematrice_(from.bindposematrice_),
      bindshapematrix_(from.bindshapematrix_),
      numberofinfluencejoints_(from.numberofinfluencejoints_),
      weightindices_(from.weightindices_),
      jointnameindices_(from.jointnameindices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcemeshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourcemeshname()) {
    sourcemeshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcemeshname_);
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.SkinWeight)
}

void SkinWeight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkinWeight_sbmesh_2eproto.base);
  sourcemeshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SkinWeight::~SkinWeight() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.SkinWeight)
  SharedDtor();
}

void SkinWeight::SharedDtor() {
  sourcemeshname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SkinWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkinWeight& SkinWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkinWeight_sbmesh_2eproto.base);
  return *internal_default_instance();
}


void SkinWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.SkinWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  influencejointnames_.Clear();
  bindweights_.Clear();
  bindposematrice_.Clear();
  bindshapematrix_.Clear();
  numberofinfluencejoints_.Clear();
  weightindices_.Clear();
  jointnameindices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sourcemeshname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SkinWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string sourceMeshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourcemeshname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.SkinWeight.sourceMeshName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string influenceJointNames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_influencejointnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.SkinWeight.influenceJointNames");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float bindWeights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bindweights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bindweights(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bindPoseMatrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bindposematrice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bindposematrice(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bindShapeMatrix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bindshapematrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bindshapematrix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 numberOfInfluenceJoints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_numberofinfluencejoints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_numberofinfluencejoints(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 weightIndices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weightindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_weightindices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 jointNameIndices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_jointnameindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_jointnameindices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkinWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.SkinWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sourceMeshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcemeshname().data(), static_cast<int>(this->_internal_sourcemeshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.SkinWeight.sourceMeshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcemeshname(), target);
  }

  // repeated string influenceJointNames = 2;
  for (int i = 0, n = this->_internal_influencejointnames_size(); i < n; i++) {
    const auto& s = this->_internal_influencejointnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.SkinWeight.influenceJointNames");
    target = stream->WriteString(2, s, target);
  }

  // repeated float bindWeights = 3;
  for (int i = 0, n = this->_internal_bindweights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bindweights(i), target);
  }

  // repeated float bindPoseMatrice = 4;
  for (int i = 0, n = this->_internal_bindposematrice_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bindposematrice(i), target);
  }

  // repeated float bindShapeMatrix = 5;
  for (int i = 0, n = this->_internal_bindshapematrix_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_bindshapematrix(i), target);
  }

  // repeated int32 numberOfInfluenceJoints = 6;
  for (int i = 0, n = this->_internal_numberofinfluencejoints_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_numberofinfluencejoints(i), target);
  }

  // repeated int32 weightIndices = 7;
  for (int i = 0, n = this->_internal_weightindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_weightindices(i), target);
  }

  // repeated int32 jointNameIndices = 8;
  for (int i = 0, n = this->_internal_jointnameindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_jointnameindices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.SkinWeight)
  return target;
}

size_t SkinWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.SkinWeight)
  size_t total_size = 0;

  // required string sourceMeshName = 1;
  if (_internal_has_sourcemeshname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcemeshname());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string influenceJointNames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(influencejointnames_.size());
  for (int i = 0, n = influencejointnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      influencejointnames_.Get(i));
  }

  // repeated float bindWeights = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bindweights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bindweights_size());
    total_size += data_size;
  }

  // repeated float bindPoseMatrice = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bindposematrice_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bindposematrice_size());
    total_size += data_size;
  }

  // repeated float bindShapeMatrix = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bindshapematrix_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bindshapematrix_size());
    total_size += data_size;
  }

  // repeated int32 numberOfInfluenceJoints = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->numberofinfluencejoints_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_numberofinfluencejoints_size());
    total_size += data_size;
  }

  // repeated int32 weightIndices = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->weightindices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_weightindices_size());
    total_size += data_size;
  }

  // repeated int32 jointNameIndices = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->jointnameindices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_jointnameindices_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkinWeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.SkinWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const SkinWeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkinWeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.SkinWeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.SkinWeight)
    MergeFrom(*source);
  }
}

void SkinWeight::MergeFrom(const SkinWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.SkinWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  influencejointnames_.MergeFrom(from.influencejointnames_);
  bindweights_.MergeFrom(from.bindweights_);
  bindposematrice_.MergeFrom(from.bindposematrice_);
  bindshapematrix_.MergeFrom(from.bindshapematrix_);
  numberofinfluencejoints_.MergeFrom(from.numberofinfluencejoints_);
  weightindices_.MergeFrom(from.weightindices_);
  jointnameindices_.MergeFrom(from.jointnameindices_);
  if (from._internal_has_sourcemeshname()) {
    _has_bits_[0] |= 0x00000001u;
    sourcemeshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcemeshname_);
  }
}

void SkinWeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.SkinWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkinWeight::CopyFrom(const SkinWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.SkinWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SkinWeight::InternalSwap(SkinWeight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  influencejointnames_.InternalSwap(&other->influencejointnames_);
  bindweights_.InternalSwap(&other->bindweights_);
  bindposematrice_.InternalSwap(&other->bindposematrice_);
  bindshapematrix_.InternalSwap(&other->bindshapematrix_);
  numberofinfluencejoints_.InternalSwap(&other->numberofinfluencejoints_);
  weightindices_.InternalSwap(&other->weightindices_);
  jointnameindices_.InternalSwap(&other->jointnameindices_);
  sourcemeshname_.Swap(&other->sourcemeshname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SkinWeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticMesh::InitAsDefaultInstance() {
}
class StaticMesh::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticMesh>()._has_bits_);
  static void set_has_staticmeshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StaticMesh::StaticMesh()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.StaticMesh)
}
StaticMesh::StaticMesh(const StaticMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      meshmodels_(from.meshmodels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  staticmeshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_staticmeshname()) {
    staticmeshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.staticmeshname_);
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StaticMesh)
}

void StaticMesh::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StaticMesh_sbmesh_2eproto.base);
  staticmeshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StaticMesh::~StaticMesh() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StaticMesh)
  SharedDtor();
}

void StaticMesh::SharedDtor() {
  staticmeshname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StaticMesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticMesh& StaticMesh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticMesh_sbmesh_2eproto.base);
  return *internal_default_instance();
}


void StaticMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StaticMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meshmodels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    staticmeshname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StaticMesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string staticMeshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_staticmeshname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.StaticMesh.staticMeshName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.MeshModel meshModels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meshmodels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticMesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StaticMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string staticMeshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_staticmeshname().data(), static_cast<int>(this->_internal_staticmeshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StaticMesh.staticMeshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_staticmeshname(), target);
  }

  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_meshmodels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_meshmodels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StaticMesh)
  return target;
}

size_t StaticMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StaticMesh)
  size_t total_size = 0;

  // required string staticMeshName = 1;
  if (_internal_has_staticmeshname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staticmeshname());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  total_size += 1UL * this->_internal_meshmodels_size();
  for (const auto& msg : this->meshmodels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticMesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.StaticMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticMesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticMesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.StaticMesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.StaticMesh)
    MergeFrom(*source);
  }
}

void StaticMesh::MergeFrom(const StaticMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StaticMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meshmodels_.MergeFrom(from.meshmodels_);
  if (from._internal_has_staticmeshname()) {
    _has_bits_[0] |= 0x00000001u;
    staticmeshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.staticmeshname_);
  }
}

void StaticMesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.StaticMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticMesh::CopyFrom(const StaticMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StaticMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticMesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(meshmodels_)) return false;
  return true;
}

void StaticMesh::InternalSwap(StaticMesh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  meshmodels_.InternalSwap(&other->meshmodels_);
  staticmeshname_.Swap(&other->staticmeshname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticMesh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeformableMesh::InitAsDefaultInstance() {
  ::SmartBodyBinary::_DeformableMesh_default_instance_._instance.get_mutable()->staticmesh_ = const_cast< ::SmartBodyBinary::StaticMesh*>(
      ::SmartBodyBinary::StaticMesh::internal_default_instance());
}
class DeformableMesh::_Internal {
 public:
  using HasBits = decltype(std::declval<DeformableMesh>()._has_bits_);
  static void set_has_deformablemeshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SmartBodyBinary::StaticMesh& staticmesh(const DeformableMesh* msg);
  static void set_has_staticmesh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SmartBodyBinary::StaticMesh&
DeformableMesh::_Internal::staticmesh(const DeformableMesh* msg) {
  return *msg->staticmesh_;
}
void DeformableMesh::clear_morphtargets() {
  morphtargets_.Clear();
}
DeformableMesh::DeformableMesh()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.DeformableMesh)
}
DeformableMesh::DeformableMesh(const DeformableMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      skinweights_(from.skinweights_),
      morphtargets_(from.morphtargets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deformablemeshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deformablemeshname()) {
    deformablemeshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deformablemeshname_);
  }
  if (from._internal_has_staticmesh()) {
    staticmesh_ = new ::SmartBodyBinary::StaticMesh(*from.staticmesh_);
  } else {
    staticmesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.DeformableMesh)
}

void DeformableMesh::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeformableMesh_sbmesh_2eproto.base);
  deformablemeshname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staticmesh_ = nullptr;
}

DeformableMesh::~DeformableMesh() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.DeformableMesh)
  SharedDtor();
}

void DeformableMesh::SharedDtor() {
  deformablemeshname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete staticmesh_;
}

void DeformableMesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeformableMesh& DeformableMesh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeformableMesh_sbmesh_2eproto.base);
  return *internal_default_instance();
}


void DeformableMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.DeformableMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skinweights_.Clear();
  morphtargets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      deformablemeshname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(staticmesh_ != nullptr);
      staticmesh_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeformableMesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string deformableMeshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deformablemeshname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.DeformableMesh.deformableMeshName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SmartBodyBinary.StaticMesh staticMesh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_staticmesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skinweights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_morphtargets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeformableMesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.DeformableMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string deformableMeshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deformablemeshname().data(), static_cast<int>(this->_internal_deformablemeshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.DeformableMesh.deformableMeshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deformablemeshname(), target);
  }

  // required .SmartBodyBinary.StaticMesh staticMesh = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::staticmesh(this), target, stream);
  }

  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skinweights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_skinweights(i), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_morphtargets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_morphtargets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.DeformableMesh)
  return target;
}

size_t DeformableMesh::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.DeformableMesh)
  size_t total_size = 0;

  if (_internal_has_deformablemeshname()) {
    // required string deformableMeshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deformablemeshname());
  }

  if (_internal_has_staticmesh()) {
    // required .SmartBodyBinary.StaticMesh staticMesh = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *staticmesh_);
  }

  return total_size;
}
size_t DeformableMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.DeformableMesh)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string deformableMeshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deformablemeshname());

    // required .SmartBodyBinary.StaticMesh staticMesh = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *staticmesh_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  total_size += 1UL * this->_internal_skinweights_size();
  for (const auto& msg : this->skinweights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  total_size += 1UL * this->_internal_morphtargets_size();
  for (const auto& msg : this->morphtargets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeformableMesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.DeformableMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const DeformableMesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeformableMesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.DeformableMesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.DeformableMesh)
    MergeFrom(*source);
  }
}

void DeformableMesh::MergeFrom(const DeformableMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.DeformableMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skinweights_.MergeFrom(from.skinweights_);
  morphtargets_.MergeFrom(from.morphtargets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      deformablemeshname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deformablemeshname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_staticmesh()->::SmartBodyBinary::StaticMesh::MergeFrom(from._internal_staticmesh());
    }
  }
}

void DeformableMesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.DeformableMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeformableMesh::CopyFrom(const DeformableMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.DeformableMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeformableMesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(skinweights_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(morphtargets_)) return false;
  if (_internal_has_staticmesh()) {
    if (!staticmesh_->IsInitialized()) return false;
  }
  return true;
}

void DeformableMesh::InternalSwap(DeformableMesh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skinweights_.InternalSwap(&other->skinweights_);
  morphtargets_.InternalSwap(&other->morphtargets_);
  deformablemeshname_.Swap(&other->deformablemeshname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(staticmesh_, other->staticmesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeformableMesh::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::Material* Arena::CreateMaybeMessage< ::SmartBodyBinary::Material >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::Material >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::MeshModel* Arena::CreateMaybeMessage< ::SmartBodyBinary::MeshModel >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::MeshModel >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::SkinWeight* Arena::CreateMaybeMessage< ::SmartBodyBinary::SkinWeight >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::SkinWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StaticMesh* Arena::CreateMaybeMessage< ::SmartBodyBinary::StaticMesh >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::StaticMesh >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::DeformableMesh* Arena::CreateMaybeMessage< ::SmartBodyBinary::DeformableMesh >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::DeformableMesh >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
