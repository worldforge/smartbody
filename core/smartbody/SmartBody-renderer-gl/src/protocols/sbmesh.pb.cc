// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmesh.proto

#include "sbmesh.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SmartBodyBinary {
PROTOBUF_CONSTEXPR Material::Material(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ambient_)*/{}
  , /*decltype(_impl_.diffuse_)*/{}
  , /*decltype(_impl_.specular_)*/{}
  , /*decltype(_impl_.emission_)*/{}
  , /*decltype(_impl_.shininess_)*/0
  , /*decltype(_impl_.transparency_)*/0
  , /*decltype(_impl_.usealphablend_)*/false} {}
struct MaterialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaterialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaterialDefaultTypeInternal() {}
  union {
    Material _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaterialDefaultTypeInternal _Material_default_instance_;
PROTOBUF_CONSTEXPR MeshModel::MeshModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.materials_)*/{}
  , /*decltype(_impl_.vertexcoordinates_)*/{}
  , /*decltype(_impl_.normals_)*/{}
  , /*decltype(_impl_.tangents_)*/{}
  , /*decltype(_impl_.binormals_)*/{}
  , /*decltype(_impl_.texturecoordinates_)*/{}
  , /*decltype(_impl_.trianglefaceindices_)*/{}
  , /*decltype(_impl_.materialindices_)*/{}
  , /*decltype(_impl_.normalindices_)*/{}
  , /*decltype(_impl_.texturecoordinatesindices_)*/{}
  , /*decltype(_impl_.materialnames_)*/{}
  , /*decltype(_impl_.materialtodiffusetexturemapping_)*/{}
  , /*decltype(_impl_.materialtonormaltexturemapping_)*/{}
  , /*decltype(_impl_.materialtospeculartexturemapping_)*/{}
  , /*decltype(_impl_.materialtofaceindices_)*/{}
  , /*decltype(_impl_.materialtotransparenttexturemapping_)*/{}
  , /*decltype(_impl_.materialtoglossytexturemapping_)*/{}
  , /*decltype(_impl_.meshname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.culling_)*/false} {}
struct MeshModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshModelDefaultTypeInternal() {}
  union {
    MeshModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshModelDefaultTypeInternal _MeshModel_default_instance_;
PROTOBUF_CONSTEXPR SkinWeight::SkinWeight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.influencejointnames_)*/{}
  , /*decltype(_impl_.bindweights_)*/{}
  , /*decltype(_impl_.bindposematrice_)*/{}
  , /*decltype(_impl_.bindshapematrix_)*/{}
  , /*decltype(_impl_.numberofinfluencejoints_)*/{}
  , /*decltype(_impl_.weightindices_)*/{}
  , /*decltype(_impl_.jointnameindices_)*/{}
  , /*decltype(_impl_.sourcemeshname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SkinWeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkinWeightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkinWeightDefaultTypeInternal() {}
  union {
    SkinWeight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkinWeightDefaultTypeInternal _SkinWeight_default_instance_;
PROTOBUF_CONSTEXPR StaticMesh::StaticMesh(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meshmodels_)*/{}
  , /*decltype(_impl_.staticmeshname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StaticMeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaticMeshDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaticMeshDefaultTypeInternal() {}
  union {
    StaticMesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaticMeshDefaultTypeInternal _StaticMesh_default_instance_;
PROTOBUF_CONSTEXPR DeformableMesh::DeformableMesh(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.skinweights_)*/{}
  , /*decltype(_impl_.morphtargets_)*/{}
  , /*decltype(_impl_.deformablemeshname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.staticmesh_)*/nullptr} {}
struct DeformableMeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeformableMeshDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeformableMeshDefaultTypeInternal() {}
  union {
    DeformableMesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeformableMeshDefaultTypeInternal _DeformableMesh_default_instance_;
}  // namespace SmartBodyBinary
static ::_pb::Metadata file_level_metadata_sbmesh_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sbmesh_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sbmesh_2eproto = nullptr;

const uint32_t TableStruct_sbmesh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_.ambient_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_.diffuse_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_.specular_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_.emission_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_.shininess_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_.transparency_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::Material, _impl_.usealphablend_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.meshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materials_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.vertexcoordinates_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.normals_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.tangents_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.binormals_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.texturecoordinates_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.trianglefaceindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.normalindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.texturecoordinatesindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.culling_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialnames_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialtodiffusetexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialtonormaltexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialtospeculartexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialtofaceindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialtotransparenttexturemapping_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::MeshModel, _impl_.materialtoglossytexturemapping_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.sourcemeshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.influencejointnames_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.bindweights_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.bindposematrice_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.bindshapematrix_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.numberofinfluencejoints_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.weightindices_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::SkinWeight, _impl_.jointnameindices_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, _impl_.staticmeshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StaticMesh, _impl_.meshmodels_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _impl_.deformablemeshname_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _impl_.staticmesh_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _impl_.skinweights_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::DeformableMesh, _impl_.morphtargets_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::SmartBodyBinary::Material)},
  { 20, 45, -1, sizeof(::SmartBodyBinary::MeshModel)},
  { 64, 78, -1, sizeof(::SmartBodyBinary::SkinWeight)},
  { 86, 94, -1, sizeof(::SmartBodyBinary::StaticMesh)},
  { 96, 106, -1, sizeof(::SmartBodyBinary::DeformableMesh)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SmartBodyBinary::_Material_default_instance_._instance,
  &::SmartBodyBinary::_MeshModel_default_instance_._instance,
  &::SmartBodyBinary::_SkinWeight_default_instance_._instance,
  &::SmartBodyBinary::_StaticMesh_default_instance_._instance,
  &::SmartBodyBinary::_DeformableMesh_default_instance_._instance,
};

const char descriptor_table_protodef_sbmesh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sbmesh.proto\022\017SmartBodyBinary\032\021sbutili"
  "ties.proto\"\220\001\n\010Material\022\017\n\007ambient\030\001 \003(\005"
  "\022\017\n\007diffuse\030\002 \003(\005\022\020\n\010specular\030\003 \003(\005\022\020\n\010e"
  "mission\030\004 \003(\005\022\021\n\tshininess\030\005 \002(\005\022\024\n\014tran"
  "sparency\030\006 \002(\002\022\025\n\ruseAlphaBlend\030\007 \002(\010\"\232\006"
  "\n\tMeshModel\022\020\n\010meshName\030\001 \002(\t\022,\n\tmateria"
  "ls\030\002 \003(\0132\031.SmartBodyBinary.Material\022\031\n\021v"
  "ertexCoordinates\030\003 \003(\002\022\017\n\007normals\030\004 \003(\002\022"
  "\020\n\010tangents\030\005 \003(\002\022\021\n\tbinormals\030\006 \003(\002\022\032\n\022"
  "textureCoordinates\030\007 \003(\002\022\033\n\023triangleFace"
  "Indices\030\010 \003(\005\022\027\n\017materialIndices\030\t \003(\005\022\025"
  "\n\rnormalIndices\030\n \003(\005\022!\n\031textureCoordina"
  "tesIndices\030\013 \003(\005\022\017\n\007culling\030\014 \002(\010\022\025\n\rmat"
  "erialNames\030\r \003(\t\022K\n\037materialToDiffuseTex"
  "tureMapping\030\016 \003(\0132\".SmartBodyBinary.Stri"
  "ngToStringMap\022J\n\036materialToNormalTexture"
  "Mapping\030\017 \003(\0132\".SmartBodyBinary.StringTo"
  "StringMap\022L\n materialToSpecularTextureMa"
  "pping\030\020 \003(\0132\".SmartBodyBinary.StringToSt"
  "ringMap\022D\n\025materialToFaceIndices\030\021 \003(\0132%"
  ".SmartBodyBinary.StringToIntVectorMap\022O\n"
  "#materialToTransparentTextureMapping\030\022 \003"
  "(\0132\".SmartBodyBinary.StringToStringMap\022J"
  "\n\036materialToGlossyTextureMapping\030\023 \003(\0132\""
  ".SmartBodyBinary.StringToStringMap\"\332\001\n\nS"
  "kinWeight\022\026\n\016sourceMeshName\030\001 \002(\t\022\033\n\023inf"
  "luenceJointNames\030\002 \003(\t\022\023\n\013bindWeights\030\003 "
  "\003(\002\022\027\n\017bindPoseMatrice\030\004 \003(\002\022\027\n\017bindShap"
  "eMatrix\030\005 \003(\002\022\037\n\027numberOfInfluenceJoints"
  "\030\006 \003(\005\022\025\n\rweightIndices\030\007 \003(\005\022\030\n\020jointNa"
  "meIndices\030\010 \003(\005\"T\n\nStaticMesh\022\026\n\016staticM"
  "eshName\030\001 \002(\t\022.\n\nmeshModels\030\002 \003(\0132\032.Smar"
  "tBodyBinary.MeshModel\"\317\001\n\016DeformableMesh"
  "\022\032\n\022deformableMeshName\030\001 \002(\t\022/\n\nstaticMe"
  "sh\030\002 \002(\0132\033.SmartBodyBinary.StaticMesh\0220\n"
  "\013skinWeights\030\003 \003(\0132\033.SmartBodyBinary.Ski"
  "nWeight\022>\n\014morphTargets\030\004 \003(\0132(.SmartBod"
  "yBinary.StringToStringVectorMap"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sbmesh_2eproto_deps[1] = {
  &::descriptor_table_sbutilities_2eproto,
};
static ::_pbi::once_flag descriptor_table_sbmesh_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sbmesh_2eproto = {
    false, false, 1511, descriptor_table_protodef_sbmesh_2eproto,
    "sbmesh.proto",
    &descriptor_table_sbmesh_2eproto_once, descriptor_table_sbmesh_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_sbmesh_2eproto::offsets,
    file_level_metadata_sbmesh_2eproto, file_level_enum_descriptors_sbmesh_2eproto,
    file_level_service_descriptors_sbmesh_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sbmesh_2eproto_getter() {
  return &descriptor_table_sbmesh_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sbmesh_2eproto(&descriptor_table_sbmesh_2eproto);
namespace SmartBodyBinary {

// ===================================================================

class Material::_Internal {
 public:
  using HasBits = decltype(std::declval<Material>()._impl_._has_bits_);
  static void set_has_shininess(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transparency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usealphablend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Material::Material(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.Material)
}
Material::Material(const Material& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Material* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ambient_){from._impl_.ambient_}
    , decltype(_impl_.diffuse_){from._impl_.diffuse_}
    , decltype(_impl_.specular_){from._impl_.specular_}
    , decltype(_impl_.emission_){from._impl_.emission_}
    , decltype(_impl_.shininess_){}
    , decltype(_impl_.transparency_){}
    , decltype(_impl_.usealphablend_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shininess_, &from._impl_.shininess_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usealphablend_) -
    reinterpret_cast<char*>(&_impl_.shininess_)) + sizeof(_impl_.usealphablend_));
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.Material)
}

inline void Material::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ambient_){arena}
    , decltype(_impl_.diffuse_){arena}
    , decltype(_impl_.specular_){arena}
    , decltype(_impl_.emission_){arena}
    , decltype(_impl_.shininess_){0}
    , decltype(_impl_.transparency_){0}
    , decltype(_impl_.usealphablend_){false}
  };
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.Material)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Material::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ambient_.~RepeatedField();
  _impl_.diffuse_.~RepeatedField();
  _impl_.specular_.~RepeatedField();
  _impl_.emission_.~RepeatedField();
}

void Material::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.Material)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ambient_.Clear();
  _impl_.diffuse_.Clear();
  _impl_.specular_.Clear();
  _impl_.emission_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.shininess_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.usealphablend_) -
        reinterpret_cast<char*>(&_impl_.shininess_)) + sizeof(_impl_.usealphablend_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Material::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 ambient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ambient(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ambient(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 diffuse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_diffuse(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_diffuse(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 specular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_specular(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_specular(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 emission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_emission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_emission(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 shininess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shininess(&has_bits);
          _impl_.shininess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float transparency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_transparency(&has_bits);
          _impl_.transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool useAlphaBlend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_usealphablend(&has_bits);
          _impl_.usealphablend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Material::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.Material)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ambient = 1;
  for (int i = 0, n = this->_internal_ambient_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ambient(i), target);
  }

  // repeated int32 diffuse = 2;
  for (int i = 0, n = this->_internal_diffuse_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_diffuse(i), target);
  }

  // repeated int32 specular = 3;
  for (int i = 0, n = this->_internal_specular_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_specular(i), target);
  }

  // repeated int32 emission = 4;
  for (int i = 0, n = this->_internal_emission_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_emission(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 shininess = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_shininess(), target);
  }

  // required float transparency = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_transparency(), target);
  }

  // required bool useAlphaBlend = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_usealphablend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.Material)
  return target;
}

size_t Material::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.Material)
  size_t total_size = 0;

  if (_internal_has_shininess()) {
    // required int32 shininess = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shininess());
  }

  if (_internal_has_transparency()) {
    // required float transparency = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_usealphablend()) {
    // required bool useAlphaBlend = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.Material)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 shininess = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shininess());

    // required float transparency = 6;
    total_size += 1 + 4;

    // required bool useAlphaBlend = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ambient = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ambient_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ambient_size());
    total_size += data_size;
  }

  // repeated int32 diffuse = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.diffuse_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_diffuse_size());
    total_size += data_size;
  }

  // repeated int32 specular = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.specular_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_specular_size());
    total_size += data_size;
  }

  // repeated int32 emission = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.emission_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_emission_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Material::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Material::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Material::GetClassData() const { return &_class_data_; }


void Material::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Material*>(&to_msg);
  auto& from = static_cast<const Material&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.Material)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ambient_.MergeFrom(from._impl_.ambient_);
  _this->_impl_.diffuse_.MergeFrom(from._impl_.diffuse_);
  _this->_impl_.specular_.MergeFrom(from._impl_.specular_);
  _this->_impl_.emission_.MergeFrom(from._impl_.emission_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.shininess_ = from._impl_.shininess_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.transparency_ = from._impl_.transparency_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.usealphablend_ = from._impl_.usealphablend_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Material::InternalSwap(Material* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ambient_.InternalSwap(&other->_impl_.ambient_);
  _impl_.diffuse_.InternalSwap(&other->_impl_.diffuse_);
  _impl_.specular_.InternalSwap(&other->_impl_.specular_);
  _impl_.emission_.InternalSwap(&other->_impl_.emission_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Material, _impl_.usealphablend_)
      + sizeof(Material::_impl_.usealphablend_)
      - PROTOBUF_FIELD_OFFSET(Material, _impl_.shininess_)>(
          reinterpret_cast<char*>(&_impl_.shininess_),
          reinterpret_cast<char*>(&other->_impl_.shininess_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Material::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbmesh_2eproto_getter, &descriptor_table_sbmesh_2eproto_once,
      file_level_metadata_sbmesh_2eproto[0]);
}

// ===================================================================

class MeshModel::_Internal {
 public:
  using HasBits = decltype(std::declval<MeshModel>()._impl_._has_bits_);
  static void set_has_meshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_culling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

void MeshModel::clear_materialtodiffusetexturemapping() {
  _impl_.materialtodiffusetexturemapping_.Clear();
}
void MeshModel::clear_materialtonormaltexturemapping() {
  _impl_.materialtonormaltexturemapping_.Clear();
}
void MeshModel::clear_materialtospeculartexturemapping() {
  _impl_.materialtospeculartexturemapping_.Clear();
}
void MeshModel::clear_materialtofaceindices() {
  _impl_.materialtofaceindices_.Clear();
}
void MeshModel::clear_materialtotransparenttexturemapping() {
  _impl_.materialtotransparenttexturemapping_.Clear();
}
void MeshModel::clear_materialtoglossytexturemapping() {
  _impl_.materialtoglossytexturemapping_.Clear();
}
MeshModel::MeshModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.MeshModel)
}
MeshModel::MeshModel(const MeshModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeshModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materials_){from._impl_.materials_}
    , decltype(_impl_.vertexcoordinates_){from._impl_.vertexcoordinates_}
    , decltype(_impl_.normals_){from._impl_.normals_}
    , decltype(_impl_.tangents_){from._impl_.tangents_}
    , decltype(_impl_.binormals_){from._impl_.binormals_}
    , decltype(_impl_.texturecoordinates_){from._impl_.texturecoordinates_}
    , decltype(_impl_.trianglefaceindices_){from._impl_.trianglefaceindices_}
    , decltype(_impl_.materialindices_){from._impl_.materialindices_}
    , decltype(_impl_.normalindices_){from._impl_.normalindices_}
    , decltype(_impl_.texturecoordinatesindices_){from._impl_.texturecoordinatesindices_}
    , decltype(_impl_.materialnames_){from._impl_.materialnames_}
    , decltype(_impl_.materialtodiffusetexturemapping_){from._impl_.materialtodiffusetexturemapping_}
    , decltype(_impl_.materialtonormaltexturemapping_){from._impl_.materialtonormaltexturemapping_}
    , decltype(_impl_.materialtospeculartexturemapping_){from._impl_.materialtospeculartexturemapping_}
    , decltype(_impl_.materialtofaceindices_){from._impl_.materialtofaceindices_}
    , decltype(_impl_.materialtotransparenttexturemapping_){from._impl_.materialtotransparenttexturemapping_}
    , decltype(_impl_.materialtoglossytexturemapping_){from._impl_.materialtoglossytexturemapping_}
    , decltype(_impl_.meshname_){}
    , decltype(_impl_.culling_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.meshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_meshname()) {
    _this->_impl_.meshname_.Set(from._internal_meshname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.culling_ = from._impl_.culling_;
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.MeshModel)
}

inline void MeshModel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materials_){arena}
    , decltype(_impl_.vertexcoordinates_){arena}
    , decltype(_impl_.normals_){arena}
    , decltype(_impl_.tangents_){arena}
    , decltype(_impl_.binormals_){arena}
    , decltype(_impl_.texturecoordinates_){arena}
    , decltype(_impl_.trianglefaceindices_){arena}
    , decltype(_impl_.materialindices_){arena}
    , decltype(_impl_.normalindices_){arena}
    , decltype(_impl_.texturecoordinatesindices_){arena}
    , decltype(_impl_.materialnames_){arena}
    , decltype(_impl_.materialtodiffusetexturemapping_){arena}
    , decltype(_impl_.materialtonormaltexturemapping_){arena}
    , decltype(_impl_.materialtospeculartexturemapping_){arena}
    , decltype(_impl_.materialtofaceindices_){arena}
    , decltype(_impl_.materialtotransparenttexturemapping_){arena}
    , decltype(_impl_.materialtoglossytexturemapping_){arena}
    , decltype(_impl_.meshname_){}
    , decltype(_impl_.culling_){false}
  };
  _impl_.meshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MeshModel::~MeshModel() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.MeshModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materials_.~RepeatedPtrField();
  _impl_.vertexcoordinates_.~RepeatedField();
  _impl_.normals_.~RepeatedField();
  _impl_.tangents_.~RepeatedField();
  _impl_.binormals_.~RepeatedField();
  _impl_.texturecoordinates_.~RepeatedField();
  _impl_.trianglefaceindices_.~RepeatedField();
  _impl_.materialindices_.~RepeatedField();
  _impl_.normalindices_.~RepeatedField();
  _impl_.texturecoordinatesindices_.~RepeatedField();
  _impl_.materialnames_.~RepeatedPtrField();
  _impl_.materialtodiffusetexturemapping_.~RepeatedPtrField();
  _impl_.materialtonormaltexturemapping_.~RepeatedPtrField();
  _impl_.materialtospeculartexturemapping_.~RepeatedPtrField();
  _impl_.materialtofaceindices_.~RepeatedPtrField();
  _impl_.materialtotransparenttexturemapping_.~RepeatedPtrField();
  _impl_.materialtoglossytexturemapping_.~RepeatedPtrField();
  _impl_.meshname_.Destroy();
}

void MeshModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshModel::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.MeshModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.materials_.Clear();
  _impl_.vertexcoordinates_.Clear();
  _impl_.normals_.Clear();
  _impl_.tangents_.Clear();
  _impl_.binormals_.Clear();
  _impl_.texturecoordinates_.Clear();
  _impl_.trianglefaceindices_.Clear();
  _impl_.materialindices_.Clear();
  _impl_.normalindices_.Clear();
  _impl_.texturecoordinatesindices_.Clear();
  _impl_.materialnames_.Clear();
  _impl_.materialtodiffusetexturemapping_.Clear();
  _impl_.materialtonormaltexturemapping_.Clear();
  _impl_.materialtospeculartexturemapping_.Clear();
  _impl_.materialtofaceindices_.Clear();
  _impl_.materialtotransparenttexturemapping_.Clear();
  _impl_.materialtoglossytexturemapping_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.meshname_.ClearNonDefaultToEmpty();
  }
  _impl_.culling_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string meshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_meshname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.MeshModel.meshName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.Material materials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float vertexCoordinates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vertexcoordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vertexcoordinates(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float normals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_normals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_normals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float tangents = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_tangents(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float binormals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_binormals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_binormals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float textureCoordinates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_texturecoordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_texturecoordinates(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 triangleFaceIndices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_trianglefaceindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_trianglefaceindices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 materialIndices = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_materialindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_materialindices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 normalIndices = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_normalindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_normalindices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 textureCoordinatesIndices = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_texturecoordinatesindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_texturecoordinatesindices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool culling = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_culling(&has_bits);
          _impl_.culling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string materialNames = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_materialnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SmartBodyBinary.MeshModel.materialNames");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materialtodiffusetexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materialtonormaltexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtospeculartexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtofaceindices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtotransparenttexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_materialtoglossytexturemapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.MeshModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string meshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_meshname().data(), static_cast<int>(this->_internal_meshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.MeshModel.meshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_meshname(), target);
  }

  // repeated .SmartBodyBinary.Material materials = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materials_size()); i < n; i++) {
    const auto& repfield = this->_internal_materials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float vertexCoordinates = 3;
  for (int i = 0, n = this->_internal_vertexcoordinates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_vertexcoordinates(i), target);
  }

  // repeated float normals = 4;
  for (int i = 0, n = this->_internal_normals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_normals(i), target);
  }

  // repeated float tangents = 5;
  for (int i = 0, n = this->_internal_tangents_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_tangents(i), target);
  }

  // repeated float binormals = 6;
  for (int i = 0, n = this->_internal_binormals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_binormals(i), target);
  }

  // repeated float textureCoordinates = 7;
  for (int i = 0, n = this->_internal_texturecoordinates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_texturecoordinates(i), target);
  }

  // repeated int32 triangleFaceIndices = 8;
  for (int i = 0, n = this->_internal_trianglefaceindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_trianglefaceindices(i), target);
  }

  // repeated int32 materialIndices = 9;
  for (int i = 0, n = this->_internal_materialindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_materialindices(i), target);
  }

  // repeated int32 normalIndices = 10;
  for (int i = 0, n = this->_internal_normalindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_normalindices(i), target);
  }

  // repeated int32 textureCoordinatesIndices = 11;
  for (int i = 0, n = this->_internal_texturecoordinatesindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_texturecoordinatesindices(i), target);
  }

  // required bool culling = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_culling(), target);
  }

  // repeated string materialNames = 13;
  for (int i = 0, n = this->_internal_materialnames_size(); i < n; i++) {
    const auto& s = this->_internal_materialnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.MeshModel.materialNames");
    target = stream->WriteString(13, s, target);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materialtodiffusetexturemapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_materialtodiffusetexturemapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materialtonormaltexturemapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_materialtonormaltexturemapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materialtospeculartexturemapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_materialtospeculartexturemapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materialtofaceindices_size()); i < n; i++) {
    const auto& repfield = this->_internal_materialtofaceindices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materialtotransparenttexturemapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_materialtotransparenttexturemapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materialtoglossytexturemapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_materialtoglossytexturemapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.MeshModel)
  return target;
}

size_t MeshModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.MeshModel)
  size_t total_size = 0;

  if (_internal_has_meshname()) {
    // required string meshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meshname());
  }

  if (_internal_has_culling()) {
    // required bool culling = 12;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MeshModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.MeshModel)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string meshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meshname());

    // required bool culling = 12;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SmartBodyBinary.Material materials = 2;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->_impl_.materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float vertexCoordinates = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vertexcoordinates_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vertexcoordinates_size());
    total_size += data_size;
  }

  // repeated float normals = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normals_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_normals_size());
    total_size += data_size;
  }

  // repeated float tangents = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tangents_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tangents_size());
    total_size += data_size;
  }

  // repeated float binormals = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_binormals_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_binormals_size());
    total_size += data_size;
  }

  // repeated float textureCoordinates = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_texturecoordinates_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_texturecoordinates_size());
    total_size += data_size;
  }

  // repeated int32 triangleFaceIndices = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.trianglefaceindices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_trianglefaceindices_size());
    total_size += data_size;
  }

  // repeated int32 materialIndices = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.materialindices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_materialindices_size());
    total_size += data_size;
  }

  // repeated int32 normalIndices = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.normalindices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_normalindices_size());
    total_size += data_size;
  }

  // repeated int32 textureCoordinatesIndices = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.texturecoordinatesindices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_texturecoordinatesindices_size());
    total_size += data_size;
  }

  // repeated string materialNames = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.materialnames_.size());
  for (int i = 0, n = _impl_.materialnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.materialnames_.Get(i));
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  total_size += 1UL * this->_internal_materialtodiffusetexturemapping_size();
  for (const auto& msg : this->_impl_.materialtodiffusetexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  total_size += 1UL * this->_internal_materialtonormaltexturemapping_size();
  for (const auto& msg : this->_impl_.materialtonormaltexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  total_size += 2UL * this->_internal_materialtospeculartexturemapping_size();
  for (const auto& msg : this->_impl_.materialtospeculartexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  total_size += 2UL * this->_internal_materialtofaceindices_size();
  for (const auto& msg : this->_impl_.materialtofaceindices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  total_size += 2UL * this->_internal_materialtotransparenttexturemapping_size();
  for (const auto& msg : this->_impl_.materialtotransparenttexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  total_size += 2UL * this->_internal_materialtoglossytexturemapping_size();
  for (const auto& msg : this->_impl_.materialtoglossytexturemapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeshModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeshModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeshModel::GetClassData() const { return &_class_data_; }


void MeshModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeshModel*>(&to_msg);
  auto& from = static_cast<const MeshModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.MeshModel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.materials_.MergeFrom(from._impl_.materials_);
  _this->_impl_.vertexcoordinates_.MergeFrom(from._impl_.vertexcoordinates_);
  _this->_impl_.normals_.MergeFrom(from._impl_.normals_);
  _this->_impl_.tangents_.MergeFrom(from._impl_.tangents_);
  _this->_impl_.binormals_.MergeFrom(from._impl_.binormals_);
  _this->_impl_.texturecoordinates_.MergeFrom(from._impl_.texturecoordinates_);
  _this->_impl_.trianglefaceindices_.MergeFrom(from._impl_.trianglefaceindices_);
  _this->_impl_.materialindices_.MergeFrom(from._impl_.materialindices_);
  _this->_impl_.normalindices_.MergeFrom(from._impl_.normalindices_);
  _this->_impl_.texturecoordinatesindices_.MergeFrom(from._impl_.texturecoordinatesindices_);
  _this->_impl_.materialnames_.MergeFrom(from._impl_.materialnames_);
  _this->_impl_.materialtodiffusetexturemapping_.MergeFrom(from._impl_.materialtodiffusetexturemapping_);
  _this->_impl_.materialtonormaltexturemapping_.MergeFrom(from._impl_.materialtonormaltexturemapping_);
  _this->_impl_.materialtospeculartexturemapping_.MergeFrom(from._impl_.materialtospeculartexturemapping_);
  _this->_impl_.materialtofaceindices_.MergeFrom(from._impl_.materialtofaceindices_);
  _this->_impl_.materialtotransparenttexturemapping_.MergeFrom(from._impl_.materialtotransparenttexturemapping_);
  _this->_impl_.materialtoglossytexturemapping_.MergeFrom(from._impl_.materialtoglossytexturemapping_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_meshname(from._internal_meshname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.culling_ = from._impl_.culling_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeshModel::CopyFrom(const MeshModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.MeshModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshModel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materials_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materialtodiffusetexturemapping_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materialtonormaltexturemapping_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materialtospeculartexturemapping_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materialtofaceindices_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materialtotransparenttexturemapping_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materialtoglossytexturemapping_))
    return false;
  return true;
}

void MeshModel::InternalSwap(MeshModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.materials_.InternalSwap(&other->_impl_.materials_);
  _impl_.vertexcoordinates_.InternalSwap(&other->_impl_.vertexcoordinates_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.tangents_.InternalSwap(&other->_impl_.tangents_);
  _impl_.binormals_.InternalSwap(&other->_impl_.binormals_);
  _impl_.texturecoordinates_.InternalSwap(&other->_impl_.texturecoordinates_);
  _impl_.trianglefaceindices_.InternalSwap(&other->_impl_.trianglefaceindices_);
  _impl_.materialindices_.InternalSwap(&other->_impl_.materialindices_);
  _impl_.normalindices_.InternalSwap(&other->_impl_.normalindices_);
  _impl_.texturecoordinatesindices_.InternalSwap(&other->_impl_.texturecoordinatesindices_);
  _impl_.materialnames_.InternalSwap(&other->_impl_.materialnames_);
  _impl_.materialtodiffusetexturemapping_.InternalSwap(&other->_impl_.materialtodiffusetexturemapping_);
  _impl_.materialtonormaltexturemapping_.InternalSwap(&other->_impl_.materialtonormaltexturemapping_);
  _impl_.materialtospeculartexturemapping_.InternalSwap(&other->_impl_.materialtospeculartexturemapping_);
  _impl_.materialtofaceindices_.InternalSwap(&other->_impl_.materialtofaceindices_);
  _impl_.materialtotransparenttexturemapping_.InternalSwap(&other->_impl_.materialtotransparenttexturemapping_);
  _impl_.materialtoglossytexturemapping_.InternalSwap(&other->_impl_.materialtoglossytexturemapping_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meshname_, lhs_arena,
      &other->_impl_.meshname_, rhs_arena
  );
  swap(_impl_.culling_, other->_impl_.culling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbmesh_2eproto_getter, &descriptor_table_sbmesh_2eproto_once,
      file_level_metadata_sbmesh_2eproto[1]);
}

// ===================================================================

class SkinWeight::_Internal {
 public:
  using HasBits = decltype(std::declval<SkinWeight>()._impl_._has_bits_);
  static void set_has_sourcemeshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SkinWeight::SkinWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.SkinWeight)
}
SkinWeight::SkinWeight(const SkinWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkinWeight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.influencejointnames_){from._impl_.influencejointnames_}
    , decltype(_impl_.bindweights_){from._impl_.bindweights_}
    , decltype(_impl_.bindposematrice_){from._impl_.bindposematrice_}
    , decltype(_impl_.bindshapematrix_){from._impl_.bindshapematrix_}
    , decltype(_impl_.numberofinfluencejoints_){from._impl_.numberofinfluencejoints_}
    , decltype(_impl_.weightindices_){from._impl_.weightindices_}
    , decltype(_impl_.jointnameindices_){from._impl_.jointnameindices_}
    , decltype(_impl_.sourcemeshname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sourcemeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcemeshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourcemeshname()) {
    _this->_impl_.sourcemeshname_.Set(from._internal_sourcemeshname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.SkinWeight)
}

inline void SkinWeight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.influencejointnames_){arena}
    , decltype(_impl_.bindweights_){arena}
    , decltype(_impl_.bindposematrice_){arena}
    , decltype(_impl_.bindshapematrix_){arena}
    , decltype(_impl_.numberofinfluencejoints_){arena}
    , decltype(_impl_.weightindices_){arena}
    , decltype(_impl_.jointnameindices_){arena}
    , decltype(_impl_.sourcemeshname_){}
  };
  _impl_.sourcemeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcemeshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkinWeight::~SkinWeight() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.SkinWeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkinWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.influencejointnames_.~RepeatedPtrField();
  _impl_.bindweights_.~RepeatedField();
  _impl_.bindposematrice_.~RepeatedField();
  _impl_.bindshapematrix_.~RepeatedField();
  _impl_.numberofinfluencejoints_.~RepeatedField();
  _impl_.weightindices_.~RepeatedField();
  _impl_.jointnameindices_.~RepeatedField();
  _impl_.sourcemeshname_.Destroy();
}

void SkinWeight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkinWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.SkinWeight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.influencejointnames_.Clear();
  _impl_.bindweights_.Clear();
  _impl_.bindposematrice_.Clear();
  _impl_.bindshapematrix_.Clear();
  _impl_.numberofinfluencejoints_.Clear();
  _impl_.weightindices_.Clear();
  _impl_.jointnameindices_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sourcemeshname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkinWeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string sourceMeshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourcemeshname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.SkinWeight.sourceMeshName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string influenceJointNames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_influencejointnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SmartBodyBinary.SkinWeight.influenceJointNames");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float bindWeights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bindweights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bindweights(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float bindPoseMatrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bindposematrice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bindposematrice(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float bindShapeMatrix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bindshapematrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bindshapematrix(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 numberOfInfluenceJoints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_numberofinfluencejoints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_numberofinfluencejoints(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 weightIndices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weightindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_weightindices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 jointNameIndices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_jointnameindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_jointnameindices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkinWeight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.SkinWeight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string sourceMeshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcemeshname().data(), static_cast<int>(this->_internal_sourcemeshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.SkinWeight.sourceMeshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcemeshname(), target);
  }

  // repeated string influenceJointNames = 2;
  for (int i = 0, n = this->_internal_influencejointnames_size(); i < n; i++) {
    const auto& s = this->_internal_influencejointnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.SkinWeight.influenceJointNames");
    target = stream->WriteString(2, s, target);
  }

  // repeated float bindWeights = 3;
  for (int i = 0, n = this->_internal_bindweights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_bindweights(i), target);
  }

  // repeated float bindPoseMatrice = 4;
  for (int i = 0, n = this->_internal_bindposematrice_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_bindposematrice(i), target);
  }

  // repeated float bindShapeMatrix = 5;
  for (int i = 0, n = this->_internal_bindshapematrix_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_bindshapematrix(i), target);
  }

  // repeated int32 numberOfInfluenceJoints = 6;
  for (int i = 0, n = this->_internal_numberofinfluencejoints_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_numberofinfluencejoints(i), target);
  }

  // repeated int32 weightIndices = 7;
  for (int i = 0, n = this->_internal_weightindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_weightindices(i), target);
  }

  // repeated int32 jointNameIndices = 8;
  for (int i = 0, n = this->_internal_jointnameindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_jointnameindices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.SkinWeight)
  return target;
}

size_t SkinWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.SkinWeight)
  size_t total_size = 0;

  // required string sourceMeshName = 1;
  if (_internal_has_sourcemeshname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcemeshname());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string influenceJointNames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.influencejointnames_.size());
  for (int i = 0, n = _impl_.influencejointnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.influencejointnames_.Get(i));
  }

  // repeated float bindWeights = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bindweights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bindweights_size());
    total_size += data_size;
  }

  // repeated float bindPoseMatrice = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bindposematrice_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bindposematrice_size());
    total_size += data_size;
  }

  // repeated float bindShapeMatrix = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bindshapematrix_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bindshapematrix_size());
    total_size += data_size;
  }

  // repeated int32 numberOfInfluenceJoints = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.numberofinfluencejoints_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_numberofinfluencejoints_size());
    total_size += data_size;
  }

  // repeated int32 weightIndices = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.weightindices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_weightindices_size());
    total_size += data_size;
  }

  // repeated int32 jointNameIndices = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.jointnameindices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_jointnameindices_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkinWeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkinWeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkinWeight::GetClassData() const { return &_class_data_; }


void SkinWeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkinWeight*>(&to_msg);
  auto& from = static_cast<const SkinWeight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.SkinWeight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.influencejointnames_.MergeFrom(from._impl_.influencejointnames_);
  _this->_impl_.bindweights_.MergeFrom(from._impl_.bindweights_);
  _this->_impl_.bindposematrice_.MergeFrom(from._impl_.bindposematrice_);
  _this->_impl_.bindshapematrix_.MergeFrom(from._impl_.bindshapematrix_);
  _this->_impl_.numberofinfluencejoints_.MergeFrom(from._impl_.numberofinfluencejoints_);
  _this->_impl_.weightindices_.MergeFrom(from._impl_.weightindices_);
  _this->_impl_.jointnameindices_.MergeFrom(from._impl_.jointnameindices_);
  if (from._internal_has_sourcemeshname()) {
    _this->_internal_set_sourcemeshname(from._internal_sourcemeshname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkinWeight::CopyFrom(const SkinWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.SkinWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinWeight::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SkinWeight::InternalSwap(SkinWeight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.influencejointnames_.InternalSwap(&other->_impl_.influencejointnames_);
  _impl_.bindweights_.InternalSwap(&other->_impl_.bindweights_);
  _impl_.bindposematrice_.InternalSwap(&other->_impl_.bindposematrice_);
  _impl_.bindshapematrix_.InternalSwap(&other->_impl_.bindshapematrix_);
  _impl_.numberofinfluencejoints_.InternalSwap(&other->_impl_.numberofinfluencejoints_);
  _impl_.weightindices_.InternalSwap(&other->_impl_.weightindices_);
  _impl_.jointnameindices_.InternalSwap(&other->_impl_.jointnameindices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcemeshname_, lhs_arena,
      &other->_impl_.sourcemeshname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SkinWeight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbmesh_2eproto_getter, &descriptor_table_sbmesh_2eproto_once,
      file_level_metadata_sbmesh_2eproto[2]);
}

// ===================================================================

class StaticMesh::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticMesh>()._impl_._has_bits_);
  static void set_has_staticmeshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StaticMesh::StaticMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.StaticMesh)
}
StaticMesh::StaticMesh(const StaticMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StaticMesh* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meshmodels_){from._impl_.meshmodels_}
    , decltype(_impl_.staticmeshname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.staticmeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staticmeshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_staticmeshname()) {
    _this->_impl_.staticmeshname_.Set(from._internal_staticmeshname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StaticMesh)
}

inline void StaticMesh::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meshmodels_){arena}
    , decltype(_impl_.staticmeshname_){}
  };
  _impl_.staticmeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staticmeshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StaticMesh::~StaticMesh() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StaticMesh)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StaticMesh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meshmodels_.~RepeatedPtrField();
  _impl_.staticmeshname_.Destroy();
}

void StaticMesh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StaticMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StaticMesh)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meshmodels_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.staticmeshname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticMesh::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string staticMeshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_staticmeshname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.StaticMesh.staticMeshName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.MeshModel meshModels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meshmodels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StaticMesh::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StaticMesh)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string staticMeshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_staticmeshname().data(), static_cast<int>(this->_internal_staticmeshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StaticMesh.staticMeshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_staticmeshname(), target);
  }

  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_meshmodels_size()); i < n; i++) {
    const auto& repfield = this->_internal_meshmodels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StaticMesh)
  return target;
}

size_t StaticMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StaticMesh)
  size_t total_size = 0;

  // required string staticMeshName = 1;
  if (_internal_has_staticmeshname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staticmeshname());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  total_size += 1UL * this->_internal_meshmodels_size();
  for (const auto& msg : this->_impl_.meshmodels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticMesh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StaticMesh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticMesh::GetClassData() const { return &_class_data_; }


void StaticMesh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StaticMesh*>(&to_msg);
  auto& from = static_cast<const StaticMesh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StaticMesh)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.meshmodels_.MergeFrom(from._impl_.meshmodels_);
  if (from._internal_has_staticmeshname()) {
    _this->_internal_set_staticmeshname(from._internal_staticmeshname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticMesh::CopyFrom(const StaticMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StaticMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticMesh::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.meshmodels_))
    return false;
  return true;
}

void StaticMesh::InternalSwap(StaticMesh* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.meshmodels_.InternalSwap(&other->_impl_.meshmodels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.staticmeshname_, lhs_arena,
      &other->_impl_.staticmeshname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticMesh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbmesh_2eproto_getter, &descriptor_table_sbmesh_2eproto_once,
      file_level_metadata_sbmesh_2eproto[3]);
}

// ===================================================================

class DeformableMesh::_Internal {
 public:
  using HasBits = decltype(std::declval<DeformableMesh>()._impl_._has_bits_);
  static void set_has_deformablemeshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SmartBodyBinary::StaticMesh& staticmesh(const DeformableMesh* msg);
  static void set_has_staticmesh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::SmartBodyBinary::StaticMesh&
DeformableMesh::_Internal::staticmesh(const DeformableMesh* msg) {
  return *msg->_impl_.staticmesh_;
}
void DeformableMesh::clear_morphtargets() {
  _impl_.morphtargets_.Clear();
}
DeformableMesh::DeformableMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SmartBodyBinary.DeformableMesh)
}
DeformableMesh::DeformableMesh(const DeformableMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeformableMesh* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skinweights_){from._impl_.skinweights_}
    , decltype(_impl_.morphtargets_){from._impl_.morphtargets_}
    , decltype(_impl_.deformablemeshname_){}
    , decltype(_impl_.staticmesh_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deformablemeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deformablemeshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deformablemeshname()) {
    _this->_impl_.deformablemeshname_.Set(from._internal_deformablemeshname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_staticmesh()) {
    _this->_impl_.staticmesh_ = new ::SmartBodyBinary::StaticMesh(*from._impl_.staticmesh_);
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.DeformableMesh)
}

inline void DeformableMesh::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skinweights_){arena}
    , decltype(_impl_.morphtargets_){arena}
    , decltype(_impl_.deformablemeshname_){}
    , decltype(_impl_.staticmesh_){nullptr}
  };
  _impl_.deformablemeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deformablemeshname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeformableMesh::~DeformableMesh() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.DeformableMesh)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeformableMesh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skinweights_.~RepeatedPtrField();
  _impl_.morphtargets_.~RepeatedPtrField();
  _impl_.deformablemeshname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.staticmesh_;
}

void DeformableMesh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeformableMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.DeformableMesh)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skinweights_.Clear();
  _impl_.morphtargets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deformablemeshname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.staticmesh_ != nullptr);
      _impl_.staticmesh_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeformableMesh::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string deformableMeshName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deformablemeshname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SmartBodyBinary.DeformableMesh.deformableMeshName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .SmartBodyBinary.StaticMesh staticMesh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_staticmesh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skinweights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_morphtargets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeformableMesh::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.DeformableMesh)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string deformableMeshName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deformablemeshname().data(), static_cast<int>(this->_internal_deformablemeshname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.DeformableMesh.deformableMeshName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deformablemeshname(), target);
  }

  // required .SmartBodyBinary.StaticMesh staticMesh = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::staticmesh(this),
        _Internal::staticmesh(this).GetCachedSize(), target, stream);
  }

  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skinweights_size()); i < n; i++) {
    const auto& repfield = this->_internal_skinweights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_morphtargets_size()); i < n; i++) {
    const auto& repfield = this->_internal_morphtargets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.DeformableMesh)
  return target;
}

size_t DeformableMesh::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.DeformableMesh)
  size_t total_size = 0;

  if (_internal_has_deformablemeshname()) {
    // required string deformableMeshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deformablemeshname());
  }

  if (_internal_has_staticmesh()) {
    // required .SmartBodyBinary.StaticMesh staticMesh = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.staticmesh_);
  }

  return total_size;
}
size_t DeformableMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.DeformableMesh)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string deformableMeshName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deformablemeshname());

    // required .SmartBodyBinary.StaticMesh staticMesh = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.staticmesh_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  total_size += 1UL * this->_internal_skinweights_size();
  for (const auto& msg : this->_impl_.skinweights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  total_size += 1UL * this->_internal_morphtargets_size();
  for (const auto& msg : this->_impl_.morphtargets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeformableMesh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeformableMesh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeformableMesh::GetClassData() const { return &_class_data_; }


void DeformableMesh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeformableMesh*>(&to_msg);
  auto& from = static_cast<const DeformableMesh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.DeformableMesh)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skinweights_.MergeFrom(from._impl_.skinweights_);
  _this->_impl_.morphtargets_.MergeFrom(from._impl_.morphtargets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_deformablemeshname(from._internal_deformablemeshname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_staticmesh()->::SmartBodyBinary::StaticMesh::MergeFrom(
          from._internal_staticmesh());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeformableMesh::CopyFrom(const DeformableMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.DeformableMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeformableMesh::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.skinweights_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.morphtargets_))
    return false;
  if (_internal_has_staticmesh()) {
    if (!_impl_.staticmesh_->IsInitialized()) return false;
  }
  return true;
}

void DeformableMesh::InternalSwap(DeformableMesh* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.skinweights_.InternalSwap(&other->_impl_.skinweights_);
  _impl_.morphtargets_.InternalSwap(&other->_impl_.morphtargets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deformablemeshname_, lhs_arena,
      &other->_impl_.deformablemeshname_, rhs_arena
  );
  swap(_impl_.staticmesh_, other->_impl_.staticmesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeformableMesh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sbmesh_2eproto_getter, &descriptor_table_sbmesh_2eproto_once,
      file_level_metadata_sbmesh_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::Material*
Arena::CreateMaybeMessage< ::SmartBodyBinary::Material >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::Material >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::MeshModel*
Arena::CreateMaybeMessage< ::SmartBodyBinary::MeshModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::MeshModel >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::SkinWeight*
Arena::CreateMaybeMessage< ::SmartBodyBinary::SkinWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::SkinWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StaticMesh*
Arena::CreateMaybeMessage< ::SmartBodyBinary::StaticMesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::StaticMesh >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::DeformableMesh*
Arena::CreateMaybeMessage< ::SmartBodyBinary::DeformableMesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartBodyBinary::DeformableMesh >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
