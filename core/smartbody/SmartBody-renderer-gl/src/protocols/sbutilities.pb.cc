// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbutilities.proto

#include "sbutilities.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SmartBodyBinary {
class StringToStringMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringToStringMap> _instance;
} _StringToStringMap_default_instance_;
class StringToFloatVectorMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringToFloatVectorMap> _instance;
} _StringToFloatVectorMap_default_instance_;
class StringToIntVectorMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringToIntVectorMap> _instance;
} _StringToIntVectorMap_default_instance_;
class StringToStringVectorMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringToStringVectorMap> _instance;
} _StringToStringVectorMap_default_instance_;
}  // namespace SmartBodyBinary
static void InitDefaultsscc_info_StringToFloatVectorMap_sbutilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_StringToFloatVectorMap_default_instance_;
    new (ptr) ::SmartBodyBinary::StringToFloatVectorMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::StringToFloatVectorMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringToFloatVectorMap_sbutilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringToFloatVectorMap_sbutilities_2eproto}, {}};

static void InitDefaultsscc_info_StringToIntVectorMap_sbutilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_StringToIntVectorMap_default_instance_;
    new (ptr) ::SmartBodyBinary::StringToIntVectorMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::StringToIntVectorMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringToIntVectorMap_sbutilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringToIntVectorMap_sbutilities_2eproto}, {}};

static void InitDefaultsscc_info_StringToStringMap_sbutilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_StringToStringMap_default_instance_;
    new (ptr) ::SmartBodyBinary::StringToStringMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::StringToStringMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringToStringMap_sbutilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringToStringMap_sbutilities_2eproto}, {}};

static void InitDefaultsscc_info_StringToStringVectorMap_sbutilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartBodyBinary::_StringToStringVectorMap_default_instance_;
    new (ptr) ::SmartBodyBinary::StringToStringVectorMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartBodyBinary::StringToStringVectorMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringToStringVectorMap_sbutilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringToStringVectorMap_sbutilities_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sbutilities_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sbutilities_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sbutilities_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sbutilities_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringMap, to_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToFloatVectorMap, to_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToIntVectorMap, to_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, from_),
  PROTOBUF_FIELD_OFFSET(::SmartBodyBinary::StringToStringVectorMap, to_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SmartBodyBinary::StringToStringMap)},
  { 9, 16, sizeof(::SmartBodyBinary::StringToFloatVectorMap)},
  { 18, 25, sizeof(::SmartBodyBinary::StringToIntVectorMap)},
  { 27, 34, sizeof(::SmartBodyBinary::StringToStringVectorMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_StringToStringMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_StringToFloatVectorMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_StringToIntVectorMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartBodyBinary::_StringToStringVectorMap_default_instance_),
};

const char descriptor_table_protodef_sbutilities_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sbutilities.proto\022\017SmartBodyBinary\"-\n\021"
  "StringToStringMap\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 "
  "\002(\t\"2\n\026StringToFloatVectorMap\022\014\n\004from\030\001 "
  "\002(\t\022\n\n\002to\030\002 \003(\002\"0\n\024StringToIntVectorMap\022"
  "\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \003(\005\"3\n\027StringToStr"
  "ingVectorMap\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \003(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sbutilities_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sbutilities_2eproto_sccs[4] = {
  &scc_info_StringToFloatVectorMap_sbutilities_2eproto.base,
  &scc_info_StringToIntVectorMap_sbutilities_2eproto.base,
  &scc_info_StringToStringMap_sbutilities_2eproto.base,
  &scc_info_StringToStringVectorMap_sbutilities_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sbutilities_2eproto_once;
static bool descriptor_table_sbutilities_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sbutilities_2eproto = {
  &descriptor_table_sbutilities_2eproto_initialized, descriptor_table_protodef_sbutilities_2eproto, "sbutilities.proto", 238,
  &descriptor_table_sbutilities_2eproto_once, descriptor_table_sbutilities_2eproto_sccs, descriptor_table_sbutilities_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_sbutilities_2eproto::offsets,
  file_level_metadata_sbutilities_2eproto, 4, file_level_enum_descriptors_sbutilities_2eproto, file_level_service_descriptors_sbutilities_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sbutilities_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sbutilities_2eproto), true);
namespace SmartBodyBinary {

// ===================================================================

void StringToStringMap::InitAsDefaultInstance() {
}
class StringToStringMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToStringMap>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StringToStringMap::StringToStringMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.StringToStringMap)
}
StringToStringMap::StringToStringMap(const StringToStringMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToStringMap)
}

void StringToStringMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringToStringMap_sbutilities_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringToStringMap::~StringToStringMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToStringMap)
  SharedDtor();
}

void StringToStringMap::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringToStringMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringToStringMap& StringToStringMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringToStringMap_sbutilities_2eproto.base);
  return *internal_default_instance();
}


void StringToStringMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToStringMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StringToStringMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.StringToStringMap.from");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.StringToStringMap.to");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringToStringMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToStringMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // required string to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringMap.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToStringMap)
  return target;
}

size_t StringToStringMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SmartBodyBinary.StringToStringMap)
  size_t total_size = 0;

  if (_internal_has_from()) {
    // required string from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  if (_internal_has_to()) {
    // required string to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  return total_size;
}
size_t StringToStringMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToStringMap)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());

    // required string to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringToStringMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.StringToStringMap)
  GOOGLE_DCHECK_NE(&from, this);
  const StringToStringMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringToStringMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.StringToStringMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.StringToStringMap)
    MergeFrom(*source);
  }
}

void StringToStringMap::MergeFrom(const StringToStringMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToStringMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
  }
}

void StringToStringMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.StringToStringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToStringMap::CopyFrom(const StringToStringMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToStringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToStringMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StringToStringMap::InternalSwap(StringToStringMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToStringMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringToFloatVectorMap::InitAsDefaultInstance() {
}
class StringToFloatVectorMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToFloatVectorMap>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StringToFloatVectorMap::StringToFloatVectorMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.StringToFloatVectorMap)
}
StringToFloatVectorMap::StringToFloatVectorMap(const StringToFloatVectorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      to_(from.to_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToFloatVectorMap)
}

void StringToFloatVectorMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringToFloatVectorMap_sbutilities_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringToFloatVectorMap::~StringToFloatVectorMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToFloatVectorMap)
  SharedDtor();
}

void StringToFloatVectorMap::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringToFloatVectorMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringToFloatVectorMap& StringToFloatVectorMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringToFloatVectorMap_sbutilities_2eproto.base);
  return *internal_default_instance();
}


void StringToFloatVectorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToFloatVectorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    from_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StringToFloatVectorMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.StringToFloatVectorMap.from");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_to(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_to(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringToFloatVectorMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToFloatVectorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToFloatVectorMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated float to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_to(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToFloatVectorMap)
  return target;
}

size_t StringToFloatVectorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToFloatVectorMap)
  size_t total_size = 0;

  // required string from = 1;
  if (_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float to = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_to_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_to_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringToFloatVectorMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.StringToFloatVectorMap)
  GOOGLE_DCHECK_NE(&from, this);
  const StringToFloatVectorMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringToFloatVectorMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.StringToFloatVectorMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.StringToFloatVectorMap)
    MergeFrom(*source);
  }
}

void StringToFloatVectorMap::MergeFrom(const StringToFloatVectorMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToFloatVectorMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_.MergeFrom(from.to_);
  if (from._internal_has_from()) {
    _has_bits_[0] |= 0x00000001u;
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
}

void StringToFloatVectorMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.StringToFloatVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToFloatVectorMap::CopyFrom(const StringToFloatVectorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToFloatVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToFloatVectorMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StringToFloatVectorMap::InternalSwap(StringToFloatVectorMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_.InternalSwap(&other->to_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToFloatVectorMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringToIntVectorMap::InitAsDefaultInstance() {
}
class StringToIntVectorMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToIntVectorMap>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StringToIntVectorMap::StringToIntVectorMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.StringToIntVectorMap)
}
StringToIntVectorMap::StringToIntVectorMap(const StringToIntVectorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      to_(from.to_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToIntVectorMap)
}

void StringToIntVectorMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringToIntVectorMap_sbutilities_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringToIntVectorMap::~StringToIntVectorMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToIntVectorMap)
  SharedDtor();
}

void StringToIntVectorMap::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringToIntVectorMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringToIntVectorMap& StringToIntVectorMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringToIntVectorMap_sbutilities_2eproto.base);
  return *internal_default_instance();
}


void StringToIntVectorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToIntVectorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    from_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StringToIntVectorMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.StringToIntVectorMap.from");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_to(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_to(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringToIntVectorMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToIntVectorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToIntVectorMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated int32 to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToIntVectorMap)
  return target;
}

size_t StringToIntVectorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToIntVectorMap)
  size_t total_size = 0;

  // required string from = 1;
  if (_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 to = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->to_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_to_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringToIntVectorMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.StringToIntVectorMap)
  GOOGLE_DCHECK_NE(&from, this);
  const StringToIntVectorMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringToIntVectorMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.StringToIntVectorMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.StringToIntVectorMap)
    MergeFrom(*source);
  }
}

void StringToIntVectorMap::MergeFrom(const StringToIntVectorMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToIntVectorMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_.MergeFrom(from.to_);
  if (from._internal_has_from()) {
    _has_bits_[0] |= 0x00000001u;
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
}

void StringToIntVectorMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.StringToIntVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToIntVectorMap::CopyFrom(const StringToIntVectorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToIntVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToIntVectorMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StringToIntVectorMap::InternalSwap(StringToIntVectorMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_.InternalSwap(&other->to_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToIntVectorMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringToStringVectorMap::InitAsDefaultInstance() {
}
class StringToStringVectorMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StringToStringVectorMap>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StringToStringVectorMap::StringToStringVectorMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartBodyBinary.StringToStringVectorMap)
}
StringToStringVectorMap::StringToStringVectorMap(const StringToStringVectorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      to_(from.to_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  // @@protoc_insertion_point(copy_constructor:SmartBodyBinary.StringToStringVectorMap)
}

void StringToStringVectorMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringToStringVectorMap_sbutilities_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringToStringVectorMap::~StringToStringVectorMap() {
  // @@protoc_insertion_point(destructor:SmartBodyBinary.StringToStringVectorMap)
  SharedDtor();
}

void StringToStringVectorMap::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringToStringVectorMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringToStringVectorMap& StringToStringVectorMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringToStringVectorMap_sbutilities_2eproto.base);
  return *internal_default_instance();
}


void StringToStringVectorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartBodyBinary.StringToStringVectorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    from_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StringToStringVectorMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.StringToStringVectorMap.from");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartBodyBinary.StringToStringVectorMap.to");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringToStringVectorMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartBodyBinary.StringToStringVectorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringVectorMap.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated string to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SmartBodyBinary.StringToStringVectorMap.to");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartBodyBinary.StringToStringVectorMap)
  return target;
}

size_t StringToStringVectorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartBodyBinary.StringToStringVectorMap)
  size_t total_size = 0;

  // required string from = 1;
  if (_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(to_.size());
  for (int i = 0, n = to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      to_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringToStringVectorMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartBodyBinary.StringToStringVectorMap)
  GOOGLE_DCHECK_NE(&from, this);
  const StringToStringVectorMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringToStringVectorMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartBodyBinary.StringToStringVectorMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartBodyBinary.StringToStringVectorMap)
    MergeFrom(*source);
  }
}

void StringToStringVectorMap::MergeFrom(const StringToStringVectorMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartBodyBinary.StringToStringVectorMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_.MergeFrom(from.to_);
  if (from._internal_has_from()) {
    _has_bits_[0] |= 0x00000001u;
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
}

void StringToStringVectorMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartBodyBinary.StringToStringVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringToStringVectorMap::CopyFrom(const StringToStringVectorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartBodyBinary.StringToStringVectorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringToStringVectorMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StringToStringVectorMap::InternalSwap(StringToStringVectorMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_.InternalSwap(&other->to_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringToStringVectorMap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToStringMap* Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToStringMap >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::StringToStringMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToFloatVectorMap* Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToFloatVectorMap >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::StringToFloatVectorMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToIntVectorMap* Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToIntVectorMap >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::StringToIntVectorMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartBodyBinary::StringToStringVectorMap* Arena::CreateMaybeMessage< ::SmartBodyBinary::StringToStringVectorMap >(Arena* arena) {
  return Arena::CreateInternal< ::SmartBodyBinary::StringToStringVectorMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
