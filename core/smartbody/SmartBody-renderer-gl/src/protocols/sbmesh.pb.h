// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmesh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sbmesh_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sbmesh_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sbutilities.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sbmesh_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sbmesh_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sbmesh_2eproto;
namespace SmartBodyBinary {
class DeformableMesh;
struct DeformableMeshDefaultTypeInternal;
extern DeformableMeshDefaultTypeInternal _DeformableMesh_default_instance_;
class Material;
struct MaterialDefaultTypeInternal;
extern MaterialDefaultTypeInternal _Material_default_instance_;
class MeshModel;
struct MeshModelDefaultTypeInternal;
extern MeshModelDefaultTypeInternal _MeshModel_default_instance_;
class SkinWeight;
struct SkinWeightDefaultTypeInternal;
extern SkinWeightDefaultTypeInternal _SkinWeight_default_instance_;
class StaticMesh;
struct StaticMeshDefaultTypeInternal;
extern StaticMeshDefaultTypeInternal _StaticMesh_default_instance_;
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> ::SmartBodyBinary::DeformableMesh* Arena::CreateMaybeMessage<::SmartBodyBinary::DeformableMesh>(Arena*);
template<> ::SmartBodyBinary::Material* Arena::CreateMaybeMessage<::SmartBodyBinary::Material>(Arena*);
template<> ::SmartBodyBinary::MeshModel* Arena::CreateMaybeMessage<::SmartBodyBinary::MeshModel>(Arena*);
template<> ::SmartBodyBinary::SkinWeight* Arena::CreateMaybeMessage<::SmartBodyBinary::SkinWeight>(Arena*);
template<> ::SmartBodyBinary::StaticMesh* Arena::CreateMaybeMessage<::SmartBodyBinary::StaticMesh>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SmartBodyBinary {

// ===================================================================

class Material final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.Material) */ {
 public:
  inline Material() : Material(nullptr) {}
  ~Material() override;
  explicit PROTOBUF_CONSTEXPR Material(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Material(const Material& from);
  Material(Material&& from) noexcept
    : Material() {
    *this = ::std::move(from);
  }

  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }
  inline Material& operator=(Material&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Material& default_instance() {
    return *internal_default_instance();
  }
  static inline const Material* internal_default_instance() {
    return reinterpret_cast<const Material*>(
               &_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Material& a, Material& b) {
    a.Swap(&b);
  }
  inline void Swap(Material* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Material* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Material* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Material>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Material& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Material& from) {
    Material::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.Material";
  }
  protected:
  explicit Material(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmbientFieldNumber = 1,
    kDiffuseFieldNumber = 2,
    kSpecularFieldNumber = 3,
    kEmissionFieldNumber = 4,
    kShininessFieldNumber = 5,
    kTransparencyFieldNumber = 6,
    kUseAlphaBlendFieldNumber = 7,
  };
  // repeated int32 ambient = 1;
  int ambient_size() const;
  private:
  int _internal_ambient_size() const;
  public:
  void clear_ambient();
  private:
  int32_t _internal_ambient(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ambient() const;
  void _internal_add_ambient(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ambient();
  public:
  int32_t ambient(int index) const;
  void set_ambient(int index, int32_t value);
  void add_ambient(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ambient() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ambient();

  // repeated int32 diffuse = 2;
  int diffuse_size() const;
  private:
  int _internal_diffuse_size() const;
  public:
  void clear_diffuse();
  private:
  int32_t _internal_diffuse(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_diffuse() const;
  void _internal_add_diffuse(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_diffuse();
  public:
  int32_t diffuse(int index) const;
  void set_diffuse(int index, int32_t value);
  void add_diffuse(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      diffuse() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_diffuse();

  // repeated int32 specular = 3;
  int specular_size() const;
  private:
  int _internal_specular_size() const;
  public:
  void clear_specular();
  private:
  int32_t _internal_specular(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_specular() const;
  void _internal_add_specular(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_specular();
  public:
  int32_t specular(int index) const;
  void set_specular(int index, int32_t value);
  void add_specular(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      specular() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_specular();

  // repeated int32 emission = 4;
  int emission_size() const;
  private:
  int _internal_emission_size() const;
  public:
  void clear_emission();
  private:
  int32_t _internal_emission(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_emission() const;
  void _internal_add_emission(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_emission();
  public:
  int32_t emission(int index) const;
  void set_emission(int index, int32_t value);
  void add_emission(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      emission() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_emission();

  // required int32 shininess = 5;
  bool has_shininess() const;
  private:
  bool _internal_has_shininess() const;
  public:
  void clear_shininess();
  int32_t shininess() const;
  void set_shininess(int32_t value);
  private:
  int32_t _internal_shininess() const;
  void _internal_set_shininess(int32_t value);
  public:

  // required float transparency = 6;
  bool has_transparency() const;
  private:
  bool _internal_has_transparency() const;
  public:
  void clear_transparency();
  float transparency() const;
  void set_transparency(float value);
  private:
  float _internal_transparency() const;
  void _internal_set_transparency(float value);
  public:

  // required bool useAlphaBlend = 7;
  bool has_usealphablend() const;
  private:
  bool _internal_has_usealphablend() const;
  public:
  void clear_usealphablend();
  bool usealphablend() const;
  void set_usealphablend(bool value);
  private:
  bool _internal_usealphablend() const;
  void _internal_set_usealphablend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.Material)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ambient_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > diffuse_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > specular_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > emission_;
    int32_t shininess_;
    float transparency_;
    bool usealphablend_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbmesh_2eproto;
};
// -------------------------------------------------------------------

class MeshModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.MeshModel) */ {
 public:
  inline MeshModel() : MeshModel(nullptr) {}
  ~MeshModel() override;
  explicit PROTOBUF_CONSTEXPR MeshModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshModel(const MeshModel& from);
  MeshModel(MeshModel&& from) noexcept
    : MeshModel() {
    *this = ::std::move(from);
  }

  inline MeshModel& operator=(const MeshModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshModel& operator=(MeshModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshModel* internal_default_instance() {
    return reinterpret_cast<const MeshModel*>(
               &_MeshModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MeshModel& a, MeshModel& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeshModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeshModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MeshModel& from) {
    MeshModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.MeshModel";
  }
  protected:
  explicit MeshModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 2,
    kVertexCoordinatesFieldNumber = 3,
    kNormalsFieldNumber = 4,
    kTangentsFieldNumber = 5,
    kBinormalsFieldNumber = 6,
    kTextureCoordinatesFieldNumber = 7,
    kTriangleFaceIndicesFieldNumber = 8,
    kMaterialIndicesFieldNumber = 9,
    kNormalIndicesFieldNumber = 10,
    kTextureCoordinatesIndicesFieldNumber = 11,
    kMaterialNamesFieldNumber = 13,
    kMaterialToDiffuseTextureMappingFieldNumber = 14,
    kMaterialToNormalTextureMappingFieldNumber = 15,
    kMaterialToSpecularTextureMappingFieldNumber = 16,
    kMaterialToFaceIndicesFieldNumber = 17,
    kMaterialToTransparentTextureMappingFieldNumber = 18,
    kMaterialToGlossyTextureMappingFieldNumber = 19,
    kMeshNameFieldNumber = 1,
    kCullingFieldNumber = 12,
  };
  // repeated .SmartBodyBinary.Material materials = 2;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::SmartBodyBinary::Material* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Material >*
      mutable_materials();
  private:
  const ::SmartBodyBinary::Material& _internal_materials(int index) const;
  ::SmartBodyBinary::Material* _internal_add_materials();
  public:
  const ::SmartBodyBinary::Material& materials(int index) const;
  ::SmartBodyBinary::Material* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Material >&
      materials() const;

  // repeated float vertexCoordinates = 3;
  int vertexcoordinates_size() const;
  private:
  int _internal_vertexcoordinates_size() const;
  public:
  void clear_vertexcoordinates();
  private:
  float _internal_vertexcoordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertexcoordinates() const;
  void _internal_add_vertexcoordinates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertexcoordinates();
  public:
  float vertexcoordinates(int index) const;
  void set_vertexcoordinates(int index, float value);
  void add_vertexcoordinates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertexcoordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertexcoordinates();

  // repeated float normals = 4;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  private:
  float _internal_normals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_normals() const;
  void _internal_add_normals(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_normals();
  public:
  float normals(int index) const;
  void set_normals(int index, float value);
  void add_normals(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      normals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_normals();

  // repeated float tangents = 5;
  int tangents_size() const;
  private:
  int _internal_tangents_size() const;
  public:
  void clear_tangents();
  private:
  float _internal_tangents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_tangents() const;
  void _internal_add_tangents(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_tangents();
  public:
  float tangents(int index) const;
  void set_tangents(int index, float value);
  void add_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tangents();

  // repeated float binormals = 6;
  int binormals_size() const;
  private:
  int _internal_binormals_size() const;
  public:
  void clear_binormals();
  private:
  float _internal_binormals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_binormals() const;
  void _internal_add_binormals(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_binormals();
  public:
  float binormals(int index) const;
  void set_binormals(int index, float value);
  void add_binormals(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      binormals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_binormals();

  // repeated float textureCoordinates = 7;
  int texturecoordinates_size() const;
  private:
  int _internal_texturecoordinates_size() const;
  public:
  void clear_texturecoordinates();
  private:
  float _internal_texturecoordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_texturecoordinates() const;
  void _internal_add_texturecoordinates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_texturecoordinates();
  public:
  float texturecoordinates(int index) const;
  void set_texturecoordinates(int index, float value);
  void add_texturecoordinates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      texturecoordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_texturecoordinates();

  // repeated int32 triangleFaceIndices = 8;
  int trianglefaceindices_size() const;
  private:
  int _internal_trianglefaceindices_size() const;
  public:
  void clear_trianglefaceindices();
  private:
  int32_t _internal_trianglefaceindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_trianglefaceindices() const;
  void _internal_add_trianglefaceindices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_trianglefaceindices();
  public:
  int32_t trianglefaceindices(int index) const;
  void set_trianglefaceindices(int index, int32_t value);
  void add_trianglefaceindices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      trianglefaceindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_trianglefaceindices();

  // repeated int32 materialIndices = 9;
  int materialindices_size() const;
  private:
  int _internal_materialindices_size() const;
  public:
  void clear_materialindices();
  private:
  int32_t _internal_materialindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_materialindices() const;
  void _internal_add_materialindices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_materialindices();
  public:
  int32_t materialindices(int index) const;
  void set_materialindices(int index, int32_t value);
  void add_materialindices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      materialindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_materialindices();

  // repeated int32 normalIndices = 10;
  int normalindices_size() const;
  private:
  int _internal_normalindices_size() const;
  public:
  void clear_normalindices();
  private:
  int32_t _internal_normalindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_normalindices() const;
  void _internal_add_normalindices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_normalindices();
  public:
  int32_t normalindices(int index) const;
  void set_normalindices(int index, int32_t value);
  void add_normalindices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      normalindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_normalindices();

  // repeated int32 textureCoordinatesIndices = 11;
  int texturecoordinatesindices_size() const;
  private:
  int _internal_texturecoordinatesindices_size() const;
  public:
  void clear_texturecoordinatesindices();
  private:
  int32_t _internal_texturecoordinatesindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_texturecoordinatesindices() const;
  void _internal_add_texturecoordinatesindices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_texturecoordinatesindices();
  public:
  int32_t texturecoordinatesindices(int index) const;
  void set_texturecoordinatesindices(int index, int32_t value);
  void add_texturecoordinatesindices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      texturecoordinatesindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_texturecoordinatesindices();

  // repeated string materialNames = 13;
  int materialnames_size() const;
  private:
  int _internal_materialnames_size() const;
  public:
  void clear_materialnames();
  const std::string& materialnames(int index) const;
  std::string* mutable_materialnames(int index);
  void set_materialnames(int index, const std::string& value);
  void set_materialnames(int index, std::string&& value);
  void set_materialnames(int index, const char* value);
  void set_materialnames(int index, const char* value, size_t size);
  std::string* add_materialnames();
  void add_materialnames(const std::string& value);
  void add_materialnames(std::string&& value);
  void add_materialnames(const char* value);
  void add_materialnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& materialnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_materialnames();
  private:
  const std::string& _internal_materialnames(int index) const;
  std::string* _internal_add_materialnames();
  public:

  // repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
  int materialtodiffusetexturemapping_size() const;
  private:
  int _internal_materialtodiffusetexturemapping_size() const;
  public:
  void clear_materialtodiffusetexturemapping();
  ::SmartBodyBinary::StringToStringMap* mutable_materialtodiffusetexturemapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtodiffusetexturemapping();
  private:
  const ::SmartBodyBinary::StringToStringMap& _internal_materialtodiffusetexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* _internal_add_materialtodiffusetexturemapping();
  public:
  const ::SmartBodyBinary::StringToStringMap& materialtodiffusetexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* add_materialtodiffusetexturemapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtodiffusetexturemapping() const;

  // repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
  int materialtonormaltexturemapping_size() const;
  private:
  int _internal_materialtonormaltexturemapping_size() const;
  public:
  void clear_materialtonormaltexturemapping();
  ::SmartBodyBinary::StringToStringMap* mutable_materialtonormaltexturemapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtonormaltexturemapping();
  private:
  const ::SmartBodyBinary::StringToStringMap& _internal_materialtonormaltexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* _internal_add_materialtonormaltexturemapping();
  public:
  const ::SmartBodyBinary::StringToStringMap& materialtonormaltexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* add_materialtonormaltexturemapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtonormaltexturemapping() const;

  // repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
  int materialtospeculartexturemapping_size() const;
  private:
  int _internal_materialtospeculartexturemapping_size() const;
  public:
  void clear_materialtospeculartexturemapping();
  ::SmartBodyBinary::StringToStringMap* mutable_materialtospeculartexturemapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtospeculartexturemapping();
  private:
  const ::SmartBodyBinary::StringToStringMap& _internal_materialtospeculartexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* _internal_add_materialtospeculartexturemapping();
  public:
  const ::SmartBodyBinary::StringToStringMap& materialtospeculartexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* add_materialtospeculartexturemapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtospeculartexturemapping() const;

  // repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
  int materialtofaceindices_size() const;
  private:
  int _internal_materialtofaceindices_size() const;
  public:
  void clear_materialtofaceindices();
  ::SmartBodyBinary::StringToIntVectorMap* mutable_materialtofaceindices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >*
      mutable_materialtofaceindices();
  private:
  const ::SmartBodyBinary::StringToIntVectorMap& _internal_materialtofaceindices(int index) const;
  ::SmartBodyBinary::StringToIntVectorMap* _internal_add_materialtofaceindices();
  public:
  const ::SmartBodyBinary::StringToIntVectorMap& materialtofaceindices(int index) const;
  ::SmartBodyBinary::StringToIntVectorMap* add_materialtofaceindices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >&
      materialtofaceindices() const;

  // repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
  int materialtotransparenttexturemapping_size() const;
  private:
  int _internal_materialtotransparenttexturemapping_size() const;
  public:
  void clear_materialtotransparenttexturemapping();
  ::SmartBodyBinary::StringToStringMap* mutable_materialtotransparenttexturemapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtotransparenttexturemapping();
  private:
  const ::SmartBodyBinary::StringToStringMap& _internal_materialtotransparenttexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* _internal_add_materialtotransparenttexturemapping();
  public:
  const ::SmartBodyBinary::StringToStringMap& materialtotransparenttexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* add_materialtotransparenttexturemapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtotransparenttexturemapping() const;

  // repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
  int materialtoglossytexturemapping_size() const;
  private:
  int _internal_materialtoglossytexturemapping_size() const;
  public:
  void clear_materialtoglossytexturemapping();
  ::SmartBodyBinary::StringToStringMap* mutable_materialtoglossytexturemapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
      mutable_materialtoglossytexturemapping();
  private:
  const ::SmartBodyBinary::StringToStringMap& _internal_materialtoglossytexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* _internal_add_materialtoglossytexturemapping();
  public:
  const ::SmartBodyBinary::StringToStringMap& materialtoglossytexturemapping(int index) const;
  ::SmartBodyBinary::StringToStringMap* add_materialtoglossytexturemapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
      materialtoglossytexturemapping() const;

  // required string meshName = 1;
  bool has_meshname() const;
  private:
  bool _internal_has_meshname() const;
  public:
  void clear_meshname();
  const std::string& meshname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meshname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meshname();
  PROTOBUF_NODISCARD std::string* release_meshname();
  void set_allocated_meshname(std::string* meshname);
  private:
  const std::string& _internal_meshname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meshname(const std::string& value);
  std::string* _internal_mutable_meshname();
  public:

  // required bool culling = 12;
  bool has_culling() const;
  private:
  bool _internal_has_culling() const;
  public:
  void clear_culling();
  bool culling() const;
  void set_culling(bool value);
  private:
  bool _internal_culling() const;
  void _internal_set_culling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.MeshModel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Material > materials_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertexcoordinates_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > normals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tangents_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > binormals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > texturecoordinates_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > trianglefaceindices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > materialindices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > normalindices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > texturecoordinatesindices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> materialnames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtodiffusetexturemapping_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtonormaltexturemapping_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtospeculartexturemapping_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap > materialtofaceindices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtotransparenttexturemapping_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap > materialtoglossytexturemapping_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meshname_;
    bool culling_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbmesh_2eproto;
};
// -------------------------------------------------------------------

class SkinWeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.SkinWeight) */ {
 public:
  inline SkinWeight() : SkinWeight(nullptr) {}
  ~SkinWeight() override;
  explicit PROTOBUF_CONSTEXPR SkinWeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkinWeight(const SkinWeight& from);
  SkinWeight(SkinWeight&& from) noexcept
    : SkinWeight() {
    *this = ::std::move(from);
  }

  inline SkinWeight& operator=(const SkinWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkinWeight& operator=(SkinWeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkinWeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkinWeight* internal_default_instance() {
    return reinterpret_cast<const SkinWeight*>(
               &_SkinWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SkinWeight& a, SkinWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(SkinWeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkinWeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkinWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkinWeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkinWeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkinWeight& from) {
    SkinWeight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkinWeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.SkinWeight";
  }
  protected:
  explicit SkinWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfluenceJointNamesFieldNumber = 2,
    kBindWeightsFieldNumber = 3,
    kBindPoseMatriceFieldNumber = 4,
    kBindShapeMatrixFieldNumber = 5,
    kNumberOfInfluenceJointsFieldNumber = 6,
    kWeightIndicesFieldNumber = 7,
    kJointNameIndicesFieldNumber = 8,
    kSourceMeshNameFieldNumber = 1,
  };
  // repeated string influenceJointNames = 2;
  int influencejointnames_size() const;
  private:
  int _internal_influencejointnames_size() const;
  public:
  void clear_influencejointnames();
  const std::string& influencejointnames(int index) const;
  std::string* mutable_influencejointnames(int index);
  void set_influencejointnames(int index, const std::string& value);
  void set_influencejointnames(int index, std::string&& value);
  void set_influencejointnames(int index, const char* value);
  void set_influencejointnames(int index, const char* value, size_t size);
  std::string* add_influencejointnames();
  void add_influencejointnames(const std::string& value);
  void add_influencejointnames(std::string&& value);
  void add_influencejointnames(const char* value);
  void add_influencejointnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& influencejointnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_influencejointnames();
  private:
  const std::string& _internal_influencejointnames(int index) const;
  std::string* _internal_add_influencejointnames();
  public:

  // repeated float bindWeights = 3;
  int bindweights_size() const;
  private:
  int _internal_bindweights_size() const;
  public:
  void clear_bindweights();
  private:
  float _internal_bindweights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bindweights() const;
  void _internal_add_bindweights(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bindweights();
  public:
  float bindweights(int index) const;
  void set_bindweights(int index, float value);
  void add_bindweights(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bindweights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bindweights();

  // repeated float bindPoseMatrice = 4;
  int bindposematrice_size() const;
  private:
  int _internal_bindposematrice_size() const;
  public:
  void clear_bindposematrice();
  private:
  float _internal_bindposematrice(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bindposematrice() const;
  void _internal_add_bindposematrice(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bindposematrice();
  public:
  float bindposematrice(int index) const;
  void set_bindposematrice(int index, float value);
  void add_bindposematrice(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bindposematrice() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bindposematrice();

  // repeated float bindShapeMatrix = 5;
  int bindshapematrix_size() const;
  private:
  int _internal_bindshapematrix_size() const;
  public:
  void clear_bindshapematrix();
  private:
  float _internal_bindshapematrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bindshapematrix() const;
  void _internal_add_bindshapematrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bindshapematrix();
  public:
  float bindshapematrix(int index) const;
  void set_bindshapematrix(int index, float value);
  void add_bindshapematrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bindshapematrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bindshapematrix();

  // repeated int32 numberOfInfluenceJoints = 6;
  int numberofinfluencejoints_size() const;
  private:
  int _internal_numberofinfluencejoints_size() const;
  public:
  void clear_numberofinfluencejoints();
  private:
  int32_t _internal_numberofinfluencejoints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_numberofinfluencejoints() const;
  void _internal_add_numberofinfluencejoints(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_numberofinfluencejoints();
  public:
  int32_t numberofinfluencejoints(int index) const;
  void set_numberofinfluencejoints(int index, int32_t value);
  void add_numberofinfluencejoints(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      numberofinfluencejoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_numberofinfluencejoints();

  // repeated int32 weightIndices = 7;
  int weightindices_size() const;
  private:
  int _internal_weightindices_size() const;
  public:
  void clear_weightindices();
  private:
  int32_t _internal_weightindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_weightindices() const;
  void _internal_add_weightindices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_weightindices();
  public:
  int32_t weightindices(int index) const;
  void set_weightindices(int index, int32_t value);
  void add_weightindices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      weightindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_weightindices();

  // repeated int32 jointNameIndices = 8;
  int jointnameindices_size() const;
  private:
  int _internal_jointnameindices_size() const;
  public:
  void clear_jointnameindices();
  private:
  int32_t _internal_jointnameindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_jointnameindices() const;
  void _internal_add_jointnameindices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_jointnameindices();
  public:
  int32_t jointnameindices(int index) const;
  void set_jointnameindices(int index, int32_t value);
  void add_jointnameindices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      jointnameindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_jointnameindices();

  // required string sourceMeshName = 1;
  bool has_sourcemeshname() const;
  private:
  bool _internal_has_sourcemeshname() const;
  public:
  void clear_sourcemeshname();
  const std::string& sourcemeshname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourcemeshname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourcemeshname();
  PROTOBUF_NODISCARD std::string* release_sourcemeshname();
  void set_allocated_sourcemeshname(std::string* sourcemeshname);
  private:
  const std::string& _internal_sourcemeshname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourcemeshname(const std::string& value);
  std::string* _internal_mutable_sourcemeshname();
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.SkinWeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> influencejointnames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bindweights_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bindposematrice_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bindshapematrix_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > numberofinfluencejoints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > weightindices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > jointnameindices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcemeshname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbmesh_2eproto;
};
// -------------------------------------------------------------------

class StaticMesh final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.StaticMesh) */ {
 public:
  inline StaticMesh() : StaticMesh(nullptr) {}
  ~StaticMesh() override;
  explicit PROTOBUF_CONSTEXPR StaticMesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StaticMesh(const StaticMesh& from);
  StaticMesh(StaticMesh&& from) noexcept
    : StaticMesh() {
    *this = ::std::move(from);
  }

  inline StaticMesh& operator=(const StaticMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticMesh& operator=(StaticMesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StaticMesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const StaticMesh* internal_default_instance() {
    return reinterpret_cast<const StaticMesh*>(
               &_StaticMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StaticMesh& a, StaticMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticMesh* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaticMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StaticMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StaticMesh>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StaticMesh& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StaticMesh& from) {
    StaticMesh::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticMesh* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.StaticMesh";
  }
  protected:
  explicit StaticMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshModelsFieldNumber = 2,
    kStaticMeshNameFieldNumber = 1,
  };
  // repeated .SmartBodyBinary.MeshModel meshModels = 2;
  int meshmodels_size() const;
  private:
  int _internal_meshmodels_size() const;
  public:
  void clear_meshmodels();
  ::SmartBodyBinary::MeshModel* mutable_meshmodels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::MeshModel >*
      mutable_meshmodels();
  private:
  const ::SmartBodyBinary::MeshModel& _internal_meshmodels(int index) const;
  ::SmartBodyBinary::MeshModel* _internal_add_meshmodels();
  public:
  const ::SmartBodyBinary::MeshModel& meshmodels(int index) const;
  ::SmartBodyBinary::MeshModel* add_meshmodels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::MeshModel >&
      meshmodels() const;

  // required string staticMeshName = 1;
  bool has_staticmeshname() const;
  private:
  bool _internal_has_staticmeshname() const;
  public:
  void clear_staticmeshname();
  const std::string& staticmeshname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_staticmeshname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_staticmeshname();
  PROTOBUF_NODISCARD std::string* release_staticmeshname();
  void set_allocated_staticmeshname(std::string* staticmeshname);
  private:
  const std::string& _internal_staticmeshname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_staticmeshname(const std::string& value);
  std::string* _internal_mutable_staticmeshname();
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StaticMesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::MeshModel > meshmodels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staticmeshname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbmesh_2eproto;
};
// -------------------------------------------------------------------

class DeformableMesh final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.DeformableMesh) */ {
 public:
  inline DeformableMesh() : DeformableMesh(nullptr) {}
  ~DeformableMesh() override;
  explicit PROTOBUF_CONSTEXPR DeformableMesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeformableMesh(const DeformableMesh& from);
  DeformableMesh(DeformableMesh&& from) noexcept
    : DeformableMesh() {
    *this = ::std::move(from);
  }

  inline DeformableMesh& operator=(const DeformableMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeformableMesh& operator=(DeformableMesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeformableMesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeformableMesh* internal_default_instance() {
    return reinterpret_cast<const DeformableMesh*>(
               &_DeformableMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeformableMesh& a, DeformableMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(DeformableMesh* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeformableMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeformableMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeformableMesh>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeformableMesh& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeformableMesh& from) {
    DeformableMesh::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeformableMesh* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.DeformableMesh";
  }
  protected:
  explicit DeformableMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkinWeightsFieldNumber = 3,
    kMorphTargetsFieldNumber = 4,
    kDeformableMeshNameFieldNumber = 1,
    kStaticMeshFieldNumber = 2,
  };
  // repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
  int skinweights_size() const;
  private:
  int _internal_skinweights_size() const;
  public:
  void clear_skinweights();
  ::SmartBodyBinary::SkinWeight* mutable_skinweights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >*
      mutable_skinweights();
  private:
  const ::SmartBodyBinary::SkinWeight& _internal_skinweights(int index) const;
  ::SmartBodyBinary::SkinWeight* _internal_add_skinweights();
  public:
  const ::SmartBodyBinary::SkinWeight& skinweights(int index) const;
  ::SmartBodyBinary::SkinWeight* add_skinweights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >&
      skinweights() const;

  // repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
  int morphtargets_size() const;
  private:
  int _internal_morphtargets_size() const;
  public:
  void clear_morphtargets();
  ::SmartBodyBinary::StringToStringVectorMap* mutable_morphtargets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >*
      mutable_morphtargets();
  private:
  const ::SmartBodyBinary::StringToStringVectorMap& _internal_morphtargets(int index) const;
  ::SmartBodyBinary::StringToStringVectorMap* _internal_add_morphtargets();
  public:
  const ::SmartBodyBinary::StringToStringVectorMap& morphtargets(int index) const;
  ::SmartBodyBinary::StringToStringVectorMap* add_morphtargets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >&
      morphtargets() const;

  // required string deformableMeshName = 1;
  bool has_deformablemeshname() const;
  private:
  bool _internal_has_deformablemeshname() const;
  public:
  void clear_deformablemeshname();
  const std::string& deformablemeshname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deformablemeshname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deformablemeshname();
  PROTOBUF_NODISCARD std::string* release_deformablemeshname();
  void set_allocated_deformablemeshname(std::string* deformablemeshname);
  private:
  const std::string& _internal_deformablemeshname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deformablemeshname(const std::string& value);
  std::string* _internal_mutable_deformablemeshname();
  public:

  // required .SmartBodyBinary.StaticMesh staticMesh = 2;
  bool has_staticmesh() const;
  private:
  bool _internal_has_staticmesh() const;
  public:
  void clear_staticmesh();
  const ::SmartBodyBinary::StaticMesh& staticmesh() const;
  PROTOBUF_NODISCARD ::SmartBodyBinary::StaticMesh* release_staticmesh();
  ::SmartBodyBinary::StaticMesh* mutable_staticmesh();
  void set_allocated_staticmesh(::SmartBodyBinary::StaticMesh* staticmesh);
  private:
  const ::SmartBodyBinary::StaticMesh& _internal_staticmesh() const;
  ::SmartBodyBinary::StaticMesh* _internal_mutable_staticmesh();
  public:
  void unsafe_arena_set_allocated_staticmesh(
      ::SmartBodyBinary::StaticMesh* staticmesh);
  ::SmartBodyBinary::StaticMesh* unsafe_arena_release_staticmesh();

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.DeformableMesh)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::SkinWeight > skinweights_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap > morphtargets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deformablemeshname_;
    ::SmartBodyBinary::StaticMesh* staticmesh_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbmesh_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Material

// repeated int32 ambient = 1;
inline int Material::_internal_ambient_size() const {
  return _impl_.ambient_.size();
}
inline int Material::ambient_size() const {
  return _internal_ambient_size();
}
inline void Material::clear_ambient() {
  _impl_.ambient_.Clear();
}
inline int32_t Material::_internal_ambient(int index) const {
  return _impl_.ambient_.Get(index);
}
inline int32_t Material::ambient(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Material.ambient)
  return _internal_ambient(index);
}
inline void Material::set_ambient(int index, int32_t value) {
  _impl_.ambient_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Material.ambient)
}
inline void Material::_internal_add_ambient(int32_t value) {
  _impl_.ambient_.Add(value);
}
inline void Material::add_ambient(int32_t value) {
  _internal_add_ambient(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Material.ambient)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::_internal_ambient() const {
  return _impl_.ambient_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::ambient() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Material.ambient)
  return _internal_ambient();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::_internal_mutable_ambient() {
  return &_impl_.ambient_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::mutable_ambient() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Material.ambient)
  return _internal_mutable_ambient();
}

// repeated int32 diffuse = 2;
inline int Material::_internal_diffuse_size() const {
  return _impl_.diffuse_.size();
}
inline int Material::diffuse_size() const {
  return _internal_diffuse_size();
}
inline void Material::clear_diffuse() {
  _impl_.diffuse_.Clear();
}
inline int32_t Material::_internal_diffuse(int index) const {
  return _impl_.diffuse_.Get(index);
}
inline int32_t Material::diffuse(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Material.diffuse)
  return _internal_diffuse(index);
}
inline void Material::set_diffuse(int index, int32_t value) {
  _impl_.diffuse_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Material.diffuse)
}
inline void Material::_internal_add_diffuse(int32_t value) {
  _impl_.diffuse_.Add(value);
}
inline void Material::add_diffuse(int32_t value) {
  _internal_add_diffuse(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Material.diffuse)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::_internal_diffuse() const {
  return _impl_.diffuse_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::diffuse() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Material.diffuse)
  return _internal_diffuse();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::_internal_mutable_diffuse() {
  return &_impl_.diffuse_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::mutable_diffuse() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Material.diffuse)
  return _internal_mutable_diffuse();
}

// repeated int32 specular = 3;
inline int Material::_internal_specular_size() const {
  return _impl_.specular_.size();
}
inline int Material::specular_size() const {
  return _internal_specular_size();
}
inline void Material::clear_specular() {
  _impl_.specular_.Clear();
}
inline int32_t Material::_internal_specular(int index) const {
  return _impl_.specular_.Get(index);
}
inline int32_t Material::specular(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Material.specular)
  return _internal_specular(index);
}
inline void Material::set_specular(int index, int32_t value) {
  _impl_.specular_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Material.specular)
}
inline void Material::_internal_add_specular(int32_t value) {
  _impl_.specular_.Add(value);
}
inline void Material::add_specular(int32_t value) {
  _internal_add_specular(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Material.specular)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::_internal_specular() const {
  return _impl_.specular_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::specular() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Material.specular)
  return _internal_specular();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::_internal_mutable_specular() {
  return &_impl_.specular_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::mutable_specular() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Material.specular)
  return _internal_mutable_specular();
}

// repeated int32 emission = 4;
inline int Material::_internal_emission_size() const {
  return _impl_.emission_.size();
}
inline int Material::emission_size() const {
  return _internal_emission_size();
}
inline void Material::clear_emission() {
  _impl_.emission_.Clear();
}
inline int32_t Material::_internal_emission(int index) const {
  return _impl_.emission_.Get(index);
}
inline int32_t Material::emission(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Material.emission)
  return _internal_emission(index);
}
inline void Material::set_emission(int index, int32_t value) {
  _impl_.emission_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Material.emission)
}
inline void Material::_internal_add_emission(int32_t value) {
  _impl_.emission_.Add(value);
}
inline void Material::add_emission(int32_t value) {
  _internal_add_emission(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Material.emission)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::_internal_emission() const {
  return _impl_.emission_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Material::emission() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Material.emission)
  return _internal_emission();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::_internal_mutable_emission() {
  return &_impl_.emission_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Material::mutable_emission() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Material.emission)
  return _internal_mutable_emission();
}

// required int32 shininess = 5;
inline bool Material::_internal_has_shininess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Material::has_shininess() const {
  return _internal_has_shininess();
}
inline void Material::clear_shininess() {
  _impl_.shininess_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Material::_internal_shininess() const {
  return _impl_.shininess_;
}
inline int32_t Material::shininess() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Material.shininess)
  return _internal_shininess();
}
inline void Material::_internal_set_shininess(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shininess_ = value;
}
inline void Material::set_shininess(int32_t value) {
  _internal_set_shininess(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Material.shininess)
}

// required float transparency = 6;
inline bool Material::_internal_has_transparency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Material::has_transparency() const {
  return _internal_has_transparency();
}
inline void Material::clear_transparency() {
  _impl_.transparency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Material::_internal_transparency() const {
  return _impl_.transparency_;
}
inline float Material::transparency() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Material.transparency)
  return _internal_transparency();
}
inline void Material::_internal_set_transparency(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.transparency_ = value;
}
inline void Material::set_transparency(float value) {
  _internal_set_transparency(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Material.transparency)
}

// required bool useAlphaBlend = 7;
inline bool Material::_internal_has_usealphablend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Material::has_usealphablend() const {
  return _internal_has_usealphablend();
}
inline void Material::clear_usealphablend() {
  _impl_.usealphablend_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Material::_internal_usealphablend() const {
  return _impl_.usealphablend_;
}
inline bool Material::usealphablend() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Material.useAlphaBlend)
  return _internal_usealphablend();
}
inline void Material::_internal_set_usealphablend(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.usealphablend_ = value;
}
inline void Material::set_usealphablend(bool value) {
  _internal_set_usealphablend(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Material.useAlphaBlend)
}

// -------------------------------------------------------------------

// MeshModel

// required string meshName = 1;
inline bool MeshModel::_internal_has_meshname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MeshModel::has_meshname() const {
  return _internal_has_meshname();
}
inline void MeshModel::clear_meshname() {
  _impl_.meshname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MeshModel::meshname() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.meshName)
  return _internal_meshname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MeshModel::set_meshname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.meshname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.meshName)
}
inline std::string* MeshModel::mutable_meshname() {
  std::string* _s = _internal_mutable_meshname();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.meshName)
  return _s;
}
inline const std::string& MeshModel::_internal_meshname() const {
  return _impl_.meshname_.Get();
}
inline void MeshModel::_internal_set_meshname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.meshname_.Set(value, GetArenaForAllocation());
}
inline std::string* MeshModel::_internal_mutable_meshname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.meshname_.Mutable(GetArenaForAllocation());
}
inline std::string* MeshModel::release_meshname() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.MeshModel.meshName)
  if (!_internal_has_meshname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.meshname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meshname_.IsDefault()) {
    _impl_.meshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MeshModel::set_allocated_meshname(std::string* meshname) {
  if (meshname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.meshname_.SetAllocated(meshname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meshname_.IsDefault()) {
    _impl_.meshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.MeshModel.meshName)
}

// repeated .SmartBodyBinary.Material materials = 2;
inline int MeshModel::_internal_materials_size() const {
  return _impl_.materials_.size();
}
inline int MeshModel::materials_size() const {
  return _internal_materials_size();
}
inline void MeshModel::clear_materials() {
  _impl_.materials_.Clear();
}
inline ::SmartBodyBinary::Material* MeshModel::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materials)
  return _impl_.materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Material >*
MeshModel::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materials)
  return &_impl_.materials_;
}
inline const ::SmartBodyBinary::Material& MeshModel::_internal_materials(int index) const {
  return _impl_.materials_.Get(index);
}
inline const ::SmartBodyBinary::Material& MeshModel::materials(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materials)
  return _internal_materials(index);
}
inline ::SmartBodyBinary::Material* MeshModel::_internal_add_materials() {
  return _impl_.materials_.Add();
}
inline ::SmartBodyBinary::Material* MeshModel::add_materials() {
  ::SmartBodyBinary::Material* _add = _internal_add_materials();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Material >&
MeshModel::materials() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materials)
  return _impl_.materials_;
}

// repeated float vertexCoordinates = 3;
inline int MeshModel::_internal_vertexcoordinates_size() const {
  return _impl_.vertexcoordinates_.size();
}
inline int MeshModel::vertexcoordinates_size() const {
  return _internal_vertexcoordinates_size();
}
inline void MeshModel::clear_vertexcoordinates() {
  _impl_.vertexcoordinates_.Clear();
}
inline float MeshModel::_internal_vertexcoordinates(int index) const {
  return _impl_.vertexcoordinates_.Get(index);
}
inline float MeshModel::vertexcoordinates(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.vertexCoordinates)
  return _internal_vertexcoordinates(index);
}
inline void MeshModel::set_vertexcoordinates(int index, float value) {
  _impl_.vertexcoordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.vertexCoordinates)
}
inline void MeshModel::_internal_add_vertexcoordinates(float value) {
  _impl_.vertexcoordinates_.Add(value);
}
inline void MeshModel::add_vertexcoordinates(float value) {
  _internal_add_vertexcoordinates(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.vertexCoordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::_internal_vertexcoordinates() const {
  return _impl_.vertexcoordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::vertexcoordinates() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.vertexCoordinates)
  return _internal_vertexcoordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::_internal_mutable_vertexcoordinates() {
  return &_impl_.vertexcoordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::mutable_vertexcoordinates() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.vertexCoordinates)
  return _internal_mutable_vertexcoordinates();
}

// repeated float normals = 4;
inline int MeshModel::_internal_normals_size() const {
  return _impl_.normals_.size();
}
inline int MeshModel::normals_size() const {
  return _internal_normals_size();
}
inline void MeshModel::clear_normals() {
  _impl_.normals_.Clear();
}
inline float MeshModel::_internal_normals(int index) const {
  return _impl_.normals_.Get(index);
}
inline float MeshModel::normals(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.normals)
  return _internal_normals(index);
}
inline void MeshModel::set_normals(int index, float value) {
  _impl_.normals_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.normals)
}
inline void MeshModel::_internal_add_normals(float value) {
  _impl_.normals_.Add(value);
}
inline void MeshModel::add_normals(float value) {
  _internal_add_normals(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.normals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::_internal_normals() const {
  return _impl_.normals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::normals() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.normals)
  return _internal_normals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::_internal_mutable_normals() {
  return &_impl_.normals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.normals)
  return _internal_mutable_normals();
}

// repeated float tangents = 5;
inline int MeshModel::_internal_tangents_size() const {
  return _impl_.tangents_.size();
}
inline int MeshModel::tangents_size() const {
  return _internal_tangents_size();
}
inline void MeshModel::clear_tangents() {
  _impl_.tangents_.Clear();
}
inline float MeshModel::_internal_tangents(int index) const {
  return _impl_.tangents_.Get(index);
}
inline float MeshModel::tangents(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.tangents)
  return _internal_tangents(index);
}
inline void MeshModel::set_tangents(int index, float value) {
  _impl_.tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.tangents)
}
inline void MeshModel::_internal_add_tangents(float value) {
  _impl_.tangents_.Add(value);
}
inline void MeshModel::add_tangents(float value) {
  _internal_add_tangents(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::_internal_tangents() const {
  return _impl_.tangents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::tangents() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.tangents)
  return _internal_tangents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::_internal_mutable_tangents() {
  return &_impl_.tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::mutable_tangents() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.tangents)
  return _internal_mutable_tangents();
}

// repeated float binormals = 6;
inline int MeshModel::_internal_binormals_size() const {
  return _impl_.binormals_.size();
}
inline int MeshModel::binormals_size() const {
  return _internal_binormals_size();
}
inline void MeshModel::clear_binormals() {
  _impl_.binormals_.Clear();
}
inline float MeshModel::_internal_binormals(int index) const {
  return _impl_.binormals_.Get(index);
}
inline float MeshModel::binormals(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.binormals)
  return _internal_binormals(index);
}
inline void MeshModel::set_binormals(int index, float value) {
  _impl_.binormals_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.binormals)
}
inline void MeshModel::_internal_add_binormals(float value) {
  _impl_.binormals_.Add(value);
}
inline void MeshModel::add_binormals(float value) {
  _internal_add_binormals(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.binormals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::_internal_binormals() const {
  return _impl_.binormals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::binormals() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.binormals)
  return _internal_binormals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::_internal_mutable_binormals() {
  return &_impl_.binormals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::mutable_binormals() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.binormals)
  return _internal_mutable_binormals();
}

// repeated float textureCoordinates = 7;
inline int MeshModel::_internal_texturecoordinates_size() const {
  return _impl_.texturecoordinates_.size();
}
inline int MeshModel::texturecoordinates_size() const {
  return _internal_texturecoordinates_size();
}
inline void MeshModel::clear_texturecoordinates() {
  _impl_.texturecoordinates_.Clear();
}
inline float MeshModel::_internal_texturecoordinates(int index) const {
  return _impl_.texturecoordinates_.Get(index);
}
inline float MeshModel::texturecoordinates(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.textureCoordinates)
  return _internal_texturecoordinates(index);
}
inline void MeshModel::set_texturecoordinates(int index, float value) {
  _impl_.texturecoordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.textureCoordinates)
}
inline void MeshModel::_internal_add_texturecoordinates(float value) {
  _impl_.texturecoordinates_.Add(value);
}
inline void MeshModel::add_texturecoordinates(float value) {
  _internal_add_texturecoordinates(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.textureCoordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::_internal_texturecoordinates() const {
  return _impl_.texturecoordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshModel::texturecoordinates() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.textureCoordinates)
  return _internal_texturecoordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::_internal_mutable_texturecoordinates() {
  return &_impl_.texturecoordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshModel::mutable_texturecoordinates() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.textureCoordinates)
  return _internal_mutable_texturecoordinates();
}

// repeated int32 triangleFaceIndices = 8;
inline int MeshModel::_internal_trianglefaceindices_size() const {
  return _impl_.trianglefaceindices_.size();
}
inline int MeshModel::trianglefaceindices_size() const {
  return _internal_trianglefaceindices_size();
}
inline void MeshModel::clear_trianglefaceindices() {
  _impl_.trianglefaceindices_.Clear();
}
inline int32_t MeshModel::_internal_trianglefaceindices(int index) const {
  return _impl_.trianglefaceindices_.Get(index);
}
inline int32_t MeshModel::trianglefaceindices(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.triangleFaceIndices)
  return _internal_trianglefaceindices(index);
}
inline void MeshModel::set_trianglefaceindices(int index, int32_t value) {
  _impl_.trianglefaceindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.triangleFaceIndices)
}
inline void MeshModel::_internal_add_trianglefaceindices(int32_t value) {
  _impl_.trianglefaceindices_.Add(value);
}
inline void MeshModel::add_trianglefaceindices(int32_t value) {
  _internal_add_trianglefaceindices(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.triangleFaceIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::_internal_trianglefaceindices() const {
  return _impl_.trianglefaceindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::trianglefaceindices() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.triangleFaceIndices)
  return _internal_trianglefaceindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::_internal_mutable_trianglefaceindices() {
  return &_impl_.trianglefaceindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::mutable_trianglefaceindices() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.triangleFaceIndices)
  return _internal_mutable_trianglefaceindices();
}

// repeated int32 materialIndices = 9;
inline int MeshModel::_internal_materialindices_size() const {
  return _impl_.materialindices_.size();
}
inline int MeshModel::materialindices_size() const {
  return _internal_materialindices_size();
}
inline void MeshModel::clear_materialindices() {
  _impl_.materialindices_.Clear();
}
inline int32_t MeshModel::_internal_materialindices(int index) const {
  return _impl_.materialindices_.Get(index);
}
inline int32_t MeshModel::materialindices(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialIndices)
  return _internal_materialindices(index);
}
inline void MeshModel::set_materialindices(int index, int32_t value) {
  _impl_.materialindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.materialIndices)
}
inline void MeshModel::_internal_add_materialindices(int32_t value) {
  _impl_.materialindices_.Add(value);
}
inline void MeshModel::add_materialindices(int32_t value) {
  _internal_add_materialindices(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::_internal_materialindices() const {
  return _impl_.materialindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::materialindices() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialIndices)
  return _internal_materialindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::_internal_mutable_materialindices() {
  return &_impl_.materialindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::mutable_materialindices() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialIndices)
  return _internal_mutable_materialindices();
}

// repeated int32 normalIndices = 10;
inline int MeshModel::_internal_normalindices_size() const {
  return _impl_.normalindices_.size();
}
inline int MeshModel::normalindices_size() const {
  return _internal_normalindices_size();
}
inline void MeshModel::clear_normalindices() {
  _impl_.normalindices_.Clear();
}
inline int32_t MeshModel::_internal_normalindices(int index) const {
  return _impl_.normalindices_.Get(index);
}
inline int32_t MeshModel::normalindices(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.normalIndices)
  return _internal_normalindices(index);
}
inline void MeshModel::set_normalindices(int index, int32_t value) {
  _impl_.normalindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.normalIndices)
}
inline void MeshModel::_internal_add_normalindices(int32_t value) {
  _impl_.normalindices_.Add(value);
}
inline void MeshModel::add_normalindices(int32_t value) {
  _internal_add_normalindices(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.normalIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::_internal_normalindices() const {
  return _impl_.normalindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::normalindices() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.normalIndices)
  return _internal_normalindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::_internal_mutable_normalindices() {
  return &_impl_.normalindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::mutable_normalindices() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.normalIndices)
  return _internal_mutable_normalindices();
}

// repeated int32 textureCoordinatesIndices = 11;
inline int MeshModel::_internal_texturecoordinatesindices_size() const {
  return _impl_.texturecoordinatesindices_.size();
}
inline int MeshModel::texturecoordinatesindices_size() const {
  return _internal_texturecoordinatesindices_size();
}
inline void MeshModel::clear_texturecoordinatesindices() {
  _impl_.texturecoordinatesindices_.Clear();
}
inline int32_t MeshModel::_internal_texturecoordinatesindices(int index) const {
  return _impl_.texturecoordinatesindices_.Get(index);
}
inline int32_t MeshModel::texturecoordinatesindices(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.textureCoordinatesIndices)
  return _internal_texturecoordinatesindices(index);
}
inline void MeshModel::set_texturecoordinatesindices(int index, int32_t value) {
  _impl_.texturecoordinatesindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.textureCoordinatesIndices)
}
inline void MeshModel::_internal_add_texturecoordinatesindices(int32_t value) {
  _impl_.texturecoordinatesindices_.Add(value);
}
inline void MeshModel::add_texturecoordinatesindices(int32_t value) {
  _internal_add_texturecoordinatesindices(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.textureCoordinatesIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::_internal_texturecoordinatesindices() const {
  return _impl_.texturecoordinatesindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshModel::texturecoordinatesindices() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.textureCoordinatesIndices)
  return _internal_texturecoordinatesindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::_internal_mutable_texturecoordinatesindices() {
  return &_impl_.texturecoordinatesindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshModel::mutable_texturecoordinatesindices() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.textureCoordinatesIndices)
  return _internal_mutable_texturecoordinatesindices();
}

// required bool culling = 12;
inline bool MeshModel::_internal_has_culling() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MeshModel::has_culling() const {
  return _internal_has_culling();
}
inline void MeshModel::clear_culling() {
  _impl_.culling_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool MeshModel::_internal_culling() const {
  return _impl_.culling_;
}
inline bool MeshModel::culling() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.culling)
  return _internal_culling();
}
inline void MeshModel::_internal_set_culling(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.culling_ = value;
}
inline void MeshModel::set_culling(bool value) {
  _internal_set_culling(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.culling)
}

// repeated string materialNames = 13;
inline int MeshModel::_internal_materialnames_size() const {
  return _impl_.materialnames_.size();
}
inline int MeshModel::materialnames_size() const {
  return _internal_materialnames_size();
}
inline void MeshModel::clear_materialnames() {
  _impl_.materialnames_.Clear();
}
inline std::string* MeshModel::add_materialnames() {
  std::string* _s = _internal_add_materialnames();
  // @@protoc_insertion_point(field_add_mutable:SmartBodyBinary.MeshModel.materialNames)
  return _s;
}
inline const std::string& MeshModel::_internal_materialnames(int index) const {
  return _impl_.materialnames_.Get(index);
}
inline const std::string& MeshModel::materialnames(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialNames)
  return _internal_materialnames(index);
}
inline std::string* MeshModel::mutable_materialnames(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materialNames)
  return _impl_.materialnames_.Mutable(index);
}
inline void MeshModel::set_materialnames(int index, const std::string& value) {
  _impl_.materialnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.materialNames)
}
inline void MeshModel::set_materialnames(int index, std::string&& value) {
  _impl_.materialnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SmartBodyBinary.MeshModel.materialNames)
}
inline void MeshModel::set_materialnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.materialnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartBodyBinary.MeshModel.materialNames)
}
inline void MeshModel::set_materialnames(int index, const char* value, size_t size) {
  _impl_.materialnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartBodyBinary.MeshModel.materialNames)
}
inline std::string* MeshModel::_internal_add_materialnames() {
  return _impl_.materialnames_.Add();
}
inline void MeshModel::add_materialnames(const std::string& value) {
  _impl_.materialnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialNames)
}
inline void MeshModel::add_materialnames(std::string&& value) {
  _impl_.materialnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialNames)
}
inline void MeshModel::add_materialnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.materialnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartBodyBinary.MeshModel.materialNames)
}
inline void MeshModel::add_materialnames(const char* value, size_t size) {
  _impl_.materialnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartBodyBinary.MeshModel.materialNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MeshModel::materialnames() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialNames)
  return _impl_.materialnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MeshModel::mutable_materialnames() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialNames)
  return &_impl_.materialnames_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToDiffuseTextureMapping = 14;
inline int MeshModel::_internal_materialtodiffusetexturemapping_size() const {
  return _impl_.materialtodiffusetexturemapping_.size();
}
inline int MeshModel::materialtodiffusetexturemapping_size() const {
  return _internal_materialtodiffusetexturemapping_size();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtodiffusetexturemapping(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materialToDiffuseTextureMapping)
  return _impl_.materialtodiffusetexturemapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtodiffusetexturemapping() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialToDiffuseTextureMapping)
  return &_impl_.materialtodiffusetexturemapping_;
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::_internal_materialtodiffusetexturemapping(int index) const {
  return _impl_.materialtodiffusetexturemapping_.Get(index);
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtodiffusetexturemapping(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialToDiffuseTextureMapping)
  return _internal_materialtodiffusetexturemapping(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::_internal_add_materialtodiffusetexturemapping() {
  return _impl_.materialtodiffusetexturemapping_.Add();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtodiffusetexturemapping() {
  ::SmartBodyBinary::StringToStringMap* _add = _internal_add_materialtodiffusetexturemapping();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialToDiffuseTextureMapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtodiffusetexturemapping() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialToDiffuseTextureMapping)
  return _impl_.materialtodiffusetexturemapping_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToNormalTextureMapping = 15;
inline int MeshModel::_internal_materialtonormaltexturemapping_size() const {
  return _impl_.materialtonormaltexturemapping_.size();
}
inline int MeshModel::materialtonormaltexturemapping_size() const {
  return _internal_materialtonormaltexturemapping_size();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtonormaltexturemapping(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materialToNormalTextureMapping)
  return _impl_.materialtonormaltexturemapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtonormaltexturemapping() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialToNormalTextureMapping)
  return &_impl_.materialtonormaltexturemapping_;
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::_internal_materialtonormaltexturemapping(int index) const {
  return _impl_.materialtonormaltexturemapping_.Get(index);
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtonormaltexturemapping(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialToNormalTextureMapping)
  return _internal_materialtonormaltexturemapping(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::_internal_add_materialtonormaltexturemapping() {
  return _impl_.materialtonormaltexturemapping_.Add();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtonormaltexturemapping() {
  ::SmartBodyBinary::StringToStringMap* _add = _internal_add_materialtonormaltexturemapping();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialToNormalTextureMapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtonormaltexturemapping() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialToNormalTextureMapping)
  return _impl_.materialtonormaltexturemapping_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToSpecularTextureMapping = 16;
inline int MeshModel::_internal_materialtospeculartexturemapping_size() const {
  return _impl_.materialtospeculartexturemapping_.size();
}
inline int MeshModel::materialtospeculartexturemapping_size() const {
  return _internal_materialtospeculartexturemapping_size();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtospeculartexturemapping(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materialToSpecularTextureMapping)
  return _impl_.materialtospeculartexturemapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtospeculartexturemapping() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialToSpecularTextureMapping)
  return &_impl_.materialtospeculartexturemapping_;
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::_internal_materialtospeculartexturemapping(int index) const {
  return _impl_.materialtospeculartexturemapping_.Get(index);
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtospeculartexturemapping(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialToSpecularTextureMapping)
  return _internal_materialtospeculartexturemapping(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::_internal_add_materialtospeculartexturemapping() {
  return _impl_.materialtospeculartexturemapping_.Add();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtospeculartexturemapping() {
  ::SmartBodyBinary::StringToStringMap* _add = _internal_add_materialtospeculartexturemapping();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialToSpecularTextureMapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtospeculartexturemapping() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialToSpecularTextureMapping)
  return _impl_.materialtospeculartexturemapping_;
}

// repeated .SmartBodyBinary.StringToIntVectorMap materialToFaceIndices = 17;
inline int MeshModel::_internal_materialtofaceindices_size() const {
  return _impl_.materialtofaceindices_.size();
}
inline int MeshModel::materialtofaceindices_size() const {
  return _internal_materialtofaceindices_size();
}
inline ::SmartBodyBinary::StringToIntVectorMap* MeshModel::mutable_materialtofaceindices(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materialToFaceIndices)
  return _impl_.materialtofaceindices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >*
MeshModel::mutable_materialtofaceindices() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialToFaceIndices)
  return &_impl_.materialtofaceindices_;
}
inline const ::SmartBodyBinary::StringToIntVectorMap& MeshModel::_internal_materialtofaceindices(int index) const {
  return _impl_.materialtofaceindices_.Get(index);
}
inline const ::SmartBodyBinary::StringToIntVectorMap& MeshModel::materialtofaceindices(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialToFaceIndices)
  return _internal_materialtofaceindices(index);
}
inline ::SmartBodyBinary::StringToIntVectorMap* MeshModel::_internal_add_materialtofaceindices() {
  return _impl_.materialtofaceindices_.Add();
}
inline ::SmartBodyBinary::StringToIntVectorMap* MeshModel::add_materialtofaceindices() {
  ::SmartBodyBinary::StringToIntVectorMap* _add = _internal_add_materialtofaceindices();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialToFaceIndices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToIntVectorMap >&
MeshModel::materialtofaceindices() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialToFaceIndices)
  return _impl_.materialtofaceindices_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToTransparentTextureMapping = 18;
inline int MeshModel::_internal_materialtotransparenttexturemapping_size() const {
  return _impl_.materialtotransparenttexturemapping_.size();
}
inline int MeshModel::materialtotransparenttexturemapping_size() const {
  return _internal_materialtotransparenttexturemapping_size();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtotransparenttexturemapping(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materialToTransparentTextureMapping)
  return _impl_.materialtotransparenttexturemapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtotransparenttexturemapping() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialToTransparentTextureMapping)
  return &_impl_.materialtotransparenttexturemapping_;
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::_internal_materialtotransparenttexturemapping(int index) const {
  return _impl_.materialtotransparenttexturemapping_.Get(index);
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtotransparenttexturemapping(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialToTransparentTextureMapping)
  return _internal_materialtotransparenttexturemapping(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::_internal_add_materialtotransparenttexturemapping() {
  return _impl_.materialtotransparenttexturemapping_.Add();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtotransparenttexturemapping() {
  ::SmartBodyBinary::StringToStringMap* _add = _internal_add_materialtotransparenttexturemapping();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialToTransparentTextureMapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtotransparenttexturemapping() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialToTransparentTextureMapping)
  return _impl_.materialtotransparenttexturemapping_;
}

// repeated .SmartBodyBinary.StringToStringMap materialToGlossyTextureMapping = 19;
inline int MeshModel::_internal_materialtoglossytexturemapping_size() const {
  return _impl_.materialtoglossytexturemapping_.size();
}
inline int MeshModel::materialtoglossytexturemapping_size() const {
  return _internal_materialtoglossytexturemapping_size();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::mutable_materialtoglossytexturemapping(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.MeshModel.materialToGlossyTextureMapping)
  return _impl_.materialtoglossytexturemapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >*
MeshModel::mutable_materialtoglossytexturemapping() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.MeshModel.materialToGlossyTextureMapping)
  return &_impl_.materialtoglossytexturemapping_;
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::_internal_materialtoglossytexturemapping(int index) const {
  return _impl_.materialtoglossytexturemapping_.Get(index);
}
inline const ::SmartBodyBinary::StringToStringMap& MeshModel::materialtoglossytexturemapping(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.MeshModel.materialToGlossyTextureMapping)
  return _internal_materialtoglossytexturemapping(index);
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::_internal_add_materialtoglossytexturemapping() {
  return _impl_.materialtoglossytexturemapping_.Add();
}
inline ::SmartBodyBinary::StringToStringMap* MeshModel::add_materialtoglossytexturemapping() {
  ::SmartBodyBinary::StringToStringMap* _add = _internal_add_materialtoglossytexturemapping();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.MeshModel.materialToGlossyTextureMapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringMap >&
MeshModel::materialtoglossytexturemapping() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.MeshModel.materialToGlossyTextureMapping)
  return _impl_.materialtoglossytexturemapping_;
}

// -------------------------------------------------------------------

// SkinWeight

// required string sourceMeshName = 1;
inline bool SkinWeight::_internal_has_sourcemeshname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SkinWeight::has_sourcemeshname() const {
  return _internal_has_sourcemeshname();
}
inline void SkinWeight::clear_sourcemeshname() {
  _impl_.sourcemeshname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SkinWeight::sourcemeshname() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.sourceMeshName)
  return _internal_sourcemeshname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkinWeight::set_sourcemeshname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sourcemeshname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.sourceMeshName)
}
inline std::string* SkinWeight::mutable_sourcemeshname() {
  std::string* _s = _internal_mutable_sourcemeshname();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.SkinWeight.sourceMeshName)
  return _s;
}
inline const std::string& SkinWeight::_internal_sourcemeshname() const {
  return _impl_.sourcemeshname_.Get();
}
inline void SkinWeight::_internal_set_sourcemeshname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sourcemeshname_.Set(value, GetArenaForAllocation());
}
inline std::string* SkinWeight::_internal_mutable_sourcemeshname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sourcemeshname_.Mutable(GetArenaForAllocation());
}
inline std::string* SkinWeight::release_sourcemeshname() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.SkinWeight.sourceMeshName)
  if (!_internal_has_sourcemeshname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sourcemeshname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourcemeshname_.IsDefault()) {
    _impl_.sourcemeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SkinWeight::set_allocated_sourcemeshname(std::string* sourcemeshname) {
  if (sourcemeshname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sourcemeshname_.SetAllocated(sourcemeshname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourcemeshname_.IsDefault()) {
    _impl_.sourcemeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.SkinWeight.sourceMeshName)
}

// repeated string influenceJointNames = 2;
inline int SkinWeight::_internal_influencejointnames_size() const {
  return _impl_.influencejointnames_.size();
}
inline int SkinWeight::influencejointnames_size() const {
  return _internal_influencejointnames_size();
}
inline void SkinWeight::clear_influencejointnames() {
  _impl_.influencejointnames_.Clear();
}
inline std::string* SkinWeight::add_influencejointnames() {
  std::string* _s = _internal_add_influencejointnames();
  // @@protoc_insertion_point(field_add_mutable:SmartBodyBinary.SkinWeight.influenceJointNames)
  return _s;
}
inline const std::string& SkinWeight::_internal_influencejointnames(int index) const {
  return _impl_.influencejointnames_.Get(index);
}
inline const std::string& SkinWeight::influencejointnames(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.influenceJointNames)
  return _internal_influencejointnames(index);
}
inline std::string* SkinWeight::mutable_influencejointnames(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.SkinWeight.influenceJointNames)
  return _impl_.influencejointnames_.Mutable(index);
}
inline void SkinWeight::set_influencejointnames(int index, const std::string& value) {
  _impl_.influencejointnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline void SkinWeight::set_influencejointnames(int index, std::string&& value) {
  _impl_.influencejointnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline void SkinWeight::set_influencejointnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.influencejointnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline void SkinWeight::set_influencejointnames(int index, const char* value, size_t size) {
  _impl_.influencejointnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline std::string* SkinWeight::_internal_add_influencejointnames() {
  return _impl_.influencejointnames_.Add();
}
inline void SkinWeight::add_influencejointnames(const std::string& value) {
  _impl_.influencejointnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline void SkinWeight::add_influencejointnames(std::string&& value) {
  _impl_.influencejointnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline void SkinWeight::add_influencejointnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.influencejointnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline void SkinWeight::add_influencejointnames(const char* value, size_t size) {
  _impl_.influencejointnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartBodyBinary.SkinWeight.influenceJointNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SkinWeight::influencejointnames() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.SkinWeight.influenceJointNames)
  return _impl_.influencejointnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SkinWeight::mutable_influencejointnames() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.SkinWeight.influenceJointNames)
  return &_impl_.influencejointnames_;
}

// repeated float bindWeights = 3;
inline int SkinWeight::_internal_bindweights_size() const {
  return _impl_.bindweights_.size();
}
inline int SkinWeight::bindweights_size() const {
  return _internal_bindweights_size();
}
inline void SkinWeight::clear_bindweights() {
  _impl_.bindweights_.Clear();
}
inline float SkinWeight::_internal_bindweights(int index) const {
  return _impl_.bindweights_.Get(index);
}
inline float SkinWeight::bindweights(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.bindWeights)
  return _internal_bindweights(index);
}
inline void SkinWeight::set_bindweights(int index, float value) {
  _impl_.bindweights_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.bindWeights)
}
inline void SkinWeight::_internal_add_bindweights(float value) {
  _impl_.bindweights_.Add(value);
}
inline void SkinWeight::add_bindweights(float value) {
  _internal_add_bindweights(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.bindWeights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SkinWeight::_internal_bindweights() const {
  return _impl_.bindweights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SkinWeight::bindweights() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.SkinWeight.bindWeights)
  return _internal_bindweights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SkinWeight::_internal_mutable_bindweights() {
  return &_impl_.bindweights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SkinWeight::mutable_bindweights() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.SkinWeight.bindWeights)
  return _internal_mutable_bindweights();
}

// repeated float bindPoseMatrice = 4;
inline int SkinWeight::_internal_bindposematrice_size() const {
  return _impl_.bindposematrice_.size();
}
inline int SkinWeight::bindposematrice_size() const {
  return _internal_bindposematrice_size();
}
inline void SkinWeight::clear_bindposematrice() {
  _impl_.bindposematrice_.Clear();
}
inline float SkinWeight::_internal_bindposematrice(int index) const {
  return _impl_.bindposematrice_.Get(index);
}
inline float SkinWeight::bindposematrice(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.bindPoseMatrice)
  return _internal_bindposematrice(index);
}
inline void SkinWeight::set_bindposematrice(int index, float value) {
  _impl_.bindposematrice_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.bindPoseMatrice)
}
inline void SkinWeight::_internal_add_bindposematrice(float value) {
  _impl_.bindposematrice_.Add(value);
}
inline void SkinWeight::add_bindposematrice(float value) {
  _internal_add_bindposematrice(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.bindPoseMatrice)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SkinWeight::_internal_bindposematrice() const {
  return _impl_.bindposematrice_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SkinWeight::bindposematrice() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.SkinWeight.bindPoseMatrice)
  return _internal_bindposematrice();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SkinWeight::_internal_mutable_bindposematrice() {
  return &_impl_.bindposematrice_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SkinWeight::mutable_bindposematrice() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.SkinWeight.bindPoseMatrice)
  return _internal_mutable_bindposematrice();
}

// repeated float bindShapeMatrix = 5;
inline int SkinWeight::_internal_bindshapematrix_size() const {
  return _impl_.bindshapematrix_.size();
}
inline int SkinWeight::bindshapematrix_size() const {
  return _internal_bindshapematrix_size();
}
inline void SkinWeight::clear_bindshapematrix() {
  _impl_.bindshapematrix_.Clear();
}
inline float SkinWeight::_internal_bindshapematrix(int index) const {
  return _impl_.bindshapematrix_.Get(index);
}
inline float SkinWeight::bindshapematrix(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.bindShapeMatrix)
  return _internal_bindshapematrix(index);
}
inline void SkinWeight::set_bindshapematrix(int index, float value) {
  _impl_.bindshapematrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.bindShapeMatrix)
}
inline void SkinWeight::_internal_add_bindshapematrix(float value) {
  _impl_.bindshapematrix_.Add(value);
}
inline void SkinWeight::add_bindshapematrix(float value) {
  _internal_add_bindshapematrix(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.bindShapeMatrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SkinWeight::_internal_bindshapematrix() const {
  return _impl_.bindshapematrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SkinWeight::bindshapematrix() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.SkinWeight.bindShapeMatrix)
  return _internal_bindshapematrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SkinWeight::_internal_mutable_bindshapematrix() {
  return &_impl_.bindshapematrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SkinWeight::mutable_bindshapematrix() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.SkinWeight.bindShapeMatrix)
  return _internal_mutable_bindshapematrix();
}

// repeated int32 numberOfInfluenceJoints = 6;
inline int SkinWeight::_internal_numberofinfluencejoints_size() const {
  return _impl_.numberofinfluencejoints_.size();
}
inline int SkinWeight::numberofinfluencejoints_size() const {
  return _internal_numberofinfluencejoints_size();
}
inline void SkinWeight::clear_numberofinfluencejoints() {
  _impl_.numberofinfluencejoints_.Clear();
}
inline int32_t SkinWeight::_internal_numberofinfluencejoints(int index) const {
  return _impl_.numberofinfluencejoints_.Get(index);
}
inline int32_t SkinWeight::numberofinfluencejoints(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.numberOfInfluenceJoints)
  return _internal_numberofinfluencejoints(index);
}
inline void SkinWeight::set_numberofinfluencejoints(int index, int32_t value) {
  _impl_.numberofinfluencejoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.numberOfInfluenceJoints)
}
inline void SkinWeight::_internal_add_numberofinfluencejoints(int32_t value) {
  _impl_.numberofinfluencejoints_.Add(value);
}
inline void SkinWeight::add_numberofinfluencejoints(int32_t value) {
  _internal_add_numberofinfluencejoints(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.numberOfInfluenceJoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SkinWeight::_internal_numberofinfluencejoints() const {
  return _impl_.numberofinfluencejoints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SkinWeight::numberofinfluencejoints() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.SkinWeight.numberOfInfluenceJoints)
  return _internal_numberofinfluencejoints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SkinWeight::_internal_mutable_numberofinfluencejoints() {
  return &_impl_.numberofinfluencejoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SkinWeight::mutable_numberofinfluencejoints() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.SkinWeight.numberOfInfluenceJoints)
  return _internal_mutable_numberofinfluencejoints();
}

// repeated int32 weightIndices = 7;
inline int SkinWeight::_internal_weightindices_size() const {
  return _impl_.weightindices_.size();
}
inline int SkinWeight::weightindices_size() const {
  return _internal_weightindices_size();
}
inline void SkinWeight::clear_weightindices() {
  _impl_.weightindices_.Clear();
}
inline int32_t SkinWeight::_internal_weightindices(int index) const {
  return _impl_.weightindices_.Get(index);
}
inline int32_t SkinWeight::weightindices(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.weightIndices)
  return _internal_weightindices(index);
}
inline void SkinWeight::set_weightindices(int index, int32_t value) {
  _impl_.weightindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.weightIndices)
}
inline void SkinWeight::_internal_add_weightindices(int32_t value) {
  _impl_.weightindices_.Add(value);
}
inline void SkinWeight::add_weightindices(int32_t value) {
  _internal_add_weightindices(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.weightIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SkinWeight::_internal_weightindices() const {
  return _impl_.weightindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SkinWeight::weightindices() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.SkinWeight.weightIndices)
  return _internal_weightindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SkinWeight::_internal_mutable_weightindices() {
  return &_impl_.weightindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SkinWeight::mutable_weightindices() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.SkinWeight.weightIndices)
  return _internal_mutable_weightindices();
}

// repeated int32 jointNameIndices = 8;
inline int SkinWeight::_internal_jointnameindices_size() const {
  return _impl_.jointnameindices_.size();
}
inline int SkinWeight::jointnameindices_size() const {
  return _internal_jointnameindices_size();
}
inline void SkinWeight::clear_jointnameindices() {
  _impl_.jointnameindices_.Clear();
}
inline int32_t SkinWeight::_internal_jointnameindices(int index) const {
  return _impl_.jointnameindices_.Get(index);
}
inline int32_t SkinWeight::jointnameindices(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.SkinWeight.jointNameIndices)
  return _internal_jointnameindices(index);
}
inline void SkinWeight::set_jointnameindices(int index, int32_t value) {
  _impl_.jointnameindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.SkinWeight.jointNameIndices)
}
inline void SkinWeight::_internal_add_jointnameindices(int32_t value) {
  _impl_.jointnameindices_.Add(value);
}
inline void SkinWeight::add_jointnameindices(int32_t value) {
  _internal_add_jointnameindices(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.SkinWeight.jointNameIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SkinWeight::_internal_jointnameindices() const {
  return _impl_.jointnameindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SkinWeight::jointnameindices() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.SkinWeight.jointNameIndices)
  return _internal_jointnameindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SkinWeight::_internal_mutable_jointnameindices() {
  return &_impl_.jointnameindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SkinWeight::mutable_jointnameindices() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.SkinWeight.jointNameIndices)
  return _internal_mutable_jointnameindices();
}

// -------------------------------------------------------------------

// StaticMesh

// required string staticMeshName = 1;
inline bool StaticMesh::_internal_has_staticmeshname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StaticMesh::has_staticmeshname() const {
  return _internal_has_staticmeshname();
}
inline void StaticMesh::clear_staticmeshname() {
  _impl_.staticmeshname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StaticMesh::staticmeshname() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StaticMesh.staticMeshName)
  return _internal_staticmeshname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StaticMesh::set_staticmeshname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.staticmeshname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StaticMesh.staticMeshName)
}
inline std::string* StaticMesh::mutable_staticmeshname() {
  std::string* _s = _internal_mutable_staticmeshname();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StaticMesh.staticMeshName)
  return _s;
}
inline const std::string& StaticMesh::_internal_staticmeshname() const {
  return _impl_.staticmeshname_.Get();
}
inline void StaticMesh::_internal_set_staticmeshname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.staticmeshname_.Set(value, GetArenaForAllocation());
}
inline std::string* StaticMesh::_internal_mutable_staticmeshname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.staticmeshname_.Mutable(GetArenaForAllocation());
}
inline std::string* StaticMesh::release_staticmeshname() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.StaticMesh.staticMeshName)
  if (!_internal_has_staticmeshname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.staticmeshname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.staticmeshname_.IsDefault()) {
    _impl_.staticmeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StaticMesh::set_allocated_staticmeshname(std::string* staticmeshname) {
  if (staticmeshname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.staticmeshname_.SetAllocated(staticmeshname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.staticmeshname_.IsDefault()) {
    _impl_.staticmeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.StaticMesh.staticMeshName)
}

// repeated .SmartBodyBinary.MeshModel meshModels = 2;
inline int StaticMesh::_internal_meshmodels_size() const {
  return _impl_.meshmodels_.size();
}
inline int StaticMesh::meshmodels_size() const {
  return _internal_meshmodels_size();
}
inline void StaticMesh::clear_meshmodels() {
  _impl_.meshmodels_.Clear();
}
inline ::SmartBodyBinary::MeshModel* StaticMesh::mutable_meshmodels(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StaticMesh.meshModels)
  return _impl_.meshmodels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::MeshModel >*
StaticMesh::mutable_meshmodels() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.StaticMesh.meshModels)
  return &_impl_.meshmodels_;
}
inline const ::SmartBodyBinary::MeshModel& StaticMesh::_internal_meshmodels(int index) const {
  return _impl_.meshmodels_.Get(index);
}
inline const ::SmartBodyBinary::MeshModel& StaticMesh::meshmodels(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StaticMesh.meshModels)
  return _internal_meshmodels(index);
}
inline ::SmartBodyBinary::MeshModel* StaticMesh::_internal_add_meshmodels() {
  return _impl_.meshmodels_.Add();
}
inline ::SmartBodyBinary::MeshModel* StaticMesh::add_meshmodels() {
  ::SmartBodyBinary::MeshModel* _add = _internal_add_meshmodels();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.StaticMesh.meshModels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::MeshModel >&
StaticMesh::meshmodels() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.StaticMesh.meshModels)
  return _impl_.meshmodels_;
}

// -------------------------------------------------------------------

// DeformableMesh

// required string deformableMeshName = 1;
inline bool DeformableMesh::_internal_has_deformablemeshname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeformableMesh::has_deformablemeshname() const {
  return _internal_has_deformablemeshname();
}
inline void DeformableMesh::clear_deformablemeshname() {
  _impl_.deformablemeshname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeformableMesh::deformablemeshname() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.DeformableMesh.deformableMeshName)
  return _internal_deformablemeshname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeformableMesh::set_deformablemeshname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.deformablemeshname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.DeformableMesh.deformableMeshName)
}
inline std::string* DeformableMesh::mutable_deformablemeshname() {
  std::string* _s = _internal_mutable_deformablemeshname();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.DeformableMesh.deformableMeshName)
  return _s;
}
inline const std::string& DeformableMesh::_internal_deformablemeshname() const {
  return _impl_.deformablemeshname_.Get();
}
inline void DeformableMesh::_internal_set_deformablemeshname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deformablemeshname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeformableMesh::_internal_mutable_deformablemeshname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deformablemeshname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeformableMesh::release_deformablemeshname() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.DeformableMesh.deformableMeshName)
  if (!_internal_has_deformablemeshname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.deformablemeshname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deformablemeshname_.IsDefault()) {
    _impl_.deformablemeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeformableMesh::set_allocated_deformablemeshname(std::string* deformablemeshname) {
  if (deformablemeshname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deformablemeshname_.SetAllocated(deformablemeshname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deformablemeshname_.IsDefault()) {
    _impl_.deformablemeshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.DeformableMesh.deformableMeshName)
}

// required .SmartBodyBinary.StaticMesh staticMesh = 2;
inline bool DeformableMesh::_internal_has_staticmesh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.staticmesh_ != nullptr);
  return value;
}
inline bool DeformableMesh::has_staticmesh() const {
  return _internal_has_staticmesh();
}
inline void DeformableMesh::clear_staticmesh() {
  if (_impl_.staticmesh_ != nullptr) _impl_.staticmesh_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SmartBodyBinary::StaticMesh& DeformableMesh::_internal_staticmesh() const {
  const ::SmartBodyBinary::StaticMesh* p = _impl_.staticmesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::SmartBodyBinary::StaticMesh&>(
      ::SmartBodyBinary::_StaticMesh_default_instance_);
}
inline const ::SmartBodyBinary::StaticMesh& DeformableMesh::staticmesh() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.DeformableMesh.staticMesh)
  return _internal_staticmesh();
}
inline void DeformableMesh::unsafe_arena_set_allocated_staticmesh(
    ::SmartBodyBinary::StaticMesh* staticmesh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staticmesh_);
  }
  _impl_.staticmesh_ = staticmesh;
  if (staticmesh) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SmartBodyBinary.DeformableMesh.staticMesh)
}
inline ::SmartBodyBinary::StaticMesh* DeformableMesh::release_staticmesh() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SmartBodyBinary::StaticMesh* temp = _impl_.staticmesh_;
  _impl_.staticmesh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SmartBodyBinary::StaticMesh* DeformableMesh::unsafe_arena_release_staticmesh() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.DeformableMesh.staticMesh)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SmartBodyBinary::StaticMesh* temp = _impl_.staticmesh_;
  _impl_.staticmesh_ = nullptr;
  return temp;
}
inline ::SmartBodyBinary::StaticMesh* DeformableMesh::_internal_mutable_staticmesh() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.staticmesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::SmartBodyBinary::StaticMesh>(GetArenaForAllocation());
    _impl_.staticmesh_ = p;
  }
  return _impl_.staticmesh_;
}
inline ::SmartBodyBinary::StaticMesh* DeformableMesh::mutable_staticmesh() {
  ::SmartBodyBinary::StaticMesh* _msg = _internal_mutable_staticmesh();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.DeformableMesh.staticMesh)
  return _msg;
}
inline void DeformableMesh::set_allocated_staticmesh(::SmartBodyBinary::StaticMesh* staticmesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.staticmesh_;
  }
  if (staticmesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(staticmesh);
    if (message_arena != submessage_arena) {
      staticmesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staticmesh, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.staticmesh_ = staticmesh;
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.DeformableMesh.staticMesh)
}

// repeated .SmartBodyBinary.SkinWeight skinWeights = 3;
inline int DeformableMesh::_internal_skinweights_size() const {
  return _impl_.skinweights_.size();
}
inline int DeformableMesh::skinweights_size() const {
  return _internal_skinweights_size();
}
inline void DeformableMesh::clear_skinweights() {
  _impl_.skinweights_.Clear();
}
inline ::SmartBodyBinary::SkinWeight* DeformableMesh::mutable_skinweights(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.DeformableMesh.skinWeights)
  return _impl_.skinweights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >*
DeformableMesh::mutable_skinweights() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.DeformableMesh.skinWeights)
  return &_impl_.skinweights_;
}
inline const ::SmartBodyBinary::SkinWeight& DeformableMesh::_internal_skinweights(int index) const {
  return _impl_.skinweights_.Get(index);
}
inline const ::SmartBodyBinary::SkinWeight& DeformableMesh::skinweights(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.DeformableMesh.skinWeights)
  return _internal_skinweights(index);
}
inline ::SmartBodyBinary::SkinWeight* DeformableMesh::_internal_add_skinweights() {
  return _impl_.skinweights_.Add();
}
inline ::SmartBodyBinary::SkinWeight* DeformableMesh::add_skinweights() {
  ::SmartBodyBinary::SkinWeight* _add = _internal_add_skinweights();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.DeformableMesh.skinWeights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::SkinWeight >&
DeformableMesh::skinweights() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.DeformableMesh.skinWeights)
  return _impl_.skinweights_;
}

// repeated .SmartBodyBinary.StringToStringVectorMap morphTargets = 4;
inline int DeformableMesh::_internal_morphtargets_size() const {
  return _impl_.morphtargets_.size();
}
inline int DeformableMesh::morphtargets_size() const {
  return _internal_morphtargets_size();
}
inline ::SmartBodyBinary::StringToStringVectorMap* DeformableMesh::mutable_morphtargets(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.DeformableMesh.morphTargets)
  return _impl_.morphtargets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >*
DeformableMesh::mutable_morphtargets() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.DeformableMesh.morphTargets)
  return &_impl_.morphtargets_;
}
inline const ::SmartBodyBinary::StringToStringVectorMap& DeformableMesh::_internal_morphtargets(int index) const {
  return _impl_.morphtargets_.Get(index);
}
inline const ::SmartBodyBinary::StringToStringVectorMap& DeformableMesh::morphtargets(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.DeformableMesh.morphTargets)
  return _internal_morphtargets(index);
}
inline ::SmartBodyBinary::StringToStringVectorMap* DeformableMesh::_internal_add_morphtargets() {
  return _impl_.morphtargets_.Add();
}
inline ::SmartBodyBinary::StringToStringVectorMap* DeformableMesh::add_morphtargets() {
  ::SmartBodyBinary::StringToStringVectorMap* _add = _internal_add_morphtargets();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.DeformableMesh.morphTargets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::StringToStringVectorMap >&
DeformableMesh::morphtargets() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.DeformableMesh.morphTargets)
  return _impl_.morphtargets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sbmesh_2eproto
