// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbutilities.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sbutilities_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sbutilities_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sbutilities_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sbutilities_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sbutilities_2eproto;
namespace SmartBodyBinary {
class StringToFloatVectorMap;
struct StringToFloatVectorMapDefaultTypeInternal;
extern StringToFloatVectorMapDefaultTypeInternal _StringToFloatVectorMap_default_instance_;
class StringToIntVectorMap;
struct StringToIntVectorMapDefaultTypeInternal;
extern StringToIntVectorMapDefaultTypeInternal _StringToIntVectorMap_default_instance_;
class StringToStringMap;
struct StringToStringMapDefaultTypeInternal;
extern StringToStringMapDefaultTypeInternal _StringToStringMap_default_instance_;
class StringToStringVectorMap;
struct StringToStringVectorMapDefaultTypeInternal;
extern StringToStringVectorMapDefaultTypeInternal _StringToStringVectorMap_default_instance_;
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> ::SmartBodyBinary::StringToFloatVectorMap* Arena::CreateMaybeMessage<::SmartBodyBinary::StringToFloatVectorMap>(Arena*);
template<> ::SmartBodyBinary::StringToIntVectorMap* Arena::CreateMaybeMessage<::SmartBodyBinary::StringToIntVectorMap>(Arena*);
template<> ::SmartBodyBinary::StringToStringMap* Arena::CreateMaybeMessage<::SmartBodyBinary::StringToStringMap>(Arena*);
template<> ::SmartBodyBinary::StringToStringVectorMap* Arena::CreateMaybeMessage<::SmartBodyBinary::StringToStringVectorMap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SmartBodyBinary {

// ===================================================================

class StringToStringMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.StringToStringMap) */ {
 public:
  inline StringToStringMap() : StringToStringMap(nullptr) {}
  ~StringToStringMap() override;
  explicit PROTOBUF_CONSTEXPR StringToStringMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringToStringMap(const StringToStringMap& from);
  StringToStringMap(StringToStringMap&& from) noexcept
    : StringToStringMap() {
    *this = ::std::move(from);
  }

  inline StringToStringMap& operator=(const StringToStringMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringToStringMap& operator=(StringToStringMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringToStringMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringToStringMap* internal_default_instance() {
    return reinterpret_cast<const StringToStringMap*>(
               &_StringToStringMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringToStringMap& a, StringToStringMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringToStringMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringToStringMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringToStringMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringToStringMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringToStringMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringToStringMap& from) {
    StringToStringMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringToStringMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.StringToStringMap";
  }
  protected:
  explicit StringToStringMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // required string from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // required string to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToStringMap)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbutilities_2eproto;
};
// -------------------------------------------------------------------

class StringToFloatVectorMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.StringToFloatVectorMap) */ {
 public:
  inline StringToFloatVectorMap() : StringToFloatVectorMap(nullptr) {}
  ~StringToFloatVectorMap() override;
  explicit PROTOBUF_CONSTEXPR StringToFloatVectorMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringToFloatVectorMap(const StringToFloatVectorMap& from);
  StringToFloatVectorMap(StringToFloatVectorMap&& from) noexcept
    : StringToFloatVectorMap() {
    *this = ::std::move(from);
  }

  inline StringToFloatVectorMap& operator=(const StringToFloatVectorMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringToFloatVectorMap& operator=(StringToFloatVectorMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringToFloatVectorMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringToFloatVectorMap* internal_default_instance() {
    return reinterpret_cast<const StringToFloatVectorMap*>(
               &_StringToFloatVectorMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringToFloatVectorMap& a, StringToFloatVectorMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringToFloatVectorMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringToFloatVectorMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringToFloatVectorMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringToFloatVectorMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringToFloatVectorMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringToFloatVectorMap& from) {
    StringToFloatVectorMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringToFloatVectorMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.StringToFloatVectorMap";
  }
  protected:
  explicit StringToFloatVectorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 2,
    kFromFieldNumber = 1,
  };
  // repeated float to = 2;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  private:
  float _internal_to(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_to() const;
  void _internal_add_to(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_to();
  public:
  float to(int index) const;
  void set_to(int index, float value);
  void add_to(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_to();

  // required string from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToFloatVectorMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbutilities_2eproto;
};
// -------------------------------------------------------------------

class StringToIntVectorMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.StringToIntVectorMap) */ {
 public:
  inline StringToIntVectorMap() : StringToIntVectorMap(nullptr) {}
  ~StringToIntVectorMap() override;
  explicit PROTOBUF_CONSTEXPR StringToIntVectorMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringToIntVectorMap(const StringToIntVectorMap& from);
  StringToIntVectorMap(StringToIntVectorMap&& from) noexcept
    : StringToIntVectorMap() {
    *this = ::std::move(from);
  }

  inline StringToIntVectorMap& operator=(const StringToIntVectorMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringToIntVectorMap& operator=(StringToIntVectorMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringToIntVectorMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringToIntVectorMap* internal_default_instance() {
    return reinterpret_cast<const StringToIntVectorMap*>(
               &_StringToIntVectorMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StringToIntVectorMap& a, StringToIntVectorMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringToIntVectorMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringToIntVectorMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringToIntVectorMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringToIntVectorMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringToIntVectorMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringToIntVectorMap& from) {
    StringToIntVectorMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringToIntVectorMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.StringToIntVectorMap";
  }
  protected:
  explicit StringToIntVectorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 2,
    kFromFieldNumber = 1,
  };
  // repeated int32 to = 2;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  private:
  int32_t _internal_to(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_to() const;
  void _internal_add_to(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_to();
  public:
  int32_t to(int index) const;
  void set_to(int index, int32_t value);
  void add_to(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_to();

  // required string from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToIntVectorMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbutilities_2eproto;
};
// -------------------------------------------------------------------

class StringToStringVectorMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.StringToStringVectorMap) */ {
 public:
  inline StringToStringVectorMap() : StringToStringVectorMap(nullptr) {}
  ~StringToStringVectorMap() override;
  explicit PROTOBUF_CONSTEXPR StringToStringVectorMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringToStringVectorMap(const StringToStringVectorMap& from);
  StringToStringVectorMap(StringToStringVectorMap&& from) noexcept
    : StringToStringVectorMap() {
    *this = ::std::move(from);
  }

  inline StringToStringVectorMap& operator=(const StringToStringVectorMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringToStringVectorMap& operator=(StringToStringVectorMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringToStringVectorMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringToStringVectorMap* internal_default_instance() {
    return reinterpret_cast<const StringToStringVectorMap*>(
               &_StringToStringVectorMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StringToStringVectorMap& a, StringToStringVectorMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringToStringVectorMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringToStringVectorMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringToStringVectorMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringToStringVectorMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringToStringVectorMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringToStringVectorMap& from) {
    StringToStringVectorMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringToStringVectorMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.StringToStringVectorMap";
  }
  protected:
  explicit StringToStringVectorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 2,
    kFromFieldNumber = 1,
  };
  // repeated string to = 2;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // required string from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.StringToStringVectorMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbutilities_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringToStringMap

// required string from = 1;
inline bool StringToStringMap::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringToStringMap::has_from() const {
  return _internal_has_from();
}
inline void StringToStringMap::clear_from() {
  _impl_.from_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringToStringMap::from() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToStringMap.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringToStringMap::set_from(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToStringMap.from)
}
inline std::string* StringToStringMap::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StringToStringMap.from)
  return _s;
}
inline const std::string& StringToStringMap::_internal_from() const {
  return _impl_.from_.Get();
}
inline void StringToStringMap::_internal_set_from(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* StringToStringMap::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* StringToStringMap::release_from() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.StringToStringMap.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.from_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StringToStringMap::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.StringToStringMap.from)
}

// required string to = 2;
inline bool StringToStringMap::_internal_has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StringToStringMap::has_to() const {
  return _internal_has_to();
}
inline void StringToStringMap::clear_to() {
  _impl_.to_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StringToStringMap::to() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToStringMap.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringToStringMap::set_to(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToStringMap.to)
}
inline std::string* StringToStringMap::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StringToStringMap.to)
  return _s;
}
inline const std::string& StringToStringMap::_internal_to() const {
  return _impl_.to_.Get();
}
inline void StringToStringMap::_internal_set_to(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* StringToStringMap::_internal_mutable_to() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.to_.Mutable(GetArenaForAllocation());
}
inline std::string* StringToStringMap::release_to() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.StringToStringMap.to)
  if (!_internal_has_to()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.to_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StringToStringMap::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.StringToStringMap.to)
}

// -------------------------------------------------------------------

// StringToFloatVectorMap

// required string from = 1;
inline bool StringToFloatVectorMap::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringToFloatVectorMap::has_from() const {
  return _internal_has_from();
}
inline void StringToFloatVectorMap::clear_from() {
  _impl_.from_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringToFloatVectorMap::from() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToFloatVectorMap.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringToFloatVectorMap::set_from(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToFloatVectorMap.from)
}
inline std::string* StringToFloatVectorMap::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StringToFloatVectorMap.from)
  return _s;
}
inline const std::string& StringToFloatVectorMap::_internal_from() const {
  return _impl_.from_.Get();
}
inline void StringToFloatVectorMap::_internal_set_from(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* StringToFloatVectorMap::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* StringToFloatVectorMap::release_from() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.StringToFloatVectorMap.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.from_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StringToFloatVectorMap::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.StringToFloatVectorMap.from)
}

// repeated float to = 2;
inline int StringToFloatVectorMap::_internal_to_size() const {
  return _impl_.to_.size();
}
inline int StringToFloatVectorMap::to_size() const {
  return _internal_to_size();
}
inline void StringToFloatVectorMap::clear_to() {
  _impl_.to_.Clear();
}
inline float StringToFloatVectorMap::_internal_to(int index) const {
  return _impl_.to_.Get(index);
}
inline float StringToFloatVectorMap::to(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToFloatVectorMap.to)
  return _internal_to(index);
}
inline void StringToFloatVectorMap::set_to(int index, float value) {
  _impl_.to_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToFloatVectorMap.to)
}
inline void StringToFloatVectorMap::_internal_add_to(float value) {
  _impl_.to_.Add(value);
}
inline void StringToFloatVectorMap::add_to(float value) {
  _internal_add_to(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.StringToFloatVectorMap.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
StringToFloatVectorMap::_internal_to() const {
  return _impl_.to_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
StringToFloatVectorMap::to() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.StringToFloatVectorMap.to)
  return _internal_to();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
StringToFloatVectorMap::_internal_mutable_to() {
  return &_impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
StringToFloatVectorMap::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.StringToFloatVectorMap.to)
  return _internal_mutable_to();
}

// -------------------------------------------------------------------

// StringToIntVectorMap

// required string from = 1;
inline bool StringToIntVectorMap::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringToIntVectorMap::has_from() const {
  return _internal_has_from();
}
inline void StringToIntVectorMap::clear_from() {
  _impl_.from_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringToIntVectorMap::from() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToIntVectorMap.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringToIntVectorMap::set_from(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToIntVectorMap.from)
}
inline std::string* StringToIntVectorMap::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StringToIntVectorMap.from)
  return _s;
}
inline const std::string& StringToIntVectorMap::_internal_from() const {
  return _impl_.from_.Get();
}
inline void StringToIntVectorMap::_internal_set_from(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* StringToIntVectorMap::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* StringToIntVectorMap::release_from() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.StringToIntVectorMap.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.from_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StringToIntVectorMap::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.StringToIntVectorMap.from)
}

// repeated int32 to = 2;
inline int StringToIntVectorMap::_internal_to_size() const {
  return _impl_.to_.size();
}
inline int StringToIntVectorMap::to_size() const {
  return _internal_to_size();
}
inline void StringToIntVectorMap::clear_to() {
  _impl_.to_.Clear();
}
inline int32_t StringToIntVectorMap::_internal_to(int index) const {
  return _impl_.to_.Get(index);
}
inline int32_t StringToIntVectorMap::to(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToIntVectorMap.to)
  return _internal_to(index);
}
inline void StringToIntVectorMap::set_to(int index, int32_t value) {
  _impl_.to_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToIntVectorMap.to)
}
inline void StringToIntVectorMap::_internal_add_to(int32_t value) {
  _impl_.to_.Add(value);
}
inline void StringToIntVectorMap::add_to(int32_t value) {
  _internal_add_to(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.StringToIntVectorMap.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StringToIntVectorMap::_internal_to() const {
  return _impl_.to_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StringToIntVectorMap::to() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.StringToIntVectorMap.to)
  return _internal_to();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StringToIntVectorMap::_internal_mutable_to() {
  return &_impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StringToIntVectorMap::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.StringToIntVectorMap.to)
  return _internal_mutable_to();
}

// -------------------------------------------------------------------

// StringToStringVectorMap

// required string from = 1;
inline bool StringToStringVectorMap::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringToStringVectorMap::has_from() const {
  return _internal_has_from();
}
inline void StringToStringVectorMap::clear_from() {
  _impl_.from_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringToStringVectorMap::from() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToStringVectorMap.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringToStringVectorMap::set_from(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToStringVectorMap.from)
}
inline std::string* StringToStringVectorMap::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StringToStringVectorMap.from)
  return _s;
}
inline const std::string& StringToStringVectorMap::_internal_from() const {
  return _impl_.from_.Get();
}
inline void StringToStringVectorMap::_internal_set_from(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* StringToStringVectorMap::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* StringToStringVectorMap::release_from() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.StringToStringVectorMap.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.from_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StringToStringVectorMap::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.StringToStringVectorMap.from)
}

// repeated string to = 2;
inline int StringToStringVectorMap::_internal_to_size() const {
  return _impl_.to_.size();
}
inline int StringToStringVectorMap::to_size() const {
  return _internal_to_size();
}
inline void StringToStringVectorMap::clear_to() {
  _impl_.to_.Clear();
}
inline std::string* StringToStringVectorMap::add_to() {
  std::string* _s = _internal_add_to();
  // @@protoc_insertion_point(field_add_mutable:SmartBodyBinary.StringToStringVectorMap.to)
  return _s;
}
inline const std::string& StringToStringVectorMap::_internal_to(int index) const {
  return _impl_.to_.Get(index);
}
inline const std::string& StringToStringVectorMap::to(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.StringToStringVectorMap.to)
  return _internal_to(index);
}
inline std::string* StringToStringVectorMap::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.StringToStringVectorMap.to)
  return _impl_.to_.Mutable(index);
}
inline void StringToStringVectorMap::set_to(int index, const std::string& value) {
  _impl_.to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToStringVectorMap.to)
}
inline void StringToStringVectorMap::set_to(int index, std::string&& value) {
  _impl_.to_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SmartBodyBinary.StringToStringVectorMap.to)
}
inline void StringToStringVectorMap::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartBodyBinary.StringToStringVectorMap.to)
}
inline void StringToStringVectorMap::set_to(int index, const char* value, size_t size) {
  _impl_.to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartBodyBinary.StringToStringVectorMap.to)
}
inline std::string* StringToStringVectorMap::_internal_add_to() {
  return _impl_.to_.Add();
}
inline void StringToStringVectorMap::add_to(const std::string& value) {
  _impl_.to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.StringToStringVectorMap.to)
}
inline void StringToStringVectorMap::add_to(std::string&& value) {
  _impl_.to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartBodyBinary.StringToStringVectorMap.to)
}
inline void StringToStringVectorMap::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartBodyBinary.StringToStringVectorMap.to)
}
inline void StringToStringVectorMap::add_to(const char* value, size_t size) {
  _impl_.to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartBodyBinary.StringToStringVectorMap.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringToStringVectorMap::to() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.StringToStringVectorMap.to)
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringToStringVectorMap::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.StringToStringVectorMap.to)
  return &_impl_.to_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sbutilities_2eproto
