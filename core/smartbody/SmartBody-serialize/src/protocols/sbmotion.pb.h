// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sbmotion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sbmotion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sbmotion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sbmotion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sbmotion_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sbmotion_2eproto;
namespace SmartBodyBinary {
class Motion;
struct MotionDefaultTypeInternal;
extern MotionDefaultTypeInternal _Motion_default_instance_;
class Motion_MetaData;
struct Motion_MetaDataDefaultTypeInternal;
extern Motion_MetaDataDefaultTypeInternal _Motion_MetaData_default_instance_;
}  // namespace SmartBodyBinary
PROTOBUF_NAMESPACE_OPEN
template<> ::SmartBodyBinary::Motion* Arena::CreateMaybeMessage<::SmartBodyBinary::Motion>(Arena*);
template<> ::SmartBodyBinary::Motion_MetaData* Arena::CreateMaybeMessage<::SmartBodyBinary::Motion_MetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SmartBodyBinary {

// ===================================================================

class Motion_MetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.Motion.MetaData) */ {
 public:
  inline Motion_MetaData() : Motion_MetaData(nullptr) {}
  ~Motion_MetaData() override;
  explicit PROTOBUF_CONSTEXPR Motion_MetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Motion_MetaData(const Motion_MetaData& from);
  Motion_MetaData(Motion_MetaData&& from) noexcept
    : Motion_MetaData() {
    *this = ::std::move(from);
  }

  inline Motion_MetaData& operator=(const Motion_MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motion_MetaData& operator=(Motion_MetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motion_MetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motion_MetaData* internal_default_instance() {
    return reinterpret_cast<const Motion_MetaData*>(
               &_Motion_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Motion_MetaData& a, Motion_MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(Motion_MetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motion_MetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Motion_MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Motion_MetaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Motion_MetaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Motion_MetaData& from) {
    Motion_MetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motion_MetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.Motion.MetaData";
  }
  protected:
  explicit Motion_MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaDataNameFieldNumber = 1,
    kMetaDataValueFieldNumber = 2,
  };
  // required string metaDataName = 1;
  bool has_metadataname() const;
  private:
  bool _internal_has_metadataname() const;
  public:
  void clear_metadataname();
  const std::string& metadataname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadataname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadataname();
  PROTOBUF_NODISCARD std::string* release_metadataname();
  void set_allocated_metadataname(std::string* metadataname);
  private:
  const std::string& _internal_metadataname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadataname(const std::string& value);
  std::string* _internal_mutable_metadataname();
  public:

  // required string metaDataValue = 2;
  bool has_metadatavalue() const;
  private:
  bool _internal_has_metadatavalue() const;
  public:
  void clear_metadatavalue();
  const std::string& metadatavalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadatavalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadatavalue();
  PROTOBUF_NODISCARD std::string* release_metadatavalue();
  void set_allocated_metadatavalue(std::string* metadatavalue);
  private:
  const std::string& _internal_metadatavalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadatavalue(const std::string& value);
  std::string* _internal_mutable_metadatavalue();
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.Motion.MetaData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadataname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadatavalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbmotion_2eproto;
};
// -------------------------------------------------------------------

class Motion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartBodyBinary.Motion) */ {
 public:
  inline Motion() : Motion(nullptr) {}
  ~Motion() override;
  explicit PROTOBUF_CONSTEXPR Motion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Motion(const Motion& from);
  Motion(Motion&& from) noexcept
    : Motion() {
    *this = ::std::move(from);
  }

  inline Motion& operator=(const Motion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motion& operator=(Motion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motion* internal_default_instance() {
    return reinterpret_cast<const Motion*>(
               &_Motion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Motion& a, Motion& b) {
    a.Swap(&b);
  }
  inline void Swap(Motion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Motion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Motion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Motion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Motion& from) {
    Motion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartBodyBinary.Motion";
  }
  protected:
  explicit Motion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Motion_MetaData MetaData;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 3,
    kChannelTypeFieldNumber = 4,
    kKeyTimesFieldNumber = 6,
    kKeyValuesFieldNumber = 7,
    kSyncPointsFieldNumber = 8,
    kMetaDataFieldNumber = 9,
    kNameFieldNumber = 1,
    kNumChannelsFieldNumber = 2,
    kNumFramesFieldNumber = 5,
  };
  // repeated string channelName = 3;
  int channelname_size() const;
  private:
  int _internal_channelname_size() const;
  public:
  void clear_channelname();
  const std::string& channelname(int index) const;
  std::string* mutable_channelname(int index);
  void set_channelname(int index, const std::string& value);
  void set_channelname(int index, std::string&& value);
  void set_channelname(int index, const char* value);
  void set_channelname(int index, const char* value, size_t size);
  std::string* add_channelname();
  void add_channelname(const std::string& value);
  void add_channelname(std::string&& value);
  void add_channelname(const char* value);
  void add_channelname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channelname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channelname();
  private:
  const std::string& _internal_channelname(int index) const;
  std::string* _internal_add_channelname();
  public:

  // repeated int32 channelType = 4;
  int channeltype_size() const;
  private:
  int _internal_channeltype_size() const;
  public:
  void clear_channeltype();
  private:
  int32_t _internal_channeltype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_channeltype() const;
  void _internal_add_channeltype(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_channeltype();
  public:
  int32_t channeltype(int index) const;
  void set_channeltype(int index, int32_t value);
  void add_channeltype(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      channeltype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_channeltype();

  // repeated float keyTimes = 6;
  int keytimes_size() const;
  private:
  int _internal_keytimes_size() const;
  public:
  void clear_keytimes();
  private:
  float _internal_keytimes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_keytimes() const;
  void _internal_add_keytimes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_keytimes();
  public:
  float keytimes(int index) const;
  void set_keytimes(int index, float value);
  void add_keytimes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      keytimes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_keytimes();

  // repeated float keyValues = 7;
  int keyvalues_size() const;
  private:
  int _internal_keyvalues_size() const;
  public:
  void clear_keyvalues();
  private:
  float _internal_keyvalues(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_keyvalues() const;
  void _internal_add_keyvalues(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_keyvalues();
  public:
  float keyvalues(int index) const;
  void set_keyvalues(int index, float value);
  void add_keyvalues(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      keyvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_keyvalues();

  // repeated float syncPoints = 8;
  int syncpoints_size() const;
  private:
  int _internal_syncpoints_size() const;
  public:
  void clear_syncpoints();
  private:
  float _internal_syncpoints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_syncpoints() const;
  void _internal_add_syncpoints(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_syncpoints();
  public:
  float syncpoints(int index) const;
  void set_syncpoints(int index, float value);
  void add_syncpoints(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      syncpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_syncpoints();

  // repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::SmartBodyBinary::Motion_MetaData* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >*
      mutable_metadata();
  private:
  const ::SmartBodyBinary::Motion_MetaData& _internal_metadata(int index) const;
  ::SmartBodyBinary::Motion_MetaData* _internal_add_metadata();
  public:
  const ::SmartBodyBinary::Motion_MetaData& metadata(int index) const;
  ::SmartBodyBinary::Motion_MetaData* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >&
      metadata() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 numChannels = 2;
  bool has_numchannels() const;
  private:
  bool _internal_has_numchannels() const;
  public:
  void clear_numchannels();
  int32_t numchannels() const;
  void set_numchannels(int32_t value);
  private:
  int32_t _internal_numchannels() const;
  void _internal_set_numchannels(int32_t value);
  public:

  // required int32 numFrames = 5;
  bool has_numframes() const;
  private:
  bool _internal_has_numframes() const;
  public:
  void clear_numframes();
  int32_t numframes() const;
  void set_numframes(int32_t value);
  private:
  int32_t _internal_numframes() const;
  void _internal_set_numframes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SmartBodyBinary.Motion)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channelname_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > channeltype_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > keytimes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > keyvalues_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > syncpoints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData > metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t numchannels_;
    int32_t numframes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sbmotion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Motion_MetaData

// required string metaDataName = 1;
inline bool Motion_MetaData::_internal_has_metadataname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Motion_MetaData::has_metadataname() const {
  return _internal_has_metadataname();
}
inline void Motion_MetaData::clear_metadataname() {
  _impl_.metadataname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Motion_MetaData::metadataname() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.MetaData.metaDataName)
  return _internal_metadataname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Motion_MetaData::set_metadataname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.metadataname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.MetaData.metaDataName)
}
inline std::string* Motion_MetaData::mutable_metadataname() {
  std::string* _s = _internal_mutable_metadataname();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.Motion.MetaData.metaDataName)
  return _s;
}
inline const std::string& Motion_MetaData::_internal_metadataname() const {
  return _impl_.metadataname_.Get();
}
inline void Motion_MetaData::_internal_set_metadataname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.metadataname_.Set(value, GetArenaForAllocation());
}
inline std::string* Motion_MetaData::_internal_mutable_metadataname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.metadataname_.Mutable(GetArenaForAllocation());
}
inline std::string* Motion_MetaData::release_metadataname() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.Motion.MetaData.metaDataName)
  if (!_internal_has_metadataname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.metadataname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadataname_.IsDefault()) {
    _impl_.metadataname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Motion_MetaData::set_allocated_metadataname(std::string* metadataname) {
  if (metadataname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metadataname_.SetAllocated(metadataname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadataname_.IsDefault()) {
    _impl_.metadataname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.Motion.MetaData.metaDataName)
}

// required string metaDataValue = 2;
inline bool Motion_MetaData::_internal_has_metadatavalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Motion_MetaData::has_metadatavalue() const {
  return _internal_has_metadatavalue();
}
inline void Motion_MetaData::clear_metadatavalue() {
  _impl_.metadatavalue_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Motion_MetaData::metadatavalue() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.MetaData.metaDataValue)
  return _internal_metadatavalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Motion_MetaData::set_metadatavalue(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.metadatavalue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.MetaData.metaDataValue)
}
inline std::string* Motion_MetaData::mutable_metadatavalue() {
  std::string* _s = _internal_mutable_metadatavalue();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.Motion.MetaData.metaDataValue)
  return _s;
}
inline const std::string& Motion_MetaData::_internal_metadatavalue() const {
  return _impl_.metadatavalue_.Get();
}
inline void Motion_MetaData::_internal_set_metadatavalue(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.metadatavalue_.Set(value, GetArenaForAllocation());
}
inline std::string* Motion_MetaData::_internal_mutable_metadatavalue() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.metadatavalue_.Mutable(GetArenaForAllocation());
}
inline std::string* Motion_MetaData::release_metadatavalue() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.Motion.MetaData.metaDataValue)
  if (!_internal_has_metadatavalue()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.metadatavalue_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadatavalue_.IsDefault()) {
    _impl_.metadatavalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Motion_MetaData::set_allocated_metadatavalue(std::string* metadatavalue) {
  if (metadatavalue != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.metadatavalue_.SetAllocated(metadatavalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadatavalue_.IsDefault()) {
    _impl_.metadatavalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.Motion.MetaData.metaDataValue)
}

// -------------------------------------------------------------------

// Motion

// required string name = 1;
inline bool Motion::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Motion::has_name() const {
  return _internal_has_name();
}
inline void Motion::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Motion::name() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Motion::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.name)
}
inline std::string* Motion::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.Motion.name)
  return _s;
}
inline const std::string& Motion::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Motion::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Motion::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Motion::release_name() {
  // @@protoc_insertion_point(field_release:SmartBodyBinary.Motion.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Motion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SmartBodyBinary.Motion.name)
}

// required int32 numChannels = 2;
inline bool Motion::_internal_has_numchannels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Motion::has_numchannels() const {
  return _internal_has_numchannels();
}
inline void Motion::clear_numchannels() {
  _impl_.numchannels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Motion::_internal_numchannels() const {
  return _impl_.numchannels_;
}
inline int32_t Motion::numchannels() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.numChannels)
  return _internal_numchannels();
}
inline void Motion::_internal_set_numchannels(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.numchannels_ = value;
}
inline void Motion::set_numchannels(int32_t value) {
  _internal_set_numchannels(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.numChannels)
}

// repeated string channelName = 3;
inline int Motion::_internal_channelname_size() const {
  return _impl_.channelname_.size();
}
inline int Motion::channelname_size() const {
  return _internal_channelname_size();
}
inline void Motion::clear_channelname() {
  _impl_.channelname_.Clear();
}
inline std::string* Motion::add_channelname() {
  std::string* _s = _internal_add_channelname();
  // @@protoc_insertion_point(field_add_mutable:SmartBodyBinary.Motion.channelName)
  return _s;
}
inline const std::string& Motion::_internal_channelname(int index) const {
  return _impl_.channelname_.Get(index);
}
inline const std::string& Motion::channelname(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.channelName)
  return _internal_channelname(index);
}
inline std::string* Motion::mutable_channelname(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.Motion.channelName)
  return _impl_.channelname_.Mutable(index);
}
inline void Motion::set_channelname(int index, const std::string& value) {
  _impl_.channelname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.channelName)
}
inline void Motion::set_channelname(int index, std::string&& value) {
  _impl_.channelname_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.channelName)
}
inline void Motion::set_channelname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartBodyBinary.Motion.channelName)
}
inline void Motion::set_channelname(int index, const char* value, size_t size) {
  _impl_.channelname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartBodyBinary.Motion.channelName)
}
inline std::string* Motion::_internal_add_channelname() {
  return _impl_.channelname_.Add();
}
inline void Motion::add_channelname(const std::string& value) {
  _impl_.channelname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Motion.channelName)
}
inline void Motion::add_channelname(std::string&& value) {
  _impl_.channelname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Motion.channelName)
}
inline void Motion::add_channelname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartBodyBinary.Motion.channelName)
}
inline void Motion::add_channelname(const char* value, size_t size) {
  _impl_.channelname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartBodyBinary.Motion.channelName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Motion::channelname() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Motion.channelName)
  return _impl_.channelname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Motion::mutable_channelname() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Motion.channelName)
  return &_impl_.channelname_;
}

// repeated int32 channelType = 4;
inline int Motion::_internal_channeltype_size() const {
  return _impl_.channeltype_.size();
}
inline int Motion::channeltype_size() const {
  return _internal_channeltype_size();
}
inline void Motion::clear_channeltype() {
  _impl_.channeltype_.Clear();
}
inline int32_t Motion::_internal_channeltype(int index) const {
  return _impl_.channeltype_.Get(index);
}
inline int32_t Motion::channeltype(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.channelType)
  return _internal_channeltype(index);
}
inline void Motion::set_channeltype(int index, int32_t value) {
  _impl_.channeltype_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.channelType)
}
inline void Motion::_internal_add_channeltype(int32_t value) {
  _impl_.channeltype_.Add(value);
}
inline void Motion::add_channeltype(int32_t value) {
  _internal_add_channeltype(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Motion.channelType)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Motion::_internal_channeltype() const {
  return _impl_.channeltype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Motion::channeltype() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Motion.channelType)
  return _internal_channeltype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Motion::_internal_mutable_channeltype() {
  return &_impl_.channeltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Motion::mutable_channeltype() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Motion.channelType)
  return _internal_mutable_channeltype();
}

// required int32 numFrames = 5;
inline bool Motion::_internal_has_numframes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Motion::has_numframes() const {
  return _internal_has_numframes();
}
inline void Motion::clear_numframes() {
  _impl_.numframes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Motion::_internal_numframes() const {
  return _impl_.numframes_;
}
inline int32_t Motion::numframes() const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.numFrames)
  return _internal_numframes();
}
inline void Motion::_internal_set_numframes(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.numframes_ = value;
}
inline void Motion::set_numframes(int32_t value) {
  _internal_set_numframes(value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.numFrames)
}

// repeated float keyTimes = 6;
inline int Motion::_internal_keytimes_size() const {
  return _impl_.keytimes_.size();
}
inline int Motion::keytimes_size() const {
  return _internal_keytimes_size();
}
inline void Motion::clear_keytimes() {
  _impl_.keytimes_.Clear();
}
inline float Motion::_internal_keytimes(int index) const {
  return _impl_.keytimes_.Get(index);
}
inline float Motion::keytimes(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.keyTimes)
  return _internal_keytimes(index);
}
inline void Motion::set_keytimes(int index, float value) {
  _impl_.keytimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.keyTimes)
}
inline void Motion::_internal_add_keytimes(float value) {
  _impl_.keytimes_.Add(value);
}
inline void Motion::add_keytimes(float value) {
  _internal_add_keytimes(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Motion.keyTimes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Motion::_internal_keytimes() const {
  return _impl_.keytimes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Motion::keytimes() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Motion.keyTimes)
  return _internal_keytimes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Motion::_internal_mutable_keytimes() {
  return &_impl_.keytimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Motion::mutable_keytimes() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Motion.keyTimes)
  return _internal_mutable_keytimes();
}

// repeated float keyValues = 7;
inline int Motion::_internal_keyvalues_size() const {
  return _impl_.keyvalues_.size();
}
inline int Motion::keyvalues_size() const {
  return _internal_keyvalues_size();
}
inline void Motion::clear_keyvalues() {
  _impl_.keyvalues_.Clear();
}
inline float Motion::_internal_keyvalues(int index) const {
  return _impl_.keyvalues_.Get(index);
}
inline float Motion::keyvalues(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.keyValues)
  return _internal_keyvalues(index);
}
inline void Motion::set_keyvalues(int index, float value) {
  _impl_.keyvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.keyValues)
}
inline void Motion::_internal_add_keyvalues(float value) {
  _impl_.keyvalues_.Add(value);
}
inline void Motion::add_keyvalues(float value) {
  _internal_add_keyvalues(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Motion.keyValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Motion::_internal_keyvalues() const {
  return _impl_.keyvalues_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Motion::keyvalues() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Motion.keyValues)
  return _internal_keyvalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Motion::_internal_mutable_keyvalues() {
  return &_impl_.keyvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Motion::mutable_keyvalues() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Motion.keyValues)
  return _internal_mutable_keyvalues();
}

// repeated float syncPoints = 8;
inline int Motion::_internal_syncpoints_size() const {
  return _impl_.syncpoints_.size();
}
inline int Motion::syncpoints_size() const {
  return _internal_syncpoints_size();
}
inline void Motion::clear_syncpoints() {
  _impl_.syncpoints_.Clear();
}
inline float Motion::_internal_syncpoints(int index) const {
  return _impl_.syncpoints_.Get(index);
}
inline float Motion::syncpoints(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.syncPoints)
  return _internal_syncpoints(index);
}
inline void Motion::set_syncpoints(int index, float value) {
  _impl_.syncpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartBodyBinary.Motion.syncPoints)
}
inline void Motion::_internal_add_syncpoints(float value) {
  _impl_.syncpoints_.Add(value);
}
inline void Motion::add_syncpoints(float value) {
  _internal_add_syncpoints(value);
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Motion.syncPoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Motion::_internal_syncpoints() const {
  return _impl_.syncpoints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Motion::syncpoints() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Motion.syncPoints)
  return _internal_syncpoints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Motion::_internal_mutable_syncpoints() {
  return &_impl_.syncpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Motion::mutable_syncpoints() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Motion.syncPoints)
  return _internal_mutable_syncpoints();
}

// repeated .SmartBodyBinary.Motion.MetaData metaData = 9;
inline int Motion::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int Motion::metadata_size() const {
  return _internal_metadata_size();
}
inline void Motion::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline ::SmartBodyBinary::Motion_MetaData* Motion::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:SmartBodyBinary.Motion.metaData)
  return _impl_.metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >*
Motion::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:SmartBodyBinary.Motion.metaData)
  return &_impl_.metadata_;
}
inline const ::SmartBodyBinary::Motion_MetaData& Motion::_internal_metadata(int index) const {
  return _impl_.metadata_.Get(index);
}
inline const ::SmartBodyBinary::Motion_MetaData& Motion::metadata(int index) const {
  // @@protoc_insertion_point(field_get:SmartBodyBinary.Motion.metaData)
  return _internal_metadata(index);
}
inline ::SmartBodyBinary::Motion_MetaData* Motion::_internal_add_metadata() {
  return _impl_.metadata_.Add();
}
inline ::SmartBodyBinary::Motion_MetaData* Motion::add_metadata() {
  ::SmartBodyBinary::Motion_MetaData* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:SmartBodyBinary.Motion.metaData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartBodyBinary::Motion_MetaData >&
Motion::metadata() const {
  // @@protoc_insertion_point(field_list:SmartBodyBinary.Motion.metaData)
  return _impl_.metadata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartBodyBinary

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sbmotion_2eproto
