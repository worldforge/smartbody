// generated by Fast Light User Interface Designer (fluid) version 1.0300


#include "RetargetCreatorWindow.h"
#include <ctype.h>
#include <stdlib.h>
#include <sb/SBScene.h>
#include "SBUtilities.h"
#include <FL/Fl_Device.H>
#include <FL/fl_draw.H>
#include <FL/Fl_File_Chooser.H>

const std::string defaultAssetDir = "../../../../data/";

RetargetCreatorWindow::RetargetCreatorWindow(int x, int y, int w, int h, char* name) : Fl_Double_Window(x, y, w, h)
{		
	this->label("Retarget Creator");
	this->begin();
	_choiceSrcSkeleton = new Fl_Choice(100, 20, 200, 25, "Source");
	_choiceTgtSkeleton = new Fl_Choice(350, 20, 200, 25, "Target");

	_browserMotion = new Fl_Multi_Browser(80, 80, 250, 350, "Input Motions");
	_browserMotion->align(FL_ALIGN_TOP);
	_browserMotion->when(FL_WHEN_CHANGED);
	_browserMotion->callback(OnMotionSelectCB, this);	
	_buttonDirChoose = new Fl_Button(350, 80, 120, 25, "Output Dir");
	_buttonDirChoose->callback(OnDirChooseCB, this);
	_curOutputDir    = new Fl_Input(480, 80, 250, 25);

	std::string mediaPath = SmartBody::SBScene::getScene()->getMediaPath();
	std::string outputPath = mediaPath + "/" +  "sbm-common/common-sk/retargetMotion/";
	_curOutputDir->value(outputPath.c_str());
	//_curOutputDir->deactivate();

	_buttonAssetDirChoose = new Fl_Button(350, 120, 120, 25, "Add Asset Dir");
	_buttonAssetDirChoose->callback(OnAssetDirChooseCB, this);

	_buttonAssetDirChoose = new Fl_Button(350, 150, 120, 25, "Remove Asset Dir");
	_buttonAssetDirChoose->callback(OnAssetDirRemoveCB, this);

	_assetDirList = new Fl_Multi_Browser(480, 120, 250, 100, "Motion Asset Dirs");
	_buttonRetarget  = new Fl_Button(350, 280, 100, 25, "Retarget");
	_buttonRetarget->callback(OnRetargetCB, this);
	_buttonReloadAsset = new Fl_Button(460, 280, 100, 25, "Reload Assets");
	_buttonReloadAsset->callback(OnReloadAssetCB, this);
	this->end();	
	loadSkeletons();
	loadMotions();
}

void RetargetCreatorWindow::retargetSelectedMotion()
{
	SmartBody::SBScene* scene = SmartBody::SBScene::getScene();
	// hard coded the script name for now
	scene->runScript("motion-retarget.py");
	scene->runScript("drag-and-drop.py");
	std::string retargetCmd, srcSkelName, tgtSkelName, outDir;
	srcSkelName = _choiceSrcSkeleton->text(_choiceSrcSkeleton->value());
	tgtSkelName = _choiceTgtSkeleton->text(_choiceTgtSkeleton->value());
	outDir = _curOutputDir->value();
	// apply the skeleton name mapping so both src and tgt skeleton are in the same internal joint names
	std::string remapCmd = "remapSkeleton('"+tgtSkelName+"','" + tgtSkelName + "')";
	scene->run(remapCmd);
	remapCmd = "remapSkeleton('"+srcSkelName+"','" + srcSkelName + "')";
	scene->run(remapCmd);
	for (unsigned int i=0; i < inputMotionList.size(); i++)
	{
		std::string moName = inputMotionList[i];
		std::string mapCmd = "remapMotion('" + srcSkelName +"','" + moName + "','" + srcSkelName + "')";
		scene->run(mapCmd);
		retargetCmd = "tempMotionName = retargetMotionFunc('" + moName + "','" + srcSkelName + "','" + tgtSkelName + "')";
		SmartBody::util::log("retarget Cmd = %s", retargetCmd.c_str());
		//scene->command(retargetCmd);
		scene->run(retargetCmd);
		std::string saveCmd = "remapAndSaveMotion(tempMotionName,'"+tgtSkelName+"','"+outDir+"')";
		SmartBody::util::log("save Cmd = %s", saveCmd.c_str());
		scene->run(saveCmd);
		mapCmd = "remapMotionInverse('" + srcSkelName +"','" + moName + "','" + srcSkelName + "')";
		scene->run(mapCmd);
	}
	// revert the skeleton name
	std::string invmapCmd = "remapSkeletonInverse('"+tgtSkelName+"','"+tgtSkelName+"')";
	scene->run(invmapCmd);
	invmapCmd = "remapSkeletonInverse('"+srcSkelName+"','"+srcSkelName+"')";
	scene->run(invmapCmd);
}

void RetargetCreatorWindow::reloadAssets()
{
	SmartBody::SBScene* scene = SmartBody::SBScene::getScene();
	//std::string assetDir = _curAssetDir->value();
	for (int i=0; i < _assetDirList->size(); i++)
	{
		std::string assetDir = _assetDirList->text(i+1);
		std::string sceneCmd ="scene.loadAssetsFromPath('"+assetDir+"')";
		scene->run(sceneCmd);
	}
	//std::string sceneCmd = "scene.setAssetPath('"+assetDir+"')";	
	//mcu.executePython("scene.loadAssets()");
}

void RetargetCreatorWindow::OnDirChooseCB( Fl_Widget* widget, void* data )
{
	RetargetCreatorWindow* viewer = (RetargetCreatorWindow*) data;
	const char* fileDir = fl_dir_chooser("Output Dir", viewer->_curOutputDir->value(), 1);
	if (!fileDir)
		return;
	viewer->_curOutputDir->value(fileDir);
}

void RetargetCreatorWindow::OnAssetDirChooseCB( Fl_Widget* widget, void* data )
{
	RetargetCreatorWindow* viewer = (RetargetCreatorWindow*) data;
	const char* assetDir = fl_dir_chooser("Add Asset Dir", SmartBody::SBScene::getScene()->getMediaPath().c_str(), 1);
	if (!assetDir)
		return;
	//viewer->_curAssetDir->value(assetDir);
	viewer->_assetDirList->add(assetDir);
}

void RetargetCreatorWindow::OnReloadAssetCB( Fl_Widget* widget, void* data )
{
	RetargetCreatorWindow* win = (RetargetCreatorWindow*) data;
	win->reloadAssets();
	win->loadMotions();
	win->loadSkeletons();
}

void RetargetCreatorWindow::OnMotionSelectCB( Fl_Widget* widget, void* data )
{
	RetargetCreatorWindow* win = (RetargetCreatorWindow*) data;

	std::vector<std::string> selectedMotions;
	std::vector<bool> boolSelectedMotions;
	Fl_Multi_Browser* browserMotion = win->_browserMotion;
	for (int i = 0; i < browserMotion->size(); i++)
	{
		if (browserMotion->selected(i+1))
		{
			boolSelectedMotions.emplace_back(true);
			selectedMotions.emplace_back(browserMotion->text(i + 1));
		}
		else
			boolSelectedMotions.emplace_back(false);
	}
	win->inputMotionList = selectedMotions;
}



void RetargetCreatorWindow::OnAssetDirRemoveCB( Fl_Widget* widget, void* data )
{
	RetargetCreatorWindow* win = (RetargetCreatorWindow*) data;

	std::vector<std::string> selectedDirs;	
	Fl_Multi_Browser* browserDir = win->_assetDirList;
	for (int i=browserDir->size()-1; i >= 0; i--)
	{
		if (browserDir->selected(i+1))
		{
			browserDir->remove(i+1);						
		}
	}	
}


void RetargetCreatorWindow::OnRetargetCB( Fl_Widget* widget, void* data )
{
	RetargetCreatorWindow* win = (RetargetCreatorWindow*) data;
	win->retargetSelectedMotion();		
}

RetargetCreatorWindow::~RetargetCreatorWindow()
{
}

void RetargetCreatorWindow::show()
{
	Fl_Double_Window::show();
}

void RetargetCreatorWindow::hide()
{
	Fl_Double_Window::hide();
}



void RetargetCreatorWindow::draw()
{
	Fl_Double_Window::draw();	
}

void RetargetCreatorWindow::loadSkeletons()
{	
	_choiceSrcSkeleton->clear();
	_choiceTgtSkeleton->clear();
	const std::vector<std::string>& skeletonNames = SmartBody::SBScene::getScene()->getSkeletonNames();
	for (unsigned int i=0;i<skeletonNames.size();i++)
	{
		std::string skelName = skeletonNames[i];
		_choiceSrcSkeleton->add(skelName.c_str());
		_choiceTgtSkeleton->add(skelName.c_str());
	}
	if (skeletonNames.size() > 0)
	{
		_choiceSrcSkeleton->value(0);
		_choiceTgtSkeleton->value(0);
	}
}

void RetargetCreatorWindow::loadMotions()
{
	_browserMotion->clear();
	const std::vector<std::string>& motionNames = SmartBody::SBScene::getScene()->getMotionNames();
	for (unsigned int i=0;i<motionNames.size();i++)
	{
		std::string moName = motionNames[i];
		_browserMotion->add(moName.c_str());
	}	
}

